<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>脚印</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaozhoa.github.com/"/>
  <updated>2020-01-09T06:32:14.575Z</updated>
  <id>https://zhaozhoa.github.com/</id>
  
  <author>
    <name>张朝</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>代理模式</title>
    <link href="https://zhaozhoa.github.com/2020/01/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zhaozhoa.github.com/2020/01/02/设计模式之代理模式/</id>
    <published>2020-01-02T08:43:20.000Z</published>
    <updated>2020-01-09T06:32:14.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><code>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问</code></p><p>代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，客户实际上访问的是替身对象。替身对象对请求做出一些处理之 后，再把请求转交给本体对象</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><blockquote><p>在四月一个晴朗的早晨，小明遇见了他的百分百女孩，我们暂且称呼小明的女神为A。两天之后，小明决定给A送一束花来表白。刚好小明打听到A和他有一个共同的朋友 B，于是内向的小明决定让 B来代替自己完成送花这件事情</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xiaoMing = &#123;</span><br><span class="line">  sendFlower(target) &#123;</span><br><span class="line">    <span class="keyword">let</span> flower = <span class="keyword">new</span> Flower()</span><br><span class="line">    target.receiveFlower(flower)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = &#123;</span><br><span class="line">  receiveFlower(flower) &#123;</span><br><span class="line">    A.receiveFlower(flower)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">  receiveFlower(flower) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到'</span> + flower);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoMing.sendFlower(B)</span><br></pre></td></tr></table></figure><blockquote><p>假设当 A 在心情好的时候收到花，小明表白成功的几率有<br>60%，而当A在心情差的时候收到花，小明表白的成功率无限趋近于 0,</p><p>但是 A的朋友 B却很了解 A，所以小明只管把花交给 B，B会监听 A的心情变化，然后选择A心情好的时候把花转交给A，</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flower</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xiaoMing = &#123;</span><br><span class="line">  sendFlower(target) &#123;</span><br><span class="line">    <span class="keyword">let</span> flower = <span class="keyword">new</span> Flower()</span><br><span class="line">    target.receiveFlower(flower)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = &#123;</span><br><span class="line">  receiveFlower(flower) &#123;</span><br><span class="line">    <span class="comment">// B 监听 A 心情 好时送花</span></span><br><span class="line">    A.listenGoodMood(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      A.receiveFlower(flower)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> A = &#123;</span><br><span class="line">  receiveFlower(flower) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'收到'</span> + flower);</span><br><span class="line">  &#125;,</span><br><span class="line">  listenGoodMood(fn) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn()</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> xiaoMing.sendFlower(B)</span><br></pre></td></tr></table></figure><h2 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h2><p>代理 B 可以帮助 A过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理 B 处被拒绝掉。这种代理叫作保护代理。</p><p>另外，假设现实中的花价格不菲，导致在程序世界里，new Flower 也是一个代价昂贵的操作，那么我们可以把 new Flower 的操作交给代理 B去执行，代理 B会选择在 A心情好时再执行 new Flower，这是代理模式的另一种形式，叫作虚拟代理。<code>虚拟代理把一些开销很大的对象，延迟到 真正需要它的时候才去创建</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> B = &#123;</span><br><span class="line">   receiveFlower: <span class="function"><span class="keyword">function</span> (<span class="params">flower</span>) </span>&#123;</span><br><span class="line">     A.listenGoodMood(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> flower = <span class="keyword">new</span> Flower(); <span class="comment">// 延迟创建 flower 对象</span></span><br><span class="line">       A.receiveFlower(flower);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p><strong>思考：</strong> vue-router 中的路由守卫 和 axios 中的 拦截器 是不是 用到了代理模式</p><h3 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h3><p>在Web开发中，图片预加载是一种常用的技术，如果直接给某个 img 标签节点设置 src属性，由于图片过大或者网络不佳，图片的位置往往有段时间会是一片空白。常见的做法是先用一张 loading图片占位，然后用异步的方式加载图片，等图片加载好了再把它填充到 img 节点里，这种 场景就很适合使用虚拟代理。</p><h4 id="非代理模式实现"><a href="#非代理模式实现" class="headerlink" title="非代理模式实现"></a>非代理模式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(imgNode)</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步</span></span><br><span class="line">    img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      imgNode.src = img.src</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setSrc</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">      imgNode.src = <span class="string">'./图片预加载/14839259814975095.gif'</span></span><br><span class="line">      img.src = src</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setSrc(<span class="string">'https://tse1-mm.cn.bing.net/th?id=OIP.BX8LJipOhUSQQx8GCCplWQHaIM&amp;w=91&amp;h=101&amp;c=8&amp;rs=1&amp;qlt=90&amp;dpr=1.25&amp;pid=3.1&amp;rm=2'</span>)</span><br></pre></td></tr></table></figure><p><strong>闭包优化</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myImage = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(imgNode)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image</span><br><span class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        imgNode.src = img.src</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc(src) &#123;</span><br><span class="line">          imgNode.src = <span class="string">'./图片预加载/14839259814975095.gif'</span></span><br><span class="line">          img.src = src</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    myImage.setSrc(<span class="string">'https://tse1-mm.cn.bing.net/th?id=OIP.BX8LJipOhUSQQx8GCCplWQHaIM&amp;w=91&amp;h=101&amp;c=8&amp;rs=1&amp;qlt=90&amp;dpr=1.25&amp;pid=3.1&amp;rm=2'</span>)</span><br></pre></td></tr></table></figure><p><strong>优点：</strong> 用闭包封装后，将变量私有化，使得外部不能直接修改这些变量</p><h4 id="代理模式实现"><a href="#代理模式实现" class="headerlink" title="代理模式实现"></a>代理模式实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myImage = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc(src) &#123;</span><br><span class="line">      imgNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyImage = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 虚拟代理，帮助我们控制访问创建开销大的资源</span></span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步</span></span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 代理转发请求</span></span><br><span class="line">    myImage.setSrc(<span class="keyword">this</span>.src);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    setSrc(src) &#123;</span><br><span class="line">      <span class="comment">// 加载loading 图</span></span><br><span class="line">      <span class="comment">// 此处可以加载一个本地图片或者缓存过的图片</span></span><br><span class="line">      myImage.setSrc(<span class="string">'./图片预加载/14839259814975095.gif'</span>);</span><br><span class="line">      img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage.setSrc(<span class="string">'https://tse1-mm.cn.bing.net/th?id=OIP.BX8LJipOhUSQQx8GCCplWQHaIM&amp;w=91&amp;h=101&amp;c=8&amp;rs=1&amp;qlt=90&amp;dpr=1.25&amp;pid=3.1&amp;rm=2'</span>);</span><br></pre></td></tr></table></figure><h3 id="虚拟代理合并-HTTP请求"><a href="#虚拟代理合并-HTTP请求" class="headerlink" title="虚拟代理合并 HTTP请求"></a>虚拟代理合并 HTTP请求</h3><blockquote><p>在 Web 开发中，也许最大的开销就是网络请求。<br>假设我们在做一个文件同步的功能，当我们选中一个 checkbox 的时候，它对应的文件就会被同 步到另外一台备用服务器上面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span>1</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"2"</span>&gt;</span>2</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"3"</span>&gt;</span>3</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"4"</span>&gt;</span>4</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"5"</span>&gt;</span>5</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"6"</span>&gt;</span>6</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"7"</span>&gt;</span>7</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"8"</span>&gt;</span>8</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"9"</span>&gt;</span>9</span><br></pre></td></tr></table></figure><p><strong>不使用代理合并请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkbox.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> c = checkbox[i];</span><br><span class="line">  c.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.checked === <span class="literal">true</span>) &#123;</span><br><span class="line">      asyncFile(<span class="keyword">this</span>.id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同步数据方法</span></span><br><span class="line"><span class="keyword">let</span> asyncFile = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`同步第<span class="subst">$&#123;id&#125;</span> 个`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checkbox 每选中一个，就好同步一个，如果不停点击，则会不停发送请求同步数据，如此频繁的网络请求将会带来相当大的开销。</p><p><strong>使用代理合并请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkbox.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> c = checkbox[i];</span><br><span class="line">  c.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.checked === <span class="literal">true</span>) &#123;</span><br><span class="line">      proxySyncFile(<span class="keyword">this</span>.id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">let</span> proxySyncFile = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = [], timer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    cache.push(id)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证不会覆盖已经启动的定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每两秒 请求一次</span></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      syncFile(cache.join(<span class="string">','</span>))</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">      cache.length = <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> syncFile = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`同步第<span class="subst">$&#123;id&#125;</span> 个`</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 proxySyncFile 方法 代理 syncFile 方法，将两秒内的请求进行一次合并，统一发送</p><h3 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h3><p><strong>计算乘积</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arg.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> e = arg[i];</span><br><span class="line">    res = res * e</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyMult = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = arg.join(<span class="string">','</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cache[args] = mult(...arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxyMult(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br></pre></td></tr></table></figure><p>用 proxyMult 代理 mult ，将每次的计算都缓存到 proxyMult 中</p><p><strong>扩展</strong></p><p><code>当使用ajax请求分页数据的时候，可以用上面的方法缓存分页数据，减少Ajax 请求</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;p&gt;&lt;code&gt;代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代理模式的关键是，当
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhaozhoa.github.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhaozhoa.github.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://zhaozhoa.github.com/2019/12/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zhaozhoa.github.com/2019/12/30/设计模式之策略模式/</id>
    <published>2019-12-30T03:54:08.000Z</published>
    <updated>2020-01-02T08:41:10.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p><strong>策略模式的定义是</strong>：<code>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</code></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><blockquote><p>很多公司的年终奖是根据员工的工资基数和年底绩效情况来发放的。例如，绩效为 S的人年终奖有 4倍工资，绩效为A的人年终奖有 3倍工资，而绩效为 B的人年终奖是 2倍工资。假设财 务部要求我们提供一段代码，来方便他们计算员工的年终奖。</p></blockquote><h3 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params">performanceLevel, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">'S'</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">'A'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (performanceLevel === <span class="string">'B'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'S'</span>, <span class="number">10000</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>缺点分分析：</strong></p><ol><li>calculateBonus 函数比较庞大，包含了很多 if-else 语句，这些语句需要覆盖所有的逻辑 分支</li><li>calculateBonus 函数缺乏弹性，如果增加了一种新的绩效等级 C，或者想把绩效 S 的奖金 系数改为 5，那我们必须深入 calculateBonus函数的内部实现，这是违反开放封闭原则的</li><li>算法的复用性差，如果在程序的其他地方需要重用这些计算奖金的算法呢？我们的选择 只有复制和粘贴</li></ol><h3 id="使用策略模式重构代码"><a href="#使用策略模式重构代码" class="headerlink" title="使用策略模式重构代码"></a>使用策略模式重构代码</h3><p><code>将不变的部分和变化的部分分隔起来，是每个设计模式的主题</code></p><p>一个基于策略模式的程序至少分为两部分，策略类和环境类</p><ul><li><strong>策略类：</strong>封装了具体的算法，并负责具体的计算过程</li><li><strong>环境类：</strong>接受客户的请求，随后把请求委托给一个策略类</li></ul><p><strong>关系：</strong> 环境类需要维持某个策略类的引用</p><h4 id="es6-重构代码"><a href="#es6-重构代码" class="headerlink" title="es6 重构代码"></a>es6 重构代码</h4><p> 策略类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceS</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  calculate(salary) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceA</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  calculate(salary) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceB</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">  calculate(salary) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>环境类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bonus</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 原始工资</span></span><br><span class="line">    <span class="keyword">this</span>.salary = <span class="literal">null</span>; </span><br><span class="line">    <span class="comment">// 用于保存 绩效等级对应的策略类</span></span><br><span class="line">    <span class="keyword">this</span>.strategy = <span class="literal">null</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setSalary(salary) &#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 保存策略类</span></span><br><span class="line">  setStrategy(strategy) &#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用策略类</span></span><br><span class="line">  getBonus() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bonus = <span class="keyword">new</span> Bonus();</span><br><span class="line">bonus.setSalary(<span class="number">10000</span>);</span><br><span class="line"><span class="comment">// 传入策略类</span></span><br><span class="line">bonus.setStrategy(<span class="keyword">new</span> PerformanceS());</span><br><span class="line"><span class="built_in">console</span>.log(bonus.getBonus()); <span class="comment">// 40000</span></span><br><span class="line"></span><br><span class="line">bonus.setStrategy(<span class="keyword">new</span> PerformanceA());</span><br><span class="line"><span class="built_in">console</span>.log(bonus.getBonus()); <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript版本的策略模式"><a href="#JavaScript版本的策略模式" class="headerlink" title="JavaScript版本的策略模式"></a>JavaScript版本的策略模式</h2><p>实际上在 JavaScript 语言中，函数也是对象，所以更简单和直接的做法是把 strategy 直接定义为函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strategies = &#123;</span><br><span class="line">  S(salary) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  A(salary) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  B(salary) &#123;</span><br><span class="line">    <span class="keyword">return</span> salart * <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> calculateBonus = <span class="function">(<span class="params">level, salary</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> strategies[level](salary)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'S'</span>, <span class="number">1000</span>)) <span class="comment">// 4000</span></span><br></pre></td></tr></table></figure><h2 id="策略模式验证表单"><a href="#策略模式验证表单" class="headerlink" title="策略模式验证表单"></a>策略模式验证表单</h2><p>html 表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http:// xxx.com/register"</span> <span class="attr">id</span>=<span class="string">"registerForm"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span> </span><br><span class="line">  请输入用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">  请输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line">  请输入手机号码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phoneNumber"</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="无策略模式的表单校验"><a href="#无策略模式的表单校验" class="headerlink" title="无策略模式的表单校验"></a>无策略模式的表单校验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (registerForm.userName.value === <span class="string">''</span>) &#123;</span><br><span class="line">    alert(<span class="string">'用户名不能为空'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (registerForm.password.value.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line">    alert(<span class="string">'密码长度不能少于 6 位'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(registerForm.phoneNumber.value)) &#123;</span><br><span class="line">    alert(<span class="string">'手机号码格式不正确'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题:</strong></p><ol><li>registerForm.onsubmit 函数比较庞大，包含了很多 if-else 语句，这些语句需要覆盖所有 的校验规则</li><li>registerForm.onsubmit 函数缺乏弹性，如果增加了一种新的校验规则，或者想把密码的长 度校验从 6改成 8，我们都必须深入 registerForm.onsubmit 函数的内部实现，这是违反开 放—封闭原则的。</li><li>算法的复用性差，如果在程序中增加了另外一个表单，这个表单也需要进行一些类似的 校验，那我们很可能将这些校验逻辑复制得漫天遍野</li></ol><h3 id="策略模式重构代码"><a href="#策略模式重构代码" class="headerlink" title="策略模式重构代码"></a>策略模式重构代码</h3><h4 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a>基础版</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略类</span></span><br><span class="line"><span class="comment"> * 存储所有的校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> strategies = &#123;</span><br><span class="line">  isNonEmpty(value, errMsg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength(value, length, errMsg) &#123;</span><br><span class="line">     <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">       <span class="keyword">return</span> errMsg</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isMobile(value, errMsg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^1[3|8|7|8][0-9]&#123;9&#125;$/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * context</span></span><br><span class="line"><span class="comment"> * 负责接收用户的请求并委托给策略对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(dom, rule, errMsg) &#123;</span><br><span class="line">    <span class="keyword">let</span> ary = rule.split(<span class="string">':'</span>)</span><br><span class="line">    <span class="comment">// 数组里面存每一个校验方法，但没有调用</span></span><br><span class="line">    <span class="keyword">this</span>.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> strategy = ary.shift()</span><br><span class="line">      ary.unshift(dom.value)</span><br><span class="line">      ary.push(errMsg)</span><br><span class="line">        <span class="keyword">return</span> strategies[strategy](...ary)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 循环调用 cache 里面的方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, validataFun; validataFun = <span class="keyword">this</span>.cache[i++];) &#123;</span><br><span class="line">      <span class="keyword">var</span> msg = validataFun()</span><br><span class="line">      <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validataFun = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> validator = <span class="keyword">new</span> Validator()</span><br><span class="line">  <span class="comment">// 添加校验规则</span></span><br><span class="line">  validator.add(registerForm.userName, <span class="string">'isNonEmpty'</span>, <span class="string">'用户名不能为空'</span>);</span><br><span class="line">  validator.add(registerForm.password, <span class="string">'minLength:6'</span>, <span class="string">'密码长度不能少于 6 位'</span>);</span><br><span class="line">  validator.add(registerForm.phoneNumber, <span class="string">'isMobile'</span>, <span class="string">'手机号码格式不正确'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取校验结果</span></span><br><span class="line">  <span class="keyword">let</span> errorMsg = validator.start()</span><br><span class="line">  <span class="keyword">return</span> errorMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>)</span><br><span class="line"></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> errMsg = validataFun()</span><br><span class="line">  <span class="comment">// 如果 errMsg 非空，说明没有通过校验</span></span><br><span class="line">  <span class="keyword">if</span> (errMsg) &#123;</span><br><span class="line">    alert(errMsg)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点：</strong> 各个模块功能明确，可以进行抽离封装，实现复用</p><h4 id="升级版"><a href="#升级版" class="headerlink" title="升级版"></a>升级版</h4><p>在上面的例子中，每一个表单一次只能添加一种校验规则，我们期望它可以一次添加多种校验规则 如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">validator.add(registerForm.userName, [&#123;</span><br><span class="line">  strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">  errorMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">  errorMsg: <span class="string">'用户名长度不能小于 10 位'</span></span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><p><strong>具体实现</strong></p><ol><li><strong>抽离，封装，表单验证模块 ./strategies.js</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  isNonEmpty(value, errMsg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength(value, length, errMsg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isMobile(value, errMsg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^1[3|8|7|8][0-9]&#123;9&#125;$/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果在 js 中 使用 es6 模块化，需要在 html文件 是 script 标签添加</p><p><code>type=&quot;module&quot;</code>，同时用本地服务器打开项目，否则会<code>跨域</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"./表单校验策略模式.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>抽离 Validator 类 Validator.js</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> strategies <span class="keyword">from</span> <span class="string">'./strategies.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Validator 类</span></span><br><span class="line"><span class="comment"> * 控制校验规则使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(dom, rules) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, rule; rule = rules[i++];) &#123;</span><br><span class="line">      <span class="keyword">let</span> strategyAry = rule.strategy.split(<span class="string">':'</span>)</span><br><span class="line">      <span class="keyword">let</span> errorMsg = rule.errorMsg</span><br><span class="line">      <span class="keyword">this</span>.cache.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> strategy = strategyAry.shift()</span><br><span class="line">        strategyAry.unshift(dom.value)</span><br><span class="line">        strategyAry.push(errorMsg)</span><br><span class="line">        <span class="keyword">return</span> strategies[strategy](...strategyAry)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  start() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[i++];) &#123;</span><br><span class="line">      <span class="keyword">let</span> errorMsg = validatorFunc()</span><br><span class="line">      <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">        <span class="keyword">return</span> errorMsg</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Validator</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>用户调用代码</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Validator <span class="keyword">from</span> <span class="string">'./Validator.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************客户调用代码**************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validataFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">  validator.add(registerForm.userName, [&#123;</span><br><span class="line">    strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">    errorMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">    errorMsg: <span class="string">'用户名长度不能小于 10 位'</span></span><br><span class="line">  &#125;]);</span><br><span class="line">  validator.add(registerForm.password, [&#123;</span><br><span class="line">    strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">    errorMsg: <span class="string">'密码长度不能小于 6 位'</span></span><br><span class="line">  &#125;]);</span><br><span class="line">  validator.add(registerForm.phoneNumber, [&#123;</span><br><span class="line">    strategy: <span class="string">'isMobile'</span>,</span><br><span class="line">    errorMsg: <span class="string">'手机号码格式不正确'</span></span><br><span class="line">  &#125;]);</span><br><span class="line">  <span class="keyword">let</span> errorMsg = validator.start();</span><br><span class="line">  <span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> errorMsg = validataFunc();</span><br><span class="line">  <span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">    alert(errorMsg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;策略模式的定义是&lt;/strong&gt;：&lt;code&gt;定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhaozhoa.github.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhaozhoa.github.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则三 正则中的括号</title>
    <link href="https://zhaozhoa.github.com/2019/12/25/%E6%AD%A3%E5%88%99%E4%B8%89/"/>
    <id>https://zhaozhoa.github.com/2019/12/25/正则三/</id>
    <published>2019-12-25T10:48:18.000Z</published>
    <updated>2019-12-25T08:13:48.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式括号的作用"><a href="#正则表达式括号的作用" class="headerlink" title="正则表达式括号的作用"></a>正则表达式括号的作用</h1><h2 id="分组和分支结构"><a href="#分组和分支结构" class="headerlink" title="分组和分支结构"></a>分组和分支结构</h2><p>这二者是括号最直觉的作用，也是最原始的功能，强调括号内的正则是一个整体，即提供子表达式</p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><code>我们知道 /a+/ 匹配连续出现的 &quot;a&quot;，而要匹配连续出现的 &quot;ab&quot; 时，需要使用 /(ab)+/</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/(ab)+/g</span></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">'ababa abbbb ababab'</span></span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex)); <span class="comment">// [ 'abab', 'ab', 'ababab' ]</span></span><br></pre></td></tr></table></figure><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p><code>而在多选分支结构 (p1|p2) 中，此处括号的作用也是不言而喻的，提供了分支表达式的所有可能</code></p><p>比如要匹配如下字符串</p><blockquote><p>I love JavaScript </p><p>I love Regular Expression</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg= <span class="regexp">/^I love (JavaScript|Regular Expression)$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'I love JavaScript'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'I love Regular Expression'</span>));</span><br></pre></td></tr></table></figure><p>如果去掉正则中的括号，即：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^I love JavaScript|Regular Expression$/，</span><br></pre></td></tr></table></figure><p> 匹配字符串是 “I love JavaScript” 和 “Regular Expression”，当然这不是我们想要的。</p><h2 id="分组引用"><a href="#分组引用" class="headerlink" title="分组引用"></a>分组引用</h2><p><code>这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作</code></p><p>yyyy-mm-dd 的日期格式，可以写一个简单正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/</span></span><br></pre></td></tr></table></figure><p>加括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br></pre></td></tr></table></figure><p>括号里面的内容都可以看成不同组</p><h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>比如提取出年、月、日，可以这么做</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>; </span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"2017-06-12"</span>; </span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) );</span><br><span class="line"><span class="comment">//[ '2019-12-23','2019','12','23',index: 0,input: '2019-12-23',groups: undefined ]</span></span><br></pre></td></tr></table></figure><blockquote><p>match 返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的 内容，然后是匹配下标，最后是输入的文本。另外，正则表达式是否有修饰符 g，match 返回的数组格式是不一样的。</p></blockquote><p>也可以使用正则的 exec 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2019-12-23'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [ '2019-12-23','2019','12','23',index: 0,input: '2019-12-23',groups: undefined ]</span></span><br></pre></td></tr></table></figure><p>同时，也可以使用构造函数的全局属性 $1 至 $9 来获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2019-02-24'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接使用正则方法 不用接收返回值</span></span><br><span class="line">reg.test(str) </span><br><span class="line"><span class="comment">// 或 reg.exec 或 str.match(reg)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// 2019</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">// 02</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>比如，想把 yyyy-mm-dd 格式，替换成 mm/dd/yyyy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>,</span><br><span class="line">str = <span class="string">'2019-12-24'</span>,</span><br><span class="line">res = str.replace(reg, <span class="string">'$2/$3/$1'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 12/24/2019</span></span><br></pre></td></tr></table></figure><p>其中 replace 中的，第二个参数里用 $1、$2、$3 指代相应的分组。等价于如下的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>,</span><br><span class="line">str = <span class="string">'2019-12-24'</span></span><br><span class="line"><span class="keyword">let</span> res = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">2</span> + <span class="string">'/'</span> + <span class="built_in">RegExp</span>.$<span class="number">3</span> + <span class="string">'/'</span> + <span class="built_in">RegExp</span>.$<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 12/24/2019</span></span><br></pre></td></tr></table></figure><p>也等价于:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>,</span><br><span class="line">  str = <span class="string">'2019-12-24'</span>,</span><br><span class="line">  res = str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">match, year, month, day</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> month + <span class="string">'/'</span> + day + <span class="string">'/'</span> + year</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 12/24/2019</span></span><br></pre></td></tr></table></figure><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><blockquote><p>除了使用相应 API 来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。</p></blockquote><p>比如要写一个正则支持匹配如下三种格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span><span class="number">-06</span><span class="number">-12</span> </span><br><span class="line"><span class="number">2016</span>/<span class="number">06</span>/<span class="number">12</span> </span><br><span class="line"><span class="number">2016.06</span><span class="number">.12</span></span><br></pre></td></tr></table></figure><p>最先可能想到的正则是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;(-|\/|\.)\d&#123;2&#125;/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">'2019-12-12'</span>,</span><br><span class="line">str2 = <span class="string">'2019/12/12'</span>,</span><br><span class="line">str3 = <span class="string">'2019.12.12'</span>,</span><br><span class="line">str4 = <span class="string">'2016-06/12'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str1));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.test(str2) );  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.test(str3) );<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( reg.test(str4) ); <span class="comment">// true ❌ */</span></span><br></pre></td></tr></table></figure><p>其中 / 和 . 需要转义。虽然匹配了要求的情况，但也匹配 “<code>2016-06/12</code>“ 这样的数据。</p><p>要使分隔符前后一直，使用反向引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;/</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">'2019-12-12'</span>,</span><br><span class="line">  str2 = <span class="string">'2019/12/12'</span>,</span><br><span class="line">  str3 = <span class="string">'2019.12.12'</span>,</span><br><span class="line">  str4 = <span class="string">'2019-12/12'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str1)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str2)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str3)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str4)); <span class="comment">// false ✔</span></span><br></pre></td></tr></table></figure><p><code>注意里面的 \1，表示的引用之前的那个分组 (-|\/|\.)。不管它匹配到什么（比如 -），\1 都匹配那个同 样的具体某个字符</code></p><h4 id="括号嵌套则么办"><a href="#括号嵌套则么办" class="headerlink" title="括号嵌套则么办"></a>括号嵌套则么办</h4><blockquote><p><code>以左括号为准</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^((\d)(\d(\d)))\1\2\3\4$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'1231231233'</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(str)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">// 23</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">4</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="10-表示什么"><a href="#10-表示什么" class="headerlink" title="\10 表示什么"></a>\10 表示什么</h4><p>另外一个疑问可能是，即 \10 是表示第 10 个分组，还是 \1 和 0 呢？</p><p><code>答案是前者</code></p><blockquote><p>如果真要匹配 \1 和 0 的话，请使用 (?:\1)0 或者 \1(?:0)</p></blockquote><h4 id="分组后面有量词会怎么样"><a href="#分组后面有量词会怎么样" class="headerlink" title="分组后面有量词会怎么样"></a>分组后面有量词会怎么样</h4><blockquote><p><code>分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> reg = <span class="regexp">/(\d)+ \1/</span></span><br><span class="line"> <span class="built_in">console</span>.log(reg.test(<span class="string">'12345 1'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'12345 5'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>从上面看出，分组 (\d) 引用的数据是 “5”。</p><h2 id="非捕获括号"><a href="#非捕获括号" class="headerlink" title="非捕获括号"></a>非捕获括号</h2><p>如果只想要括号最原始的功能，但不会引用它，即，既不在 API 里引用，也不在正则里反向引用。 此时可以使用非捕获括号 (?:p) 和 (?:p1|p2|p3) 如 </p><blockquote><p>\10 的例子</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="字符串-trim-方法模拟"><a href="#字符串-trim-方法模拟" class="headerlink" title="字符串 trim 方法模拟"></a>字符串 trim 方法模拟</h3><blockquote><p>trim 方法是去掉字符串的开头和结尾的空白符</p></blockquote><p><strong>方法一：</strong>匹配到开头和结尾的空白符，然后替换成空字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.Mytrim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/^\s+|\s+$/g</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(reg, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'   sss  '</span>.Mytrim()); <span class="comment">// sss</span></span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>匹配整个字符串，然后用引用来提取出相应的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.Mytrim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="regexp">/^\s*(.*?)\s*$/g</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.replace(reg, <span class="string">'$1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'   sss  '</span>.Mytrim()); <span class="comment">//sss</span></span><br></pre></td></tr></table></figure><p>这里使用了惰性匹配 *?，不然也会匹配最后一个空格之前的所有空格的</p><h3 id="将每个单词的首字母转换为大写"><a href="#将每个单词的首字母转换为大写" class="headerlink" title="将每个单词的首字母转换为大写"></a>将每个单词的首字母转换为大写</h3><blockquote><p>my name is zhao =&gt; My Name Is Zhao</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">titleize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> str.toLowerCase().replace(<span class="regexp">/(^|\s)[a-z]/g</span>, c =&gt;c.toUpperCase())</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(titleize(<span class="string">'my name is zhao'</span>));</span><br></pre></td></tr></table></figure><p><code>/(^|\s)\w/g</code> 表示匹配 开头或者空字符后面的第一个小写字母</p><h3 id="驼峰化"><a href="#驼峰化" class="headerlink" title="驼峰化"></a>驼峰化</h3><blockquote><p> -good-dog=&gt;  GoodDog 或 </p><p>good-dog =&gt; goodDog 或</p><p>good_dog =&gt; goodDog</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> camelize = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/[-_\s](.)?/g</span>, (match,c) =&gt; c ? c.toUpperCase() : <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(camelize(<span class="string">'-moz-transform'</span>));</span><br></pre></td></tr></table></figure><h3 id="逆驼峰化"><a href="#逆驼峰化" class="headerlink" title="逆驼峰化"></a>逆驼峰化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dasherize = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/([A-Z])/g</span>, <span class="string">'-$1'</span>).replace(<span class="regexp">/-([A-Z])/g</span>, c =&gt; c.toLowerCase()).replace(<span class="regexp">/^-/</span>, <span class="string">''</span>)</span><br><span class="line"><span class="built_in">console</span>.log(dasherize(<span class="string">'mozTransform'</span>));</span><br></pre></td></tr></table></figure><h3 id="检测-html-成对标签匹配"><a href="#检测-html-成对标签匹配" class="headerlink" title="检测 html 成对标签匹配"></a>检测 html 成对标签匹配</h3><p>匹配一个开标签，可以使用正则 <code>&lt;[^&gt;]+&gt;</code>，</p><p>匹配一个闭标签，可以使用 <code>&lt;\/[^&gt;]+&gt;</code></p><p><strong>[^&gt;]:</strong> 表示 非<code>&gt;</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/&lt;([^&gt;]+)&gt;[\d\D]*&lt;\/\1&gt;/</span></span><br></pre></td></tr></table></figure><ul><li>其中开标签 &lt;[\^&gt;]+&gt; 改成 &lt;([^&gt;]+)&gt;，使用括号的目的是为了后面使用反向引用， 而提供分组。闭标签使用了反向引用，&lt;\/\1&gt;</li><li>另外，[\d\D]的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式括号的作用&quot;&gt;&lt;a href=&quot;#正则表达式括号的作用&quot; class=&quot;headerlink&quot; title=&quot;正则表达式括号的作用&quot;&gt;&lt;/a&gt;正则表达式括号的作用&lt;/h1&gt;&lt;h2 id=&quot;分组和分支结构&quot;&gt;&lt;a href=&quot;#分组和分支结构&quot; class
      
    
    </summary>
    
      <category term="正则" scheme="https://zhaozhoa.github.com/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="https://zhaozhoa.github.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://zhaozhoa.github.com/2019/12/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zhaozhoa.github.com/2019/12/23/设计模式之单例模式/</id>
    <published>2019-12-23T11:57:44.000Z</published>
    <updated>2019-12-26T10:06:59.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><blockquote><p>单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote><h2 id="实现一个单例模式"><a href="#实现一个单例模式" class="headerlink" title="实现一个单例模式"></a>实现一个单例模式</h2><p>要实现一个标准的单例模式并不复杂，无非是用一个变量来标志当前是否已经为某个类创建<br>过对象，如果是，则在下一次获取该类的实例时，直接返回之前创建的对象。代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> getInstance(name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">      <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = Singleton.getInstance(<span class="string">'zhao1'</span>)</span><br><span class="line"><span class="keyword">let</span> b = Singleton.getInstance(<span class="string">'zhao2'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a === b);</span><br><span class="line">a.getName() <span class="comment">// zhao1</span></span><br><span class="line">b.getName() <span class="comment">// zhao1</span></span><br></pre></td></tr></table></figure><p>因为 创建a 的 实例对象时 this.instance 保存了创建的实例对象，在创建b 实例对象时 直接返回了 a  的实例对象</p><p><code>我们通过 Singleton.getInstance 来获取 Singleton 类的唯一对象，这种方式相对简单，但有一个问题，就是增加了这个类的“不透明性”，Singleton 类的使用者必须知道这是一个单例类， 跟以往通过 new XXX的方式来获取对象不同，这里偏要使用 Singleton.getInstance 来获取对象。</code></p><h2 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> CreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> instance</span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">CreateDiv</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(html) &#123;</span><br><span class="line">          <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.html = html;</span><br><span class="line">          <span class="keyword">this</span>.init();</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        init() &#123;</span><br><span class="line">          <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">          div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">          <span class="built_in">document</span>.body.append(div);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> CreateDiv</span><br><span class="line">    &#125;)()</span><br><span class="line"><span class="comment">// 可以用 new 直接创建实例对象，</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">new</span> CreateDiv(<span class="string">'sven1'</span>);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">new</span> CreateDiv(<span class="string">'sven2'</span>);</span><br><span class="line">    alert(a === b) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>为了把 instance 封装起来，我们使用了自执行的匿名函数和闭包，并且让这个匿名函数返回真正的 Singleton 构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服</p><h2 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> CreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">CreateDiv</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(html) &#123;</span><br><span class="line">          <span class="keyword">this</span>.html = html;</span><br><span class="line">          <span class="keyword">this</span>.init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        init() &#123;</span><br><span class="line">          <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">          div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">          <span class="built_in">document</span>.body.append(div);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> CreateDiv</span><br><span class="line">    &#125;)()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> proxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> instance</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">          instance = <span class="keyword">new</span> CreateDiv(html)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)()</span><br><span class="line">    <span class="comment">// 使用代理模式的单例模式创建实例</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">new</span> proxySingletonCreateDiv(<span class="string">'sven1'</span>);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="keyword">new</span> proxySingletonCreateDiv(<span class="string">'sven2'</span>);</span><br><span class="line"><span class="comment">// 普通的创建实例</span></span><br><span class="line">    <span class="keyword">let</span> c = <span class="keyword">new</span> CreateDiv(<span class="string">'zhao'</span>)</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> CreateDiv(<span class="string">'zhang'</span>)</span><br><span class="line">    alert(a === b) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过引入代理类的方式，我们同样完成了一个单例模式的编写，跟之前不同的是，现在我们把负责管理单例的逻辑移到了代理类 proxySingletonCreateDiv 中。这样一来，CreateDiv 就变成了 一个普通的类，它跟 proxySingletonCreateDiv 组合起来可以达到单例模式的效果</p><h2 id="JavaScript中的单例模式"><a href="#JavaScript中的单例模式" class="headerlink" title="JavaScript中的单例模式"></a>JavaScript中的单例模式</h2><p>在 JavaScript 中创建对象的方法非常简单，既然我们只需要一个“唯一”的对象，为什 么要为它先创建一个“类”呢？这无异于穿棉衣洗澡，传统的单例模式实现在 JavaScript 中并 不适用。</p><p><code>单例模式的核心是确保只有一个实例，并提供全局访问</code></p><p>全局变量不是单例模式，但在 JavaScript开发中，我们经常会把全局变量当成单例来使用。<br>例如： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>当用这种方式创建对象 a时，对象 a确实是独一无二的。如果 a变量被声明在全局作用域下，<br>则我们可以在代码中的任何位置使用这个变量，全局变量提供给全局访问是理所当然的。这样就 满足了单例模式的两个条件</p><h3 id="降低全局变量的污染"><a href="#降低全局变量的污染" class="headerlink" title="降低全局变量的污染"></a>降低全局变量的污染</h3><p>作为普通的开发者，我们有必要尽量减少全局变量的使用，即使需要，也要把它的污染降到最低。以下几种方式可以相对降低全局变量带来的命名污染</p><h4 id="使用命名空间"><a href="#使用命名空间" class="headerlink" title="使用命名空间"></a>使用命名空间</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> namespace1 = &#123; </span><br><span class="line">  a()&#123; </span><br><span class="line">    alert (<span class="number">1</span>);</span><br><span class="line">&#125;,</span><br><span class="line">b()&#123; </span><br><span class="line">    alert (<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>把 a和 b都定义为 namespace1 的属性，这样可以减少变量和全局作用域打交道的机会</p><h4 id="使用闭包封装私有变量"><a href="#使用闭包封装私有变量" class="headerlink" title="使用闭包封装私有变量"></a>使用闭包封装私有变量</h4><p>这种方法把一些变量封装在闭包的内部，只暴露一些接口跟外界通信</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _name = <span class="string">'zhao'</span>,</span><br><span class="line">  _age = <span class="number">21</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getinfo() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;_name&#125;</span>+<span class="subst">$&#123;_age&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.getinfo());</span><br></pre></td></tr></table></figure><p>我们用下划线来约定私有变量<strong>name 和</strong>age，它们被封装在闭包产生的作用域中，外部是访问不到这两</p><h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>惰性单例指的是在需要的时候才创建对象实例</p><p>如点击登陆按钮，显示登陆弹窗，</p><p><strong>方法一：</strong>页面加载的时候就创建dom节点，然后隐藏，直到点击登陆时显示</p><p>因为登录浮窗总是一开始就被创建好，那么很有可能将白白浪费一些DOM节点</p><p><strong>方法二：</strong>点击登陆时动态创建节点，并用一个变量保存是否已经创建过登陆浮窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"loginBtn"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div; </span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!div) &#123;</span></span><br><span class="line"><span class="javascript">        div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>); </span></span><br><span class="line"><span class="javascript">        div.innerHTML = <span class="string">'我是登录浮窗'</span>; </span></span><br><span class="line"><span class="javascript">        div.style.display = <span class="string">'none'</span>; </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(div);</span></span><br><span class="line"><span class="undefined">      &#125; </span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> div;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> loginLayer = createLoginLayer(); </span></span><br><span class="line"><span class="javascript">    loginLayer.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们把创建实例对象的职责和管理单例的职责分别放置在两个方法里，这两<br>个方法可以独立变化而互不影响，当它们连接在一起的时候，就完成了创建唯一实例对象的功能， 看起来是一件挺奇妙的事情</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;h2 id=&quot;什么是单例模式&quot;&gt;&lt;a href=&quot;#什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhaozhoa.github.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhaozhoa.github.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则二 匹配位置</title>
    <link href="https://zhaozhoa.github.com/2019/12/20/%E6%AD%A3%E5%88%99%E4%BA%8C/"/>
    <id>https://zhaozhoa.github.com/2019/12/20/正则二/</id>
    <published>2019-12-20T08:35:11.000Z</published>
    <updated>2019-12-23T11:15:43.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则二"><a href="#正则二" class="headerlink" title="正则二"></a>正则二</h1><h2 id="和"><a href="#和" class="headerlink" title="^ 和 $"></a>^ 和 $</h2><p><code>^</code>（脱字符）匹配开头，在多行匹配中匹配行开头。</p><p><code>$</code>（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="string">"hello"</span>.replace(<span class="regexp">/^|$/g</span>, <span class="string">'#'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// =&gt; "#hello#"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行匹配</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">"I\nlove\njavascript"</span>.replace(<span class="regexp">/^|$/gm</span>, <span class="string">'#'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#I#</span></span><br><span class="line"><span class="comment">#love#</span></span><br><span class="line"><span class="comment">#javascript#</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>多行匹配模式（即有修饰符 m）时</p><h2 id="b-和-B"><a href="#b-和-B" class="headerlink" title="\b 和 \B"></a>\b 和 \B</h2><p><code>\b</code> 是单词边界，具体就是 \w 与 \W 之间的位置，也包括 \w 与 ^ 之间的位置，和 \w 与 $ 之间的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"[JS] Lesson_01.mp4"</span>.replace(<span class="regexp">/\b/g</span>, <span class="string">'#'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">// [#JS#] #Lesson_01#.#mp4#</span></span><br></pre></td></tr></table></figure><p><code>\B</code> B 就是 \b 的反面的意思，非单词边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"[JS] Lesson_01.mp4"</span>.replace(<span class="regexp">/\B/g</span>, <span class="string">'#'</span>); <span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// =&gt; "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span></span><br></pre></td></tr></table></figure><h2 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h2><ul><li>环视只进行子表达式的匹配，不占有字符，匹配到的内容不保存到最终的匹配结果，是零宽度的。环视匹配的最终结果就是一个位置。</li><li>环视的作用相当于对所在位置加了一个附加条件，只有满足这个条件，环视子表达式才能匹配成功</li><li>环视按照方向划分有顺序和逆序两种，按照是否匹配有肯定和否定两种，组合起来就有四种环视。<ul><li>顺序环视相当于在当前位置右侧附加一个条件，</li><li>而逆序环视相当于在当前位置左侧附加一个条件。</li></ul></li></ul><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>(?&lt;=Expression)</td><td>逆序肯定环视，表示所在位置左侧能够匹配<em>Expression</em></td></tr><tr><td>(?&lt;!Expression)</td><td>逆序否定环视，表示所在位置左侧不能匹配<em>Expression</em></td></tr><tr><td>(?=Expression)</td><td>顺序肯定环视，表示所在位置右侧能够匹配<em>Expression</em></td></tr><tr><td>(?!Expression)</td><td>顺序否定环视，表示所在位置右侧不能匹配<em>Expression</em></td></tr></tbody></table><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><h3 id="Expression"><a href="#Expression" class="headerlink" title="(?=Expression)"></a>(?=Expression)</h3><p>Expression 是一个子模式，即 Expression 前面的位置，或者说，<code>该位置后面的字符要匹配 p</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> str = <span class="string">'hello'</span></span><br><span class="line"> <span class="keyword">let</span> str2 = <span class="string">'helo'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(?=ll)/g</span>, <span class="string">'$'</span>)); <span class="comment">// he$llo</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="regexp">/(?=ll)/g</span>, <span class="string">'$'</span>)); <span class="comment">// helo</span></span><br></pre></td></tr></table></figure><h3 id="Expression-1"><a href="#Expression-1" class="headerlink" title="(?!Expression)"></a>(?!Expression)</h3><p>匹配 (?=Expression) 没有匹配的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(?=ll)/g</span>, <span class="string">'$'</span>)); <span class="comment">// he$llo</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(?!ll)/g</span>, <span class="string">'$'</span>)); <span class="comment">// $h$el$l$o$</span></span><br></pre></td></tr></table></figure><p><strong>逆序环视同理</strong></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="数字的千位分隔符表示法"><a href="#数字的千位分隔符表示法" class="headerlink" title="数字的千位分隔符表示法"></a>数字的千位分隔符表示法</h3><blockquote><p>比如把 “12345678”，变成 “12,345,678”。</p></blockquote><ol><li>弄出最后一个逗号</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'12345678'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(?=\d&#123;3&#125;$)/g</span>, <span class="string">','</span>)); <span class="comment">//12345,678</span></span><br></pre></td></tr></table></figure><p><code>(?=\d{3}$) 匹配 \d{3}$ 前面的位置。而 \d{3}$ 匹配的是目标字符串最后那 3 位数字。</code></p><ol start="2"><li>弄出所有的逗号</li></ol><p><code>因为逗号出现的位置，要求后面 3 个数字一组，也就是 \d{3} 至少出现一次。 此时可以使用量词 +</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'12345678'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>)); <span class="comment">// 12,345,678</span></span><br></pre></td></tr></table></figure><p>多次​测试​发现:warning:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = <span class="string">'123456789'</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="regexp">/(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>)); <span class="comment">// ,123,456,789</span></span><br></pre></td></tr></table></figure><ol start="3"><li>解决开头会被替换成 <code>，</code></li></ol><p>我们知道匹配开头可以使用 ^，但要求这个位置不是开头怎么办</p><p>用(?!^)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str2 = <span class="string">'123456789'</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.replace(<span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>)); <span class="comment">// 123,456,789</span></span><br></pre></td></tr></table></figure><h3 id="密码校验"><a href="#密码校验" class="headerlink" title="密码校验"></a>密码校验</h3><blockquote><p>密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。</p></blockquote><ol><li>只匹配6-12为字符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^[0-9a-zA-Z]&#123;6,12&#125;$/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>必须包含数字</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/(?=.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong> (?=.*[0-9])^</p><ul><li>表示开头前面还有个位置（当然也是开头，即同一个位置）</li><li>(?=.*[0-9]) 表示该位置后面的字符匹配 .*[0-9]，即，有任何多个任意字符，后面再跟个数字。</li><li>翻译成大白话，就是接下来的字符，必须包含个数字。</li></ul><ol start="3"><li>多种匹配</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg  = <span class="regexp">/((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9a-zA-Z]&#123;6,12&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'1234a'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'123456'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'12345a'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>解法二：</strong></p><p>至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写 字母。</p><ol><li>不能全是数字</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>三种都不能</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$/</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则二&quot;&gt;&lt;a href=&quot;#正则二&quot; class=&quot;headerlink&quot; title=&quot;正则二&quot;&gt;&lt;/a&gt;正则二&lt;/h1&gt;&lt;h2 id=&quot;和&quot;&gt;&lt;a href=&quot;#和&quot; class=&quot;headerlink&quot; title=&quot;^ 和 $&quot;&gt;&lt;/a&gt;^ 和 $&lt;/h
      
    
    </summary>
    
      <category term="正则" scheme="https://zhaozhoa.github.com/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="https://zhaozhoa.github.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>正则一 基础</title>
    <link href="https://zhaozhoa.github.com/2019/12/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80/"/>
    <id>https://zhaozhoa.github.com/2019/12/19/正则表达式一/</id>
    <published>2019-12-19T12:49:41.000Z</published>
    <updated>2019-12-25T07:55:12.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式一"><a href="#正则表达式一" class="headerlink" title="正则表达式一"></a>正则表达式一</h1><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p><code>正则表达式是匹配模式，要么匹配字符，要么匹配位置</code></p><h2 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h2><h3 id="横向模糊匹配"><a href="#横向模糊匹配" class="headerlink" title="横向模糊匹配"></a>横向模糊匹配</h3><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的</p><p><em>其实现的方式是使用量词。譬如 {m,n}，表示连续出现最少 m 次，最多 n 次</em></p><h3 id="纵向模糊匹配"><a href="#纵向模糊匹配" class="headerlink" title="纵向模糊匹配"></a>纵向模糊匹配</h3><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种 可能。</p><p><em>其实现的方式是使用字符组。譬如 [abc]，表示该字符是可以字符 “a”、”b”、”c” 中的任何一个</em></p><p><em>[^abc]，表示是一个除 “a”、”b”、”c”之外的任意一个字 符。字符组的第一位放 ^（脱字符），表示求反的概念。</em></p><h2 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h2><p>需要强调的是，虽叫字符组（字符类），但只是其中一个字符</p><p>eg:</p><p> [abc]表示该字符是可以字符 “a”、”b”、”c” 中的任何一个</p><h3 id="范围表示法"><a href="#范围表示法" class="headerlink" title="范围表示法"></a>范围表示法</h3><p><code>[1-9]</code>: 匹配1 到 9 中的某一个数字</p><p><code>[a-z]</code>: 匹配 a 到 z 中的某一个字母</p><p><code>[A-Z]</code>: 匹配 A 到 Z 中的某一个字母</p><p>因为连字符有特殊用途，要匹配 “a”、”-“、”z” 这三者中任意一个字符可以使用 <code>[-az]或[az-]或[a\-z]</code></p><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><table><thead><tr><th style="text-align:center">字符组</th><th style="text-align:left">具体含义</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:left">[0-9]。表示是一位数字。 记忆方式：其英文是 digit（数字）</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:left">表示 [^0-9]。表示除数字外的任意字符。</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:left">表示 [0-9a-zA-Z_]。表示数字、大小写字母和下划线。 记忆方式：w 是 word 的简写，也称单词字符</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:left">表示 [^0-9a-zA-Z_]。非单词字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">表示 [ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页 符。 记忆方式：s 是 space 的首字母，空白符的单词是 white space。</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:left">表示 [^ \t\v\n\r\f]。 非空白符</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">表示 [^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符 除外。 记忆方式：想想省略号 … 中的每个点，都可以理解成占位符，表示任何类似的东</td></tr></tbody></table><p>如果要匹配任意字符怎么办？可以使用 [\d\D]、[\w\W]、[\s\S] 和 [^] 中任何的一个。</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><table><thead><tr><th>量词</th><th>具体含义</th></tr></thead><tbody><tr><td>{m,}</td><td>表示至少出现 m 次。</td></tr><tr><td>{m}</td><td>等价于 {m,m}，表示出现 m 次。</td></tr><tr><td>?</td><td>等价于 {0,1}，表示出现或者不出现。 记忆方式：问号的意思表示，有吗？</td></tr><tr><td>+</td><td>等价于 {1,}，表示出现至少一次。 记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</td></tr><tr><td>*</td><td>等价于 {0,}，表示出现任意次，有可能不出现。 记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</td></tr></tbody></table><h2 id="贪婪匹配和懒惰匹配"><a href="#贪婪匹配和懒惰匹配" class="headerlink" title="贪婪匹配和懒惰匹配"></a>贪婪匹配和懒惰匹配</h2><p><code>通过在量词后面加个问号就能实现懒惰匹配</code></p><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>/\d{2,5}/，表示数字连续出现 2 到 5 次。会匹配 2 位、3 位、4 位、5 位连续数字，只要在能力范围内，越多越好</p><h3 id="懒惰匹配"><a href="#懒惰匹配" class="headerlink" title="懒惰匹配"></a>懒惰匹配</h3><p>/\d{2,5}?/ 表示，虽然 2 到 5 次都行，当 2 个就够的时候，就不再往下尝试了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">'123 1234 12345 1'</span></span><br><span class="line"><span class="comment">// 贪婪匹配</span></span><br><span class="line"><span class="built_in">console</span>.log(string.match(<span class="regexp">/\d+/g</span>)); <span class="comment">// [ '123', '1234', '12345', '1' ]</span></span><br><span class="line"><span class="comment">// 懒惰匹配</span></span><br><span class="line"><span class="built_in">console</span>.log(string.match(<span class="regexp">/\d&#123;2,5&#125;?/g</span>)); <span class="comment">// [ '12', '12', '34', '12', '34' ]</span></span><br></pre></td></tr></table></figure><h2 id="多选分支"><a href="#多选分支" class="headerlink" title="多选分支"></a>多选分支</h2><p><code>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一</code></p><p>具体形式如下：(p1|p2|p3)，其中 p1、p2 和 p3 是子模式，用 |（管道符）分隔，表示其中任何之一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/good|nice/g</span>; </span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"good idea, nice try."</span>;</span><br><span class="line"><span class="built_in">console</span>.log( string.match(regex) ); <span class="comment">// =&gt; ["good", "nice"]</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 分支结构是懒惰匹配，当前面匹配上了，后面将不会匹配</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="匹配-16-进制的颜色"><a href="#匹配-16-进制的颜色" class="headerlink" title="匹配 16 进制的颜色"></a>匹配 16 进制的颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/#([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)/g</span></span><br><span class="line"><span class="keyword">let</span> regex2 = <span class="regexp">/#([a-fA-F0-9]&#123;3&#125;|[a-fA-F0-9]&#123;6&#125;)/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">"#ffbbad #Fc01DF #FFF #ffE fff #ffz #ffff"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex)); <span class="comment">// [ '#ffbbad', '#Fc01DF', '#FFF', '#ffE', '#fff' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex2)); <span class="comment">// [ '#ffb', '#Fc0', '#FFF', '#ffE', '#fff' ]</span></span><br></pre></td></tr></table></figure><blockquote><p>用 regex2 匹配时 由于多选分支是 懒惰匹配 所以返回只返回了匹配到的三位</p></blockquote><h3 id="匹配时间"><a href="#匹配时间" class="headerlink" title="匹配时间"></a>匹配时间</h3><p>匹配格式为：</p><blockquote><p>24: 30</p><p>05: 59</p><p>7:09</p><p>7:9</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(0?[0-9]|[1][0-9]|2[0-3]):(0?[0-9]|[1-5][0-9])$/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'23:59'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'05:30'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'5:30'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'5:3'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'24:30'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="匹配日期"><a href="#匹配日期" class="headerlink" title="匹配日期"></a>匹配日期</h3><p>日期格式为</p><blockquote><p>yyyy-mm-dd</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/^\d&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(<span class="string">'2012-02-01'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(regex.test(<span class="string">'2012-21-01'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="匹配id"><a href="#匹配id" class="headerlink" title="匹配id"></a>匹配id</h3><p>从</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提取出 id=”container”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">'&lt;div id="container" class="main"&gt;&lt;/div&gt;'</span></span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/id=".*"/</span></span><br><span class="line"><span class="keyword">let</span> regex2 = <span class="regexp">/id=".*?"/</span></span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex)[<span class="number">0</span>]); <span class="comment">// id="container" class="main"</span></span><br><span class="line"><span class="built_in">console</span>.log(string.match(regex2)[<span class="number">0</span>]); <span class="comment">// id="container"</span></span><br></pre></td></tr></table></figure><blockquote><p>因为 . 是通配符，本身就匹配双引号的，而量词 * 又是贪婪的，当遇到 container 后面双引号时，是不会 停下来，会一直继续匹配</p><p>所以此处应该使用 <code>懒惰模式</code> 进行匹配</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式一&quot;&gt;&lt;a href=&quot;#正则表达式一&quot; class=&quot;headerlink&quot; title=&quot;正则表达式一&quot;&gt;&lt;/a&gt;正则表达式一&lt;/h1&gt;&lt;h2 id=&quot;什么是正则表达式&quot;&gt;&lt;a href=&quot;#什么是正则表达式&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="正则" scheme="https://zhaozhoa.github.com/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="https://zhaozhoa.github.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>高阶函数</title>
    <link href="https://zhaozhoa.github.com/2019/12/18/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://zhaozhoa.github.com/2019/12/18/高阶函数/</id>
    <published>2019-12-18T06:19:56.000Z</published>
    <updated>2019-12-19T08:05:12.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h2><p>高阶函数是指至少满足下列条件之一的函数</p><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul><h3 id="函数可以作为参数被传递"><a href="#函数可以作为参数被传递" class="headerlink" title="函数可以作为参数被传递"></a>函数可以作为参数被传递</h3><blockquote><p>把函数当作参数传递，这代表<code>我们可以抽离出一部分容易变化的业务逻辑，把这部分业务逻辑放在函数参数中</code>，这样一来可以分离业务代码中变化与不变的部分。其中一个重要应用场景就 是常见的回调函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getData = <span class="function"><span class="keyword">function</span>(<span class="params">id, callback</span>) </span>&#123;</span><br><span class="line">  $.ajax(<span class="string">'aaa/bbb/ccc?'</span> + id, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 调用回调函数处理业务逻辑</span></span><br><span class="line">    callback &amp;&amp; callback(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 getData 方法，传入回调函数处理逻辑业务</span></span><br><span class="line">getData(<span class="number">123</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.name)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同时数组的 sort，map，some，every 等都是常见的高阶函数</p><h3 id="函数可以作为返回值输出"><a href="#函数可以作为返回值输出" class="headerlink" title="函数可以作为返回值输出"></a>函数可以作为返回值输出</h3><blockquote><p>相比把函数当作参数传递，函数当作返回值输出的应用场景也许更多，也更能体现函数式编<br>程的巧妙。让函数继续返回一个可执行的函数，意味着运算过程是可延续的</p></blockquote><p>在判断一个数据的具体类型的时候可以使用 <code>Object.prototype.toString</code>来判断，数组返回 [object Array]”，字符串返回 “[object String]”，数字返回 ‘[object Number]’，因此可以写出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isString = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object String]'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> isArray = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> isNumber = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Number]'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>高阶函数优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isType = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isArray = isType(<span class="string">'Array'</span>)</span><br><span class="line"><span class="keyword">let</span> isString = isType(<span class="string">'String'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isArray([])); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isString(<span class="string">'aa'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="高阶函数的应用"><a href="#高阶函数的应用" class="headerlink" title="高阶函数的应用"></a>高阶函数的应用</h2><h3 id="柯里化（currying）"><a href="#柯里化（currying）" class="headerlink" title="柯里化（currying）"></a>柯里化（currying）</h3><blockquote><p>currying 又称部分求值。一个 currying的函数首先会接受一些参数，接受了这些参数之后，<br>该函数并不会立即求值，而是继续返回另外一个函数，刚才传入的参数在函数形成的闭包中被保 存起来。待到函数被真正需要求值的时候，之前传入的所有参数都会被一次性用于求值</p></blockquote><p>求和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> curring = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 存放传入的数字</span></span><br><span class="line">  <span class="keyword">let</span> args = []</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">...parse</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有传入参数则返回求和函数 fn 的调用</span></span><br><span class="line">    <span class="keyword">if</span> (parse.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// args 里面追加传入的数字</span></span><br><span class="line">      [].push.apply(args, parse)</span><br><span class="line">      <span class="comment">// 返回 inner 方法，方便连续调用</span></span><br><span class="line">      <span class="keyword">return</span> inner</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求和函数</span></span><br><span class="line"><span class="keyword">let</span> cost = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> money = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, l = params.length; i &lt; l; i++) &#123;</span><br><span class="line">      money += params[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = curring(cost)</span><br><span class="line">res(<span class="number">100</span>)(<span class="number">200</span>)(<span class="number">300</span>)</span><br><span class="line">res(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">console</span>.log(res()); <span class="comment">// 620</span></span><br></pre></td></tr></table></figure><h3 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _self = fn,</span><br><span class="line">    timer,</span><br><span class="line">    firstTime = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>,</span><br><span class="line">      _me = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123;</span><br><span class="line">      _self.apply(_me, args)</span><br><span class="line">      <span class="keyword">return</span> firstTime = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">      _self.apply(_me, args)</span><br><span class="line">    &#125;, interval || <span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高阶函数&quot;&gt;&lt;a href=&quot;#高阶函数&quot; class=&quot;headerlink&quot; title=&quot;高阶函数&quot;&gt;&lt;/a&gt;高阶函数&lt;/h1&gt;&lt;h2 id=&quot;什么是高阶函数&quot;&gt;&lt;a href=&quot;#什么是高阶函数&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端基础" scheme="https://zhaozhoa.github.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>实现一个bind方法</title>
    <link href="https://zhaozhoa.github.com/2019/12/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAbind%E6%96%B9%E6%B3%95/"/>
    <id>https://zhaozhoa.github.com/2019/12/17/实现一个bind方法/</id>
    <published>2019-12-17T09:18:11.000Z</published>
    <updated>2019-12-18T01:17:52.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="借用构造函数实现一个-bind方法"><a href="#借用构造函数实现一个-bind方法" class="headerlink" title="借用构造函数实现一个 bind方法"></a>借用构造函数实现一个 bind方法</h1><h2 id="bind-方法的作用"><a href="#bind-方法的作用" class="headerlink" title="bind 方法的作用"></a>bind 方法的作用</h2><p>返回一个 修改了 this 指向的 函数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.Mybind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1</span></span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="comment">// context: 上下文对象(obj对象)</span></span><br><span class="line">  context = [].shift.call(<span class="built_in">arguments</span>), </span><br><span class="line">  <span class="comment">// args: Mybind 传入的参数(1, 2)</span></span><br><span class="line">  args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'sven'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.name);</span><br><span class="line">  alert([a, b, c, d])</span><br><span class="line">&#125;.Mybind(obj, <span class="number">1</span>, <span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">func(<span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ol><li><p>再使用 Mybind 方法的时候，this 指的是当前使用 Mybind 的函数对象， 此处相当于复制了一份函数对象</p></li><li><p>借用构造函数</p><ul><li><p>Array.shift() 如果不传入参数，默认移除并返回第一个元素,因为 arguments 是一个类数组，没有shift方法，所以用 call 借用了Array的shift方法</p></li><li><p>Array.slice (start，end) 返回的是一个截取后的数组，如果不传参数则返回整个数组</p><p>这里同样借用了 Array的slice方法，将一个类数组转换成数组</p></li></ul></li><li><p>返回值是一个函数</p></li><li><p>这个函数返回了一个使用 Mybind 的那个函数(func 的复制)的调用，并修改了 this 为传入的上下问对象(obj)</p></li></ol><h2 id="es6-重写-bind-方法"><a href="#es6-重写-bind-方法" class="headerlink" title="es6 重写 bind 方法"></a>es6 重写 bind 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.Mybind = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>,</span><br><span class="line">    context = arg.shift()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">'sven'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> func2 = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = func2.Mybind(obj2, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">res()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;借用构造函数实现一个-bind方法&quot;&gt;&lt;a href=&quot;#借用构造函数实现一个-bind方法&quot; class=&quot;headerlink&quot; title=&quot;借用构造函数实现一个 bind方法&quot;&gt;&lt;/a&gt;借用构造函数实现一个 bind方法&lt;/h1&gt;&lt;h2 id=&quot;bind-
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端基础" scheme="https://zhaozhoa.github.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>秦始皇帝陵博物院项目总结</title>
    <link href="https://zhaozhoa.github.com/2019/10/26/%E5%85%B5%E9%A9%AC%E4%BF%91%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://zhaozhoa.github.com/2019/10/26/兵马俑项目总结/</id>
    <published>2019-10-26T05:39:01.000Z</published>
    <updated>2019-10-28T07:20:21.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="秦始皇帝陵博物院项目总结"><a href="#秦始皇帝陵博物院项目总结" class="headerlink" title="秦始皇帝陵博物院项目总结"></a>秦始皇帝陵博物院项目总结</h1><p>这周秦始皇帝陵博物院项目已经进入尾声，所以今天抽空将自己在这个项目中的感悟与收获进行自我总结</p><ul><li>项目开发总结<ul><li>项目整体设计与搭建</li><li>技术难点及克服方法</li></ul></li><li>团队合作感悟<ul><li>交流</li><li>互助</li><li>合作</li></ul></li><li>在项目中的失误、不足及改进方法<ul><li>没有意识到原型图的重要</li><li>对项目的难度以及开发时间估计有偏差</li><li>与团队成员沟通不足</li><li>过于依赖外部而忽略了自己的能力</li></ul></li></ul><h2 id="项目开发总结"><a href="#项目开发总结" class="headerlink" title="项目开发总结"></a>项目开发总结</h2><h3 id="项目整体设计与搭建"><a href="#项目整体设计与搭建" class="headerlink" title="项目整体设计与搭建"></a>项目整体设计与搭建</h3><p><strong>项目设计</strong></p><p>​        作为一个前端工程师，要开发一个项目，首先要了解这个<code>项目是干什么的，要知道这个项目有那些部分，每一部分有那些功能</code>，一定要在了解完这些后在动手开发这个项目。</p><p>​        作为一个脱离了脚手架与各种组件，只能用原生 html 与 js 开发的项目，我遇到的第一个问题就是如何去设计这个项目，需要在项目文件下建立那些文件夹、每个文件夹下面应该存放什么内容、如果后续需要添加新的东西应该存放在什么地方、如何保证项目文件目录结构清晰，方便自己的开发和维护，这些都需要一个开发者自顶向下的思考。</p><p>​        通过对整个项目的分析，以及和同事的分析后得出的项目设计方法就是先对项目按照大模块划分，在对模块按照文件类型进行划分。按照这个思路，我将整个秦始皇帝陵博物院项目分成了 公共模块，政务模块，采购平台模块，以及入口模块，以及公共资源common 模块，又将每个模块划分成 页面文件，图片文件，css 文件，js 文件 ，以及这个模块公用的文件。就这样对项目进行拆分，完成了项目结构的搭建。</p><h3 id="技术难点及克服方法"><a href="#技术难点及克服方法" class="headerlink" title="技术难点及克服方法"></a>技术难点及克服方法</h3><h4 id="网页适配问题"><a href="#网页适配问题" class="headerlink" title="网页适配问题"></a>网页适配问题</h4><h4 id="资源共用问题"><a href="#资源共用问题" class="headerlink" title="资源共用问题"></a>资源共用问题</h4><h4 id="插件使用问题"><a href="#插件使用问题" class="headerlink" title="插件使用问题"></a>插件使用问题</h4><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><h2 id="团队合作感悟"><a href="#团队合作感悟" class="headerlink" title="团队合作感悟"></a>团队合作感悟</h2><h3 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h3><h3 id="互助"><a href="#互助" class="headerlink" title="互助"></a>互助</h3><h3 id="合作"><a href="#合作" class="headerlink" title="合作"></a>合作</h3><h2 id="在项目中的失误、不足及改进方法"><a href="#在项目中的失误、不足及改进方法" class="headerlink" title="在项目中的失误、不足及改进方法"></a>在项目中的失误、不足及改进方法</h2><h4 id="没有将静态图片资源和动态图片资源分离"><a href="#没有将静态图片资源和动态图片资源分离" class="headerlink" title="没有将静态图片资源和动态图片资源分离"></a>没有将静态图片资源和动态图片资源分离</h4><h4 id="没有建立一个公用的js-文件来封装公共方法"><a href="#没有建立一个公用的js-文件来封装公共方法" class="headerlink" title="没有建立一个公用的js 文件来封装公共方法"></a>没有建立一个公用的js 文件来封装公共方法</h4><h3 id="没有意识到原型图的重要"><a href="#没有意识到原型图的重要" class="headerlink" title="没有意识到原型图的重要"></a>没有意识到原型图的重要</h3><h3 id="对项目的难度以及开发时间估计有偏差"><a href="#对项目的难度以及开发时间估计有偏差" class="headerlink" title="对项目的难度以及开发时间估计有偏差"></a>对项目的难度以及开发时间估计有偏差</h3><h3 id="与团队成员沟通不足"><a href="#与团队成员沟通不足" class="headerlink" title="与团队成员沟通不足"></a>与团队成员沟通不足</h3><h3 id="过于依赖外部而忽略了自己的能力"><a href="#过于依赖外部而忽略了自己的能力" class="headerlink" title="过于依赖外部而忽略了自己的能力"></a>过于依赖外部而忽略了自己的能力</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;秦始皇帝陵博物院项目总结&quot;&gt;&lt;a href=&quot;#秦始皇帝陵博物院项目总结&quot; class=&quot;headerlink&quot; title=&quot;秦始皇帝陵博物院项目总结&quot;&gt;&lt;/a&gt;秦始皇帝陵博物院项目总结&lt;/h1&gt;&lt;p&gt;这周秦始皇帝陵博物院项目已经进入尾声，所以今天抽空将自己在这
      
    
    </summary>
    
      <category term="项目总结" scheme="https://zhaozhoa.github.com/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="项目" scheme="https://zhaozhoa.github.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>git踩坑</title>
    <link href="https://zhaozhoa.github.com/2019/10/11/git%E8%B8%A9%E5%9D%91/"/>
    <id>https://zhaozhoa.github.com/2019/10/11/git踩坑/</id>
    <published>2019-10-11T03:36:16.000Z</published>
    <updated>2019-10-31T00:52:51.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-删除分支问题"><a href="#git-删除分支问题" class="headerlink" title="git 删除分支问题"></a>git 删除分支问题</h1><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><ul><li><p>普通删除（不能删除没有合并的分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --delete &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li><li><p>强制删除（可以删除没有合并分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D &lt;分支名&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push orinin --delete &lt;分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="解决本地分支和远程分支不同步问题"><a href="#解决本地分支和远程分支不同步问题" class="headerlink" title="解决本地分支和远程分支不同步问题"></a>解决本地分支和远程分支不同步问题</h2><blockquote><p>远程分支已经删除，但是在本地依然显示</p></blockquote><h3 id="查看本地所有分支"><a href="#查看本地所有分支" class="headerlink" title="查看本地所有分支"></a>查看本地所有分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><p>显示结果中白色是为本地分支，红色为远程分支</p><p>查看远程分支和本地分支的对应关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><p>在对应关系中有的后面会显示 <code>(use ‘git remote prune’ to remove)</code>说明此分支远程已经移除 ，而本地依然存在</p><p><strong>将本地分支和远程分支同步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-删除分支问题&quot;&gt;&lt;a href=&quot;#git-删除分支问题&quot; class=&quot;headerlink&quot; title=&quot;git 删除分支问题&quot;&gt;&lt;/a&gt;git 删除分支问题&lt;/h1&gt;&lt;h2 id=&quot;删除命令&quot;&gt;&lt;a href=&quot;#删除命令&quot; class=&quot;head
      
    
    </summary>
    
      <category term="git" scheme="https://zhaozhoa.github.com/categories/git/"/>
    
    
      <category term="git" scheme="https://zhaozhoa.github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>双向数据绑定原理</title>
    <link href="https://zhaozhoa.github.com/2019/09/09/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <id>https://zhaozhoa.github.com/2019/09/09/双向数据绑定原理/</id>
    <published>2019-09-09T07:35:25.000Z</published>
    <updated>2019-09-09T07:36:59.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-中双向数据绑定的原理"><a href="#Vue-中双向数据绑定的原理" class="headerlink" title="Vue 中双向数据绑定的原理"></a>Vue 中双向数据绑定的原理</h1><p>利用 <code>Object.defineProperty()</code> 方法实现双向数据绑定</p><p><code>Object.defineProperty(obj, prop, descriptor)</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象</p><ul><li>obj ：要在其上定义属性的对象。</li><li>prop：要定义或修改的属性的名称</li><li>descriptor：将被定义或修改的属性描述符。<ul><li>descriptor 为一个对象，有两个方法get 和 set</li><li>当 获取 对象上的属性时触发 get方法</li><li>添加对象属性时 触发 set 方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> id=<span class="string">"userName"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"uName"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  let obj = &#123;</span><br><span class="line">    pwd: 123456</span><br><span class="line">  &#125;</span><br><span class="line">  Object.defineProperty(obj, 'userName', &#123;</span><br><span class="line">    get()&#123;</span><br><span class="line">      console.log("get init")</span><br><span class="line">    &#125;,</span><br><span class="line">    // vul 为添加属性的值</span><br><span class="line">    set(val) &#123;</span><br><span class="line">      console.log('set init');</span><br><span class="line">      document.querySelector('#uName').innerHTML = val</span><br><span class="line">      document.querySelector('#userName').value = val</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  document.querySelector('#userName').addEventListener('keyup', (event) =&gt; &#123;</span><br><span class="line">    obj.userName = event.target.value</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>分析 :</strong> 当键盘按下时，修改 obj 对象的 userName 属性， 触发 set 事件</p><p>给 文本框添加innerHtml，实现 <code>页面的改变影响 js 内存的改变</code></p><p>当 浏览器控制台 修改obj.userName 时， 会改变文本框的 innerHTML和 span 的 value ，实现 <code>js 内存属性的改变，影响页面的变化</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-中双向数据绑定的原理&quot;&gt;&lt;a href=&quot;#Vue-中双向数据绑定的原理&quot; class=&quot;headerlink&quot; title=&quot;Vue 中双向数据绑定的原理&quot;&gt;&lt;/a&gt;Vue 中双向数据绑定的原理&lt;/h1&gt;&lt;p&gt;利用 &lt;code&gt;Object.define
      
    
    </summary>
    
      <category term="前端框架" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="https://zhaozhoa.github.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>闭包总结</title>
    <link href="https://zhaozhoa.github.com/2019/09/08/%E9%97%AD%E5%8C%85%E6%80%BB%E7%BB%93/"/>
    <id>https://zhaozhoa.github.com/2019/09/08/闭包总结/</id>
    <published>2019-09-08T12:46:17.000Z</published>
    <updated>2019-12-19T12:13:42.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h2 id="函数的创建和执行过程"><a href="#函数的创建和执行过程" class="headerlink" title="函数的创建和执行过程"></a>函数的创建和执行过程</h2><h3 id="函数的创建"><a href="#函数的创建" class="headerlink" title="函数的创建"></a>函数的创建</h3><ul><li>开辟一个<code>堆内存</code></li><li>把函数体中的代码当作字符串存储进去</li><li>把堆内存的地址赋值给函数名</li><li>函数在那创建，那么它执行的时候所需要查找的上级作用域就是谁</li></ul><h3 id="函数的执行"><a href="#函数的执行" class="headerlink" title="函数的执行"></a>函数的执行</h3><ul><li>形成一个私有的作用域（执行上下文，私用的<code>栈内存</code>）<ul><li>执行一次，产生一个，互不影响</li></ul></li><li>参数赋值 &amp;  变量提升</li><li>代码执行<ul><li>把堆内存中的字符串代码一行行执行</li></ul></li><li>作用域链查找<ul><li>遇到一个变量，先判断是否为私有变量（函数中声明的变量和形参是私有变量）如果是直接操作，不是向上级作用域查找，直到 window</li></ul></li></ul><p>私有变量和外界的变量没有必然关系，可以理解成被私有的栈内存保护 这就是<strong>闭包的保护级制</strong></p><h2 id="堆栈内存的释放问题"><a href="#堆栈内存的释放问题" class="headerlink" title="堆栈内存的释放问题"></a>堆栈内存的释放问题</h2><blockquote><p>函数执行就会形成栈内存（在内存中分配空间），如果不及时销毁，会导致内存爆满也就是内存泄漏</p></blockquote><h3 id="堆内存的释放"><a href="#堆内存的释放" class="headerlink" title="堆内存的释放"></a>堆内存的释放</h3><p>创建一个引用类型，就会形成一个堆内存，如果当前的堆内存不被引用，就会被浏览器给释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: zhao&#125;</span><br><span class="line"><span class="keyword">let</span> oop = obj</span><br></pre></td></tr></table></figure><p>此时对象被 obj 和 oop  变量引用，所以不能释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = <span class="literal">null</span></span><br><span class="line">oop = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>此时 对象 不被引用，所以就会被释放</p><h3 id="栈内存释放"><a href="#栈内存释放" class="headerlink" title="栈内存释放"></a>栈内存释放</h3><h4 id="栈内存的形成方式"><a href="#栈内存的形成方式" class="headerlink" title="栈内存的形成方式"></a>栈内存的形成方式</h4><ul><li>浏览器形成的全局作用域</li><li>执行时函数形成的私有作用域</li><li>let / const 形成的代码块</li></ul><h4 id="栈内存销毁方式"><a href="#栈内存销毁方式" class="headerlink" title="栈内存销毁方式"></a>栈内存销毁方式</h4><ul><li>全局栈内存<ul><li>关闭页面</li></ul></li><li>函数私有栈内存<ul><li>一般情况函数执行完，浏览器自动清除</li><li>一旦栈内存中的某个东西（一般是堆内存）被私有作用域以外的事物引用，则栈内存不能立即被销毁，私有作用域中的变量等信息得以保存，只有外部引用解除，才能被销毁</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"> <span class="keyword">let</span> f = X() <span class="comment">// 此时 f 引用 X 中返回的函数，所以 X 在执行完不能释放</span></span><br><span class="line"> </span><br><span class="line"> f = <span class="literal">null</span> <span class="comment">//此时才可以</span></span><br></pre></td></tr></table></figure><h2 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h2><blockquote><p>解释一： 函数形成的私用作用域就是闭包</p><p>解释二： 函数中的堆内存被私有作用域以外的变量引用，形成闭包</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n + (++i))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = fn(<span class="number">1</span>)</span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// 4</span></span><br><span class="line">fn(<span class="number">3</span>)(<span class="number">4</span>) <span class="comment">// 8</span></span><br><span class="line">fn(<span class="number">5</span>)(<span class="number">6</span>) <span class="comment">// 12</span></span><br><span class="line">f(<span class="number">7</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(i) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = fn(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>首先在栈内存中执行 fn 函数 返回 里面函数的栈内存地址，并将其赋值给 变量 f ，此时由于 变量 f 引用了栈内存中 fn 返回的 堆内存地址，此时的 fn 执行的 栈内存<code>不销毁，同时变量 i 被保存</code>。私有变量 i 此时是 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>调用 fn 返回的函数并传参 2 ，返回 结果为 2 + (++i) = 4 , 私有变量 i 同时变为 2 ，这时 <code>返回的函数执行完毕，销毁</code>，但是 <code>fn 不销毁,变量 i也不销毁</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>再次执行 fn 则需要重新 开辟一个栈内存，先执行 fn(3)，再执行返回的函数，由于再这个栈内存中，没有什么引用 返回函数的堆地址，所以返回函数执行完后 <code>fn() 和 返回函数都销毁</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="number">5</span>)(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>原理同上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>此时 fn 函数  在栈中没有销毁，则返回的 为 7 + (++i) = 10; 变量 i 变为值 为 3</p><h3 id="经典用法"><a href="#经典用法" class="headerlink" title="经典用法"></a>经典用法</h3><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">      nodes[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        alert(i);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试这段代码就会发现，无论点击哪个 div，最后弹出的结果都是 5。这是因为 div 节点的<br>onclick 事件是被异步触发的，当事件被触发的时候，for 循环早已结束，此时变量 i的值已经是 5，所以在 div 的 onclick事件函数中顺着作用域链从内到外查找变量 i时，查找到的值总是 5。</p></blockquote><p>用闭包封存 i </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    nodes[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><h4 id="一、封装变量"><a href="#一、封装变量" class="headerlink" title="一、封装变量"></a>一、封装变量</h4><h4 id="二、延长局部变量的生命"><a href="#二、延长局部变量的生命" class="headerlink" title="二、延长局部变量的生命"></a>二、延长局部变量的生命</h4><blockquote><p>闭包可以帮助把一些不需要暴露在全局的变量封装成“私有变量”</p></blockquote><p>eg： 累乘方法的优化</p><p>最基本方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, l = args.length; i &lt; l; i++) &#123;</span><br><span class="line">    a = a* args[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure><blockquote><p>对于那些相同的参数来说，每次都进行计算是一种浪费，我们可以加入缓存机制来提高这个函数的性能</p></blockquote><p>缓存优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args2 = args.join(<span class="string">','</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache[args2]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cache[args2]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l =  args.length; i&lt; l; i++) &#123;</span><br><span class="line">    a = a * args[i]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cache[args2] = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)); <span class="comment">// 执行方法获取数据</span></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)); <span class="comment">// 直接在缓存中获取数据</span></span><br></pre></td></tr></table></figure><blockquote><p>我们看到 cache 这个变量仅仅在 mult函数中被使用，与其让 cache变量跟 mult函数一起平行<br>地暴露在全局作用域下，不如把它封闭在 mult 函数内部，这样可以减少页面中的全局变量，以 避免这个变量在其他地方被不小心修改而引发错误</p></blockquote><p>闭包优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args2 = args.join(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> (cache[args2]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args2]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = args.length; i&lt;l; i++) &#123;</span><br><span class="line">      a = a * args[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[args2] = a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure><p>进一步封装</p><blockquote><p>提炼函数是代码重构中的一种常见技巧。如果在一个大函数中有一些代码块能够独立出来，<br>我们常常把这些代码块封装在独立的小函数里面。独立出来的小函数有助于代码复用，如果这些 小函数有一个良好的命名，它们本身也起到了注释的作用。如果这些小函数不需要在程序的其他 地方使用，最好是把它们用闭包封闭起</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mult = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> calculate = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = args.length; i &lt; l; i++) &#123;</span><br><span class="line">      a = a * args[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> args2 = args.join(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[args2]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[args2] = calculate(...args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h1&gt;&lt;h2 id=&quot;函数的创建和执行过程&quot;&gt;&lt;a href=&quot;#函数的创建和执行过程&quot; class=&quot;headerlink&quot; title=&quot;函数的创建
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端基础" scheme="https://zhaozhoa.github.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Mockjs</title>
    <link href="https://zhaozhoa.github.com/2019/09/04/Mockjs/"/>
    <id>https://zhaozhoa.github.com/2019/09/04/Mockjs/</id>
    <published>2019-09-04T10:03:42.000Z</published>
    <updated>2019-10-26T04:49:15.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mockjs"><a href="#Mockjs" class="headerlink" title="Mockjs"></a>Mockjs</h1><p>用于前端自己造加数据的库</p><p><strong>文档</strong>:<a href="https://github.com/nuysoft/Mock/wiki" target="_blank" rel="noopener">https://github.com/nuysoft/Mock/wiki</a></p><h2 id="上车"><a href="#上车" class="headerlink" title="上车"></a>上车</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i Mockjs -D</span><br></pre></td></tr></table></figure><h3 id="vue-中使用"><a href="#vue-中使用" class="headerlink" title="vue 中使用"></a>vue 中使用</h3><ul><li>在 vue的 src 目录下面 新建一个 mock 文件夹，里面新建一个 index.js文件</li><li>在 index.js 文件下面导入 mockjs 包</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">'mockjs'</span></span><br></pre></td></tr></table></figure><ul><li>将 index.js 导入到 main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./mock/'</span></span><br></pre></td></tr></table></figure><h2 id="用-mockjs-模拟-api-拦截-get-和-post-请求"><a href="#用-mockjs-模拟-api-拦截-get-和-post-请求" class="headerlink" title="用 mockjs 模拟 api 拦截 get 和 post 请求"></a>用 mockjs 模拟 api 拦截 get 和 post 请求</h2><blockquote><ul><li>用 Mock.mock() 模拟 api 接口<ul><li>参数一： 接口地址(可以写成正则)，可选参数</li><li>参数二： 请求方式， 可选参数</li><li>参数三： 返回数据或者函数</li></ul></li></ul></blockquote><h4 id="拦截-get-请求"><a href="#拦截-get-请求" class="headerlink" title="拦截 get 请求"></a>拦截 get 请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(<span class="string">'aaa/bbb'</span>, <span class="string">'get'</span>, &#123;</span><br><span class="line">  status: <span class="number">0</span>,</span><br><span class="line">  msg: <span class="string">'ok'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'zhaozhaozhao'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="拦截-post-请求"><a href="#拦截-post-请求" class="headerlink" title="拦截 post 请求"></a>拦截 post 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(<span class="string">'/api/addgoods'</span>, <span class="string">'post'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(options)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    status: <span class="number">0</span>,</span><br><span class="line">    msg: <span class="string">'ok'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>函数的 option 参数为 提交的数据</p><h2 id="用-mockjs-创造假数据"><a href="#用-mockjs-创造假数据" class="headerlink" title="用 mockjs 创造假数据"></a>用 mockjs 创造假数据</h2><p>文档写的很详细，不想重复累赘了</p><p>这部分还是看官网吧，又不难</p><hr><p>本来不想写了，但是由于项目后端的接口跨域问题迟迟解决不了，耽误了我的进度，于是决定自己动手造数据，所以我又回来了😂、</p><h2 id="原生-js-项目中使用mockjs"><a href="#原生-js-项目中使用mockjs" class="headerlink" title="原生 js 项目中使用mockjs"></a>原生 js 项目中使用mockjs</h2><p>在 html 文件中 引入 mockjs 文件 ，</p><p>当后台的接口可以调通只需要删除mockjs 的引用即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是mock.js 文件 </span></span><br><span class="line">&lt;script src=<span class="string">"./../../lib/Mock-refactoring/dist/mock.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 这个文件是自己建立的用来配置mockjs 拦截和返回结果规则的文件</span></span><br><span class="line">&lt;script src=<span class="string">"./../../myMock.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在myMock.js 中写规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Mock.mock(<span class="regexp">/bmy/</span>, <span class="string">'get'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Mock.mock(&#123;</span><br><span class="line">    <span class="string">'page'</span>: &#123;</span><br><span class="line">      showCount: <span class="number">15</span>,</span><br><span class="line">      <span class="string">"totalPage"</span>: <span class="number">100</span>/<span class="number">2</span>,</span><br><span class="line">      <span class="string">"currentPage"</span>: <span class="number">2</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'list|15'</span>: [&#123; <span class="comment">// 返回15条数据</span></span><br><span class="line">      <span class="string">"publishtime"</span>: Mock.Random.date(), <span class="comment">//随机一个fmtDate 格式的日趋</span></span><br><span class="line">      <span class="string">"title"</span>: <span class="string">'@cword(5,10)'</span>, <span class="comment">// 随机5-10 个汉字</span></span><br><span class="line">      <span class="string">"picture"</span>: <span class="string">'@dataImage("200x200")'</span>, <span class="comment">// 随机一张200x200 的base64的图片</span></span><br><span class="line">      <span class="string">"htmlpath"</span>: <span class="string">'@url()'</span> <span class="comment">//随机一个url</span></span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>注意:</code> Mock.random 相当于 @，不过用@需要用<code>&#39;&#39;</code> 包裹起开 </p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"publishtime"</span>: Mock.Random.date()</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="string">"publishtime"</span>: ‘@date()’</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mockjs&quot;&gt;&lt;a href=&quot;#Mockjs&quot; class=&quot;headerlink&quot; title=&quot;Mockjs&quot;&gt;&lt;/a&gt;Mockjs&lt;/h1&gt;&lt;p&gt;用于前端自己造加数据的库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文档&lt;/strong&gt;:&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="mockjs" scheme="https://zhaozhoa.github.com/tags/mockjs/"/>
    
      <category term="vue" scheme="https://zhaozhoa.github.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>初窥Angular</title>
    <link href="https://zhaozhoa.github.com/2019/08/23/Angular/"/>
    <id>https://zhaozhoa.github.com/2019/08/23/Angular/</id>
    <published>2019-08-23T04:00:33.000Z</published>
    <updated>2019-09-04T09:05:07.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular"><a href="#angular" class="headerlink" title="angular"></a>angular</h1><h2 id="上车"><a href="#上车" class="headerlink" title="上车"></a>上车</h2><p>安装 脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @angular/cli</span><br></pre></td></tr></table></figure><p>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new 项目名</span><br></pre></td></tr></table></figure><p>启动</p><p>–open 设置自动启动浏览器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve --open</span><br></pre></td></tr></table></figure><h2 id="生成目录结构分析"><a href="#生成目录结构分析" class="headerlink" title="生成目录结构分析"></a>生成目录结构分析</h2><p><strong>src目录</strong></p><p>src:<br>│  favicon.ico<br>│  index.html<br>│  main.ts<br>│  polyfills.ts<br>│  styles.less<br>│  test.ts<br>│<br>├─app<br>│  │  app-routing.module.ts    // Angular 的路由模块<br>│  │  app.component.html    // Angular 的根html<br>│  │  app.component.less    // Angular 的根less<br>│  │  app.component.spec.ts    // 测试文件<br>│  │  app.component.ts    // 这是 Angular 的根组件模块<br>│  │  app.module.ts    // 这是 Angular 的 跟模块，配置了 Angular 加载什么应用<br>│  │<br>│  └─components    // 自己创建的组件目录<br>│      └─head    // 自己创建的组件<br>│              head.component.html<br>│              head.component.less<br>│              head.component.spec.ts<br>│              head.component.ts<br>│<br>├─assets<br>│      .gitkeep<br>│<br>└─environments<br>        environment.prod.ts<br>        environment.ts</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>在src 目录下面创建一个 components 文件夹 放入 head 组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g component components/head</span><br></pre></td></tr></table></figure><p>使用这个命令会 自动 生成一个 head 组件的文件夹，里面由有四个文件分别是</p><ul><li>head.component.html</li><li>head.component.less</li><li>head.component.spec.ts</li><li>head.component.ts<ul><li>这个文件了面配置了组件名称</li></ul></li></ul><p>同时还会在 app.module.ts 文件中 引入 和 使用 这个组件</p><h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p>在 Angular 的 html 文件中直接用&lt;组件名&gt;&lt;/组件名&gt; 使用组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">style</span> = <span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">  hello Angular</span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-head</span>&gt;</span><span class="tag">&lt;/<span class="name">app-head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="angular-和-vue-指令的对比"><a href="#angular-和-vue-指令的对比" class="headerlink" title="angular 和 vue 指令的对比"></a>angular 和 vue 指令的对比</h3><table><thead><tr><th style="text-align:center">vue</th><th style="text-align:center">angular</th></tr></thead><tbody><tr><td style="text-align:center">v-bind:title=’aaa’</td><td style="text-align:center">[title]=’aaa’</td></tr><tr><td style="text-align:center">v-html=’x’</td><td style="text-align:center">[innerHTML]=’x’</td></tr><tr><td style="text-align:center">v-for=”item in GoodsList”</td><td style="text-align:center">*ngFor=”let item of GoodsList”</td></tr><tr><td style="text-align:center">v-if</td><td style="text-align:center">*ngIf</td></tr><tr><td style="text-align:center">:class = ‘{‘name’: true}’</td><td style="text-align:center">[ngClass] =’{‘name’: true}’</td></tr><tr><td style="text-align:center">@click= ‘fn’</td><td style="text-align:center">(click) = ‘fn()’</td></tr></tbody></table><h3 id="anuglar-的双向数据绑定"><a href="#anuglar-的双向数据绑定" class="headerlink" title="anuglar 的双向数据绑定"></a>anuglar 的双向数据绑定</h3><ul><li>在 app.module.st 文件中引入 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;FormsModule&#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br></pre></td></tr></table></figure><ul><li>然后将其添加到 imports中</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">imports: [  <span class="comment">// 配置当前模块运行依赖的其他模块</span></span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>在使用的时候用<code>[(ngModel)]</code>=”input”来进行双向数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"input"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="angular-中的服务"><a href="#angular-中的服务" class="headerlink" title="angular 中的服务"></a>angular 中的服务</h2><p>在服务中可以存储一些全局的方法或者属性，其他组建可以调用这些方法或者属性</p><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g service (位置: services/storage)</span><br></pre></td></tr></table></figure><p>在服务中添加公共方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line">  setStorage(key: string, <span class="attr">value</span>: any) &#123;</span><br><span class="line">    localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(value));</span><br><span class="line">  &#125;</span><br><span class="line">  getStorage(key: string) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(localStorage.getItem(key));</span><br><span class="line">  &#125;</span><br><span class="line">  reomveStorage(key: string) &#123;</span><br><span class="line">    localStorage.removeItem(key);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-app-module-ts-中引入及挂载"><a href="#在-app-module-ts-中引入及挂载" class="headerlink" title="在 app.module.ts 中引入及挂载"></a>在 app.module.ts 中引入及挂载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StorageService &#125; <span class="keyword">from</span> <span class="string">'./services/storage.service'</span>;</span><br></pre></td></tr></table></figure><p><strong>挂载</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">providers: [StorageService],</span><br></pre></td></tr></table></figure><h3 id="在其他组建中使用"><a href="#在其他组建中使用" class="headerlink" title="在其他组建中使用"></a>在其他组建中使用</h3><p>在组建中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; StorageService &#125; <span class="keyword">from</span> <span class="string">'../../services/storage.service'</span>;</span><br></pre></td></tr></table></figure><p>在组建中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(public service: StorageService) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"> addList(e: any) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.list.unshift(&#123;</span><br><span class="line">        title: <span class="keyword">this</span>.thing,</span><br><span class="line">        status: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.service.setStorage(<span class="string">'userHistory'</span>, <span class="keyword">this</span>.list);</span><br><span class="line">      <span class="keyword">this</span>.thing = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="angular-中的-Dom-操作-以及-ViewChild"><a href="#angular-中的-Dom-操作-以及-ViewChild" class="headerlink" title="angular 中的 Dom 操作 以及 ViewChild"></a>angular 中的 Dom 操作 以及 ViewChild</h2><h3 id="angular-中-通过原生-js-ts-操作-Dom"><a href="#angular-中-通过原生-js-ts-操作-Dom" class="headerlink" title="angular 中 通过原生 js(ts) 操作 Dom"></a>angular 中 通过原生 js(ts) 操作 Dom</h3><p>在组建中使用 <code>ngAfterViewInit</code>生命周期函数，在函数中直接使用js操作Dom</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ngAfterViewInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> box1: <span class="built_in">any</span> = <span class="built_in">document</span>.querySelector(<span class="string">'#box1'</span>);</span><br><span class="line">    box1.style.color = <span class="string">'red'</span>;</span><br><span class="line">    <span class="keyword">const</span> box2: <span class="built_in">any</span> = <span class="built_in">document</span>.querySelector(<span class="string">'.box2'</span>);</span><br><span class="line">    box2.style.color = <span class="string">'hotpink'</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>ngAfterViewInit 函数 指的是dom加载完成后的 生命周期函数</li><li>ngAfterViewInit 函数需要 实现于 AfterViewInit 接口，所以需要修改</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, AfterViewInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DomComponent <span class="keyword">implements</span> OnInit, AfterViewInit</span><br></pre></td></tr></table></figure><h3 id="用-ViewChild-获取-dom-节点"><a href="#用-ViewChild-获取-dom-节点" class="headerlink" title="用 ViewChild 获取 dom 节点"></a>用 ViewChild 获取 dom 节点</h3><p>定义html 节点 用 <code>#xxx</code> 为标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> #<span class="attr">box3</span>&gt;</span></span><br><span class="line">  this is box3</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 ViewChild</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ViewChild</span>(<span class="string">'box3'</span>, &#123;</span><br><span class="line">    <span class="keyword">static</span>: <span class="literal">false</span></span><br><span class="line">  &#125;) box3(随便的名字): ElementRef;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">ngAfterViewInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.box3.nativeElement.style.color = <span class="string">'blue'</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="用-ViewChild-获取子组件的属性和方法"><a href="#用-ViewChild-获取子组件的属性和方法" class="headerlink" title="用 ViewChild 获取子组件的属性和方法"></a>用 ViewChild 获取子组件的属性和方法</h3><p>使用子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在父组件中使用子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">app-head</span> #<span class="attr">head</span>&gt;</span><span class="tag">&lt;/<span class="name">app-head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 父组件的 button</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">mat-button</span> (<span class="attr">click</span>)=<span class="string">"getChildFn()"</span>&gt;</span>获取子组件的方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ViewChild 获取子组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入</span></span><br><span class="line"><span class="meta">@ViewChild</span>(<span class="string">'head'</span>, &#123;<span class="keyword">static</span>: <span class="literal">true</span>&#125;) head: <span class="built_in">any</span>;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"> getChildFn() &#123;</span><br><span class="line">    <span class="keyword">this</span>.head.print();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样就可以调用 子组件上的 print（） 方法</p><h2 id="angular-中的父子组建，及组建间通信"><a href="#angular-中的父子组建，及组建间通信" class="headerlink" title="angular 中的父子组建，及组建间通信"></a>angular 中的父子组建，及组建间通信</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>父组件不仅可以给子组件传递简单的数据，也可以把自己的方法以及整个父组件传递给子组件</p><p><strong>1. 父组件调用子组件的时候传入数据</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-son</span> [<span class="attr">msg</span>] = <span class="string">'传入的数据'</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 子组件引入 Input 模块</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Component, OnInit, Input&#125;  <span class="keyword">from</span> <span class="string">'@anuglar/core'</span></span><br></pre></td></tr></table></figure><p><strong>3. 子组件中用 @Inpit 接收父组件传递过来的数据</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeaderComponent inplements OnInint &#123;</span><br><span class="line">  <span class="comment">// 接收 父组件传入的值</span></span><br><span class="line">  <span class="meta">@Input</span>() msg: <span class="built_in">string</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>父组件分别向子组件传入数据，函数，和整个父组件的方法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 传入普通数据</span><br><span class="line"><span class="tag">&lt;<span class="name">app-son</span> [<span class="attr">msg</span>] = <span class="string">'传入的数据'</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 传入一个函数</span><br><span class="line"><span class="tag">&lt;<span class="name">app-son</span> [<span class="attr">run</span>] = <span class="string">"这是父组件的一个函数"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 传入整个父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">app-son</span> [<span class="attr">father</span>] = <span class="string">"this"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><h4 id="用-ViewChild-获取子组件的数据-或-方法"><a href="#用-ViewChild-获取子组件的数据-或-方法" class="headerlink" title="用 ViewChild 获取子组件的数据 或 方法"></a>用 ViewChild 获取子组件的数据 或 方法</h4><p>使用方法见上面的 <code>用 ViewChild 获取子组件的属性和方法</code></p><h4 id="子组件通过-Output-触发父组件的方法（和vue的子传父有点像）"><a href="#子组件通过-Output-触发父组件的方法（和vue的子传父有点像）" class="headerlink" title="子组件通过 @Output 触发父组件的方法（和vue的子传父有点像）"></a>子组件通过 @Output 触发父组件的方法（和vue的子传父有点像）</h4><ol><li>子组件引入 Output 和 EventEmitter</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>子组件实例化EventEmitter</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Output</span>() <span class="keyword">private</span> outer = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">string</span>&gt;();</span><br></pre></td></tr></table></figure><ol start="3"><li>子组件通过 EventEmitter 对象 outer 实例广播对象</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sendParent() &#123;</span><br><span class="line">  <span class="keyword">this</span>.outer.emit(<span class="string">'子组件的消息'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>父组件调用子组件的时候，定义接收事件 ，outer 就是子组件的 EventEmitter 对象 outer</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-son</span> (<span class="attr">outer</span>) = <span class="string">"runParent($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-son</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>父组件接收到数据会调用自己的 runParent 方法，获取数据</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runParent(msg: <span class="built_in">string</span>) &#123;</span><br><span class="line">  alert(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非父子组件传递"><a href="#非父子组件传递" class="headerlink" title="非父子组件传递"></a>非父子组件传递</h3><ul><li>service（服务）</li><li>localStorage</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;angular&quot;&gt;&lt;a href=&quot;#angular&quot; class=&quot;headerlink&quot; title=&quot;angular&quot;&gt;&lt;/a&gt;angular&lt;/h1&gt;&lt;h2 id=&quot;上车&quot;&gt;&lt;a href=&quot;#上车&quot; class=&quot;headerlink&quot; title=&quot;上
      
    
    </summary>
    
      <category term="前端框架" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="angular" scheme="https://zhaozhoa.github.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>typeScript</title>
    <link href="https://zhaozhoa.github.com/2019/08/21/typeScript/"/>
    <id>https://zhaozhoa.github.com/2019/08/21/typeScript/</id>
    <published>2019-08-21T07:35:12.000Z</published>
    <updated>2019-08-23T03:20:41.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><h2 id="上车"><a href="#上车" class="headerlink" title="上车"></a>上车</h2><p>安装 typescript</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g typescript</span><br></pre></td></tr></table></figure><p>将 1.ts 文件编译成 js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc 1.ts</span><br></pre></td></tr></table></figure><h3 id="vscode-配置ts自动编译成js"><a href="#vscode-配置ts自动编译成js" class="headerlink" title="vscode 配置ts自动编译成js"></a>vscode 配置ts自动编译成js</h3><p>文件目录 cmd 运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>这一步会生成一个tsconfig.json 文件</p><p>修改 tsconfig.json 的 <code>&quot;outDir&quot;: &quot;./js&quot;,</code>(14行) 此处配置编译后的js 目录</p><p>在vscode 中 点击菜单栏的终端 &gt; 运行任务  &gt; tsc: watch –tscconfig.json</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>typescript 常见类型有 number ，string， Boolean，any，number[]（整型数组）</p><p>联合类型 （number | string）等等</p><p>元组类型 ：</p><p>一种特殊的数组类型，可以向数组中存放不同类型的数据</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr:[<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">123</span>, <span class="string">'123'</span>]</span><br></pre></td></tr></table></figure><p>枚举类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Falg &#123;success=<span class="number">1</span>, error=<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">let</span> s:Falg = Falg.success</span><br><span class="line"><span class="built_in">console</span>.log(s) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>any 类型： 相当于 没有指定类型，什么类型都可以用</p><p>因为ts的基本类型没有Object 类型，所以可以用 可以 用 any 类型替代 Object 类型，比如获取dom 节点的时候</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>显式声明</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="built_in">number</span> = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>声明 a 为一个 number 类型</p><ul><li>类型推断</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>typescript 语法会默认为 a 为一个 number 类型</p><ul><li><p>不定义类型</p><p>方法一：</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>​    方法二：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a:<span class="built_in">any</span> = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>此时 a 没有类型， 可以给 a 再赋值其他类型的值</p><h2 id="ts中的函数"><a href="#ts中的函数" class="headerlink" title="ts中的函数"></a>ts中的函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>定义返回值类型需要定义在 括号后面</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>):<span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 没有返回值 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">'aaa'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>在js中，形参和实参个数不需要一致，但ts 必须一致，如果不一致需要在形参中说明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span>, age?:<span class="built_in">number</span></span>) </span>&#123; <span class="comment">// 问号代表这个参数可以不传</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：</code> 可选参数必须写在参数位置的最后面</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>和 es6 一样，直接在参数后面用 <code>=</code> 给默认参数赋值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span> = 20</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在传入的时候只默认参数可以不用传值</p><h3 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h3><p>java 中 重载指的是 两个或两个以上的同名函数 ，他们的参数不一样，这样会出现函数的重载</p><p>typeScript中 的重载是 同一个函数，根据不同的参数类型的定义实现重载</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">str:<span class="built_in">any</span></span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str + <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getInfo(<span class="string">'123'</span>) <span class="comment">// 123</span></span><br><span class="line">getInfo(<span class="number">123</span>)<span class="comment">//123</span></span><br><span class="line">getInfo(ture) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul><li>public    公开的，所有都能访问修改</li><li>private      私有的，只有自己类的内部才可以访问</li><li>protected  受保护的，只有自己类和子类才可以访问</li></ul><p><strong>例如：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name:<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> age:<span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">protected</span> gender:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span>, gender:<span class="built_in">string</span> </span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> show():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的名字叫<span class="subst">$&#123;this.name&#125;</span>,年龄为 <span class="subst">$&#123;this.age&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Staff <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> job: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span>, gender:<span class="built_in">string</span>, job:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name,age,gender)</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">  &#125;</span><br><span class="line">  show():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.show(); <span class="comment">//调用父类的 show 方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的名字叫<span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">//console.log(`我的年龄为$&#123;this.age&#125;`); 报错，age是私有属性，不能再子类访问</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的性别为<span class="subst">$&#123;this.gender&#125;</span>`</span>);  <span class="comment">// 可以在子类访问</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的工作为<span class="subst">$&#123;this.job&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> staff:Staff = <span class="keyword">new</span> Staff(<span class="string">'zhao'</span>, <span class="number">18</span>, <span class="string">'男'</span>,<span class="string">'打杂的'</span>)</span><br><span class="line"> staff.show()</span><br><span class="line"></span><br><span class="line"> <span class="comment">//外部访问</span></span><br><span class="line"> <span class="built_in">console</span>.log(staff.name);   <span class="comment">// 正常，public 都能访问</span></span><br><span class="line"> <span class="built_in">console</span>.log(staff.age);    <span class="comment">// 报错， private，内部访问</span></span><br><span class="line"> <span class="built_in">console</span>.log(staff.gender); <span class="comment">// 报错，protected，内部和子类访问</span></span><br><span class="line"> <span class="built_in">console</span>.log(staff.job);    <span class="comment">// 报错，private， 内部访问</span></span><br></pre></td></tr></table></figure><p><strong>简写:</strong></p><p>正常声明一个类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">public</span> name:<span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> age:<span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">protected</span> gender:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span>, age:<span class="built_in">number</span>, gender:<span class="built_in">string</span> </span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> show():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的名字叫<span class="subst">$&#123;this.name&#125;</span>,年龄为 <span class="subst">$&#123;this.age&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line"> <span class="comment">//省略了</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>, <span class="keyword">private</span> age:<span class="built_in">number</span>, <span class="keyword">protected</span> gender:<span class="built_in">string</span> </span>) &#123;</span><br><span class="line">    <span class="comment">//也省略了</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> show():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的名字叫<span class="subst">$&#123;this.name&#125;</span>,年龄为 <span class="subst">$&#123;this.age&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态属性、静态方法"><a href="#静态属性、静态方法" class="headerlink" title="静态属性、静态方法"></a>静态属性、静态方法</h3><p>用 <code>static</code> 关键字修饰的 属性和方法为静态方法，静态属性和方法不需要实例化对象，直接用 <code>类名.方法名或属性名</code>调用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Per &#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> gender: <span class="built_in">string</span> = <span class="string">'男'</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>, <span class="keyword">public</span> age:<span class="built_in">number</span>, </span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这是一个实例方法</span></span><br><span class="line">  run():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span>在运动`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这是一个静态方法</span></span><br><span class="line">  <span class="keyword">static</span> print():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`print 静态方法`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zhao = <span class="keyword">new</span> Per(<span class="string">'zhao'</span>,<span class="number">18</span>)</span><br><span class="line"><span class="comment">// 调用实例方法</span></span><br><span class="line">zhao.run() </span><br><span class="line"><span class="comment">// 调用静态方法</span></span><br><span class="line">Per.print()</span><br><span class="line"><span class="built_in">console</span>.log(Per.gender);</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>父类定义一个方法不去实现，让继承它的子类去实现，每一个子类有不同的表现</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  eat():<span class="built_in">void</span>&#123; <span class="comment">// 具体吃什么不知道，具体吃什么?继承它的子类去实现，每一个子类的表现不一样</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`吃`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  eat():<span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`狗吃狗粮`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  eat(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`猫吃猫粮`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat1 = <span class="keyword">new</span> cat(<span class="string">'miao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(cat1.eat());</span><br></pre></td></tr></table></figure><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><blockquote><p>typeScript 中的抽象类，提供其他类的基类，不能直接被实例化</p><p>用 abstract 关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</p></blockquote><p>抽象类和抽象方法定义了一套模板，继承于它的子类必须遵循这个模板</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal2 &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抽象方法只需要定义，不用实现</span></span><br><span class="line">  <span class="keyword">abstract</span> eat():<span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> Animal2 &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 抽象类中的方法必须实现</span></span><br><span class="line">  eat():<span class="built_in">string</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.name&#125;</span>吃肉`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> z = <span class="keyword">new</span> Student(<span class="string">'zhao'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(z.eat());</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>接口：可以对属性、函数、索引、类等进行定义和动作规范</p><p>接口需要用 interface 申明</p></blockquote><p><strong>作用：</strong>定义标准</p><h3 id="属性接口"><a href="#属性接口" class="headerlink" title="属性接口"></a>属性接口</h3><p><strong>对传入的json进行约束</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约束函数接收一个 对象，对象有一个 label为 string 类型的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintLabel</span>(<span class="params">labelInfo:&#123;label:<span class="built_in">string</span>&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'zhao'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrintLabel(&#123;label: <span class="string">'zhao'</span>&#125;) <span class="comment">// √</span></span><br><span class="line"></span><br><span class="line">PrintLabel(<span class="string">'zhao'</span>) <span class="comment">// ×</span></span><br><span class="line">PrintLabel(&#123;name: <span class="string">'zhao'</span>&#125;) <span class="comment">//×</span></span><br></pre></td></tr></table></figure><p><strong>定义接口，对所有方法进行约束</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="keyword">interface</span> fullName &#123;</span><br><span class="line">   firstName:<span class="built_in">string</span> <span class="comment">// 这里的对象不用 逗号 要么用分号，要么不用符号</span></span><br><span class="line">   secondName:<span class="built_in">string</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name:fullName</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(name.firstName,name.secondName);</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果在调用的时候直接传入对象，则只能传入接口规定的属性</span></span><br><span class="line">printName(&#123;firstName:<span class="string">'zhang'</span>, secondName: <span class="string">'zhao'</span>&#125;) <span class="comment">// √</span></span><br><span class="line">printName(&#123; firstName: <span class="string">'zhang'</span>, secondName: <span class="string">'zhao'</span>, age: <span class="number">18</span> &#125;) <span class="comment">// ×</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果对象中需要传入其他属性，则需要将对象抽离出来</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  firstName: <span class="string">'zhang'</span>,</span><br><span class="line">  secondName: <span class="string">'zhao'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printName(obj) <span class="comment">// √</span></span><br></pre></td></tr></table></figure><p><strong>可选参数接口</strong></p><p>接口中的属性可以不用传入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> fullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span></span><br><span class="line">  secondName?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于函数的可选参数，直接在属性名后面加上一个 <code>问号</code>表示这个非必须</p><h3 id="函数接口"><a href="#函数接口" class="headerlink" title="函数接口"></a>函数接口</h3><p>对方法传入的参数以及返回值进行约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  函数类型的接口</span></span><br><span class="line"><span class="keyword">interface</span> encrypt&#123;</span><br><span class="line">  (param1:<span class="built_in">number</span>, param2:<span class="built_in">number</span>):<span class="built_in">number</span> <span class="comment">// 约定函数必须传入两个 number 类型的参数 并且返回一个number类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用接口定义函数</span></span><br><span class="line"><span class="keyword">let</span> enc:encrypt=<span class="function"><span class="keyword">function</span>(<span class="params">param1: <span class="built_in">number</span>, param2: <span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> param1 + param2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enc(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="类-类型接口"><a href="#类-类型接口" class="headerlink" title="类 类型接口"></a>类 类型接口</h3><p>对类的约束，类似于抽象类</p><p>用 implement 对 类接口的实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name:<span class="built_in">string</span></span><br><span class="line">  eat(str:<span class="built_in">string</span>):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog5 <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> 吃`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Dog5(<span class="string">'zhao'</span>)</span><br><span class="line">d.eat()</span><br></pre></td></tr></table></figure><h3 id="接口扩展"><a href="#接口扩展" class="headerlink" title="接口扩展"></a>接口扩展</h3><p>接口可以继承接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  eat():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> P <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  work():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Wor <span class="keyword">implements</span> P&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  work(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'搬砖'</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型就是解决 类、接口、方法的复用，以及对不特定数据类型的支持</p></blockquote><p><strong>泛型函数</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;T&gt; 代表泛型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用泛型函数时候在 &lt;&gt; 中填入什么类型， T 就是什么类型</span></span><br><span class="line">getName&lt;<span class="built_in">string</span>&gt;(<span class="string">'zhao'</span>)</span><br></pre></td></tr></table></figure><p><strong>泛型类</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Minclass&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> list:T[] = []</span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  add(value:T):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(value)</span><br><span class="line">  &#125;</span><br><span class="line">  min():T &#123;</span><br><span class="line">    <span class="keyword">let</span> minNum = <span class="keyword">this</span>.list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (minNum &gt; <span class="keyword">this</span>.list[i]) &#123;</span><br><span class="line">        minNum = <span class="keyword">this</span>.list[i]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minNum</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m1 = <span class="keyword">new</span> Minclass&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">m1.add(<span class="number">1</span>)</span><br><span class="line">m1.add(<span class="number">11</span>)</span><br><span class="line">m1.add(<span class="number">21</span>)</span><br><span class="line">m1.add(<span class="number">31</span>)</span><br><span class="line">m1.add(<span class="number">41</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m1.list); <span class="comment">// [ 1, 11, 21, 31, 41 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(m1.min()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote><p>装饰器就是一种特殊的类型声明，它能够附加到类的声明、方法</p><p>属性或者参数上，可以修改行为</p><p>通俗来说，<code>装饰器就是一个方法，可以注入到类，方法，属性参数上来对他们进行扩展</code></p></blockquote><p>装饰器还只是一种ts实验，使用的时候需要在 tsconfig.js 中配置</p><p>“experimentalDecorators”: true, (59行)</p><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类装饰器  ---装饰器就是一个方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params); <span class="comment">// 当前类，就是使用他的类</span></span><br><span class="line">  params.prototype.apiUrl = <span class="string">'动态添加的类'</span></span><br><span class="line">  params.prototype.run = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是一个run方法'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> Use&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  getData()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u:<span class="built_in">any</span> = <span class="keyword">new</span> Use()</span><br><span class="line">u.run() <span class="comment">// 此方法由装饰器注入，可以直接调用</span></span><br></pre></td></tr></table></figure><p><strong>装饰器工厂</strong>（可以向装饰器中出传递参数）</p><ol><li>装饰器中的参数是 传入的参数</li><li>返回的函数中的参数是 使用的类</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">string</span></span>) </span>&#123;  <span class="comment">// 装饰器中的参数是 传入的参数）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>  (<span class="params">fn:<span class="built_in">any</span></span>) </span>&#123;  <span class="comment">// 返回的函数中的参数是 使用的类</span></span><br><span class="line">    <span class="built_in">console</span>.log(params); <span class="comment">//  http://www.zhangzhaozhao.work</span></span><br><span class="line">    <span class="built_in">console</span>.log(fn); <span class="comment">// [Function: PrintUrl]</span></span><br><span class="line"></span><br><span class="line">    fn.prototype.url = params</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">'http://www.zhangzhaozhao.work'</span>)</span><br><span class="line"><span class="keyword">class</span> PrintUrl &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u:<span class="built_in">any</span> = <span class="keyword">new</span> PrintUrl()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(u.url); <span class="comment">// http://www.zhangzhaozhao.work</span></span><br></pre></td></tr></table></figure><p><strong>用装饰器重载类的构造器和方法</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器修改类的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span> (<span class="params">params:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(params)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="keyword">extends</span> params&#123; <span class="comment">// 重新类里面的方法</span></span><br><span class="line">    apiUrl:<span class="built_in">string</span> = <span class="string">'这是修改后的apiUrl'</span></span><br><span class="line">    getData() &#123;</span><br><span class="line">      <span class="keyword">this</span>.apiUrl = <span class="keyword">this</span>.apiUrl + <span class="string">'---'</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="keyword">class</span> PrintUrl&#123;</span><br><span class="line">  <span class="keyword">public</span> apiUrl:<span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.apiUrl = <span class="string">'这是构造函数里面的apiUrl'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getData () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.apiUrl)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pp:<span class="built_in">any</span> = <span class="keyword">new</span> PrintUrl()</span><br><span class="line">pp.getData()</span><br></pre></td></tr></table></figure><h3 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h3><blockquote><p>属性装饰器表达式在运行时当作函数调用，传入两个参数</p><ol><li>对静态成员来说是类的构造函数，对实例成员来说是类的原型对象</li><li>属性的名字</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">string</span></span>):<span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">fn:<span class="built_in">any</span></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span> (<span class="params">params:<span class="built_in">any</span></span>):<span class="title">any</span> </span>&#123; <span class="comment">// params 为传入的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">fn:<span class="built_in">any</span>, attr:<span class="built_in">any</span></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(fn) <span class="comment">// printUrl 类 </span></span><br><span class="line">    <span class="built_in">console</span>.log(attr) <span class="comment">// url （属性名）</span></span><br><span class="line">    fn[attr] = params</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类的装饰器</span></span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">'xxx'</span>)</span><br><span class="line"><span class="keyword">class</span> printUrl &#123;</span><br><span class="line">  <span class="comment">// 属性的装饰器</span></span><br><span class="line">  <span class="meta">@logProperty</span>(<span class="string">'hello-zhao'</span>)</span><br><span class="line">  <span class="keyword">public</span> url:<span class="built_in">any</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  getData () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.url);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> printUrl()</span><br><span class="line">c.getData()</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><blockquote><p>他会被用到方法的属性描述上，可以用来监视，修改或替换方法定义</p></blockquote><p>方法装饰器接收三个参数</p><ol><li>对静态成员来说是类的构造函数，对实例成员来说是类的原型对象</li><li>方法名</li><li>当前方法的描述的描述</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params">params:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>  (<span class="params">target:<span class="built_in">any</span>, methodName:<span class="built_in">any</span>, desc:<span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);  <span class="comment">// printUrl &#123; getData: [Function] &#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(methodName); <span class="comment">// getData</span></span><br><span class="line">    <span class="built_in">console</span>.log(desc);</span><br><span class="line">    target.apiUrl = <span class="string">'http://'</span></span><br><span class="line">    target.run = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'it\'s a function run'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> printUrl &#123;</span><br><span class="line">  <span class="keyword">public</span> url:<span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">constructor</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用方法装饰器</span></span><br><span class="line">  <span class="meta">@get</span>(<span class="string">'zhao'</span>)</span><br><span class="line">  getData () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pu:<span class="built_in">any</span> = <span class="keyword">new</span> printUrl()</span><br><span class="line">pu.run() <span class="comment">// it's a function run</span></span><br><span class="line"><span class="built_in">console</span>.log(pu.apiUrl); <span class="comment">// http://</span></span><br></pre></td></tr></table></figure><p><strong>方法装饰器修改原来方法</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">params: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">any</span>, desc: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> oMethod = desc.value <span class="comment">// 这个就是装饰器装饰的方法</span></span><br><span class="line">  <span class="comment">//  替换这个方法</span></span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span> (<span class="params">...args:<span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">      args = args.map(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>(value)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="built_in">console</span>.log(args);</span><br><span class="line">      <span class="comment">// this 指的是 desc.value 也就是 getData方法</span></span><br><span class="line">      oMethod.apply (<span class="keyword">this</span>,args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> printUrl &#123;</span><br><span class="line">  <span class="keyword">public</span> url: <span class="built_in">string</span> | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@get</span>(<span class="string">'zhao'</span>)</span><br><span class="line">  getData(...args:<span class="built_in">any</span>[]) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args);  <span class="comment">// 此时这里打印的就是 string类型的数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'原来的方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pu: <span class="built_in">any</span> = <span class="keyword">new</span> printUrl()</span><br><span class="line">pu.getData(<span class="number">123</span>, <span class="string">'sss'</span>)</span><br></pre></td></tr></table></figure><h3 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h3><p>属性 &gt;  方法&gt; 类</p><p>如果由多个同类型的装饰器则 由下到上，有后往前 执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;typescript&quot;&gt;&lt;a href=&quot;#typescript&quot; class=&quot;headerlink&quot; title=&quot;typescript&quot;&gt;&lt;/a&gt;typescript&lt;/h1&gt;&lt;h2 id=&quot;上车&quot;&gt;&lt;a href=&quot;#上车&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="typtScript" scheme="https://zhaozhoa.github.com/tags/typtScript/"/>
    
  </entry>
  
  <entry>
    <title>字典和散列</title>
    <link href="https://zhaozhoa.github.com/2019/07/01/%E5%AD%97%E5%85%B8%E5%92%8C%E6%95%A3%E5%88%97/"/>
    <id>https://zhaozhoa.github.com/2019/07/01/字典和散列/</id>
    <published>2019-07-01T02:43:11.000Z</published>
    <updated>2019-08-23T06:09:05.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字典和散列"><a href="#字典和散列" class="headerlink" title="字典和散列"></a>字典和散列</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><blockquote><p>在字典中，存储的是[键，值]对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字 典则是以[键，值]的形式来存储元素。字典也称作映射、符号表或关联数组</p></blockquote><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><p><strong>我们将 key 转化为了字符串，而为了保存信息的需要，我们同<br>样要保存原始的 key。</strong></p><p>创建一个将key转换成字符串的函数  difaultToString.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">difaultToString</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'NULL'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'UNDEFINED'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'string'</span> || item <span class="keyword">instanceof</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.toString()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = difaultToString</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultToString = <span class="built_in">require</span>(<span class="string">'./../util/defaultToString'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存原始的 key：valu</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValuePair</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(key, value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.key = key</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">  &#125;</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[#<span class="subst">$&#123;<span class="keyword">this</span>.key&#125;</span>: <span class="subst">$&#123;<span class="keyword">this</span>.valve&#125;</span>]`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (toStrfn = defaultToString) &#123;</span><br><span class="line">    <span class="keyword">this</span>.toStrfn = toStrfn</span><br><span class="line">    <span class="keyword">this</span>.table = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 检测一个键是否存在于字典中</span></span><br><span class="line">  hasKey (key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrfn(key)] != <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向字典中添加新元素。如果 key 已经存在，那么已存在的 value 会 被新的值覆盖</span></span><br><span class="line">  <span class="keyword">set</span> (key, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tableKey = <span class="keyword">this</span>.toStrfn(key)</span><br><span class="line">      <span class="keyword">this</span>.table[tableKey] = <span class="keyword">new</span> ValuePair(key, value)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从字典中移除一个值</span></span><br><span class="line">  remove (key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.hasKey(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrfn(key)]</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从字典中检索一个值</span></span><br><span class="line">  <span class="keyword">get</span> (key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrfn(key)] == <span class="literal">null</span> ? <span class="literal">undefined</span> : <span class="keyword">this</span>.table[<span class="keyword">this</span>.toStrfn(key)].value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将字典中所有[键，值]对返回</span></span><br><span class="line">  keyValues() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.values(<span class="keyword">this</span>.table)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将字典所包含的所有键名以数组形式返回</span></span><br><span class="line">  keys () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.keyValues().map(<span class="function"><span class="params">valuepair</span> =&gt;</span> valuepair.key)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将字典所包含的所有值以数组形式返回</span></span><br><span class="line">  values () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.keyValues().map(<span class="function"><span class="params">valuepair</span> =&gt;</span> valuepair.value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用 forEach 迭代字典中的每个键值对</span></span><br><span class="line">  forEach (callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> valuepair = <span class="keyword">this</span>.keyValues()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; valuepair.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = callback(valuepair[i].key, valuepair[i].value)</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  size () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.table).length</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  clear () &#123;</span><br><span class="line">    <span class="keyword">this</span>.table = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h2><blockquote><p>散列算法的作用是尽可能快地在数据结构中找到一个值。在之前的章节中，你已经知道如果要在数据结构中获得一个值（使用 get 方法），需要迭代整个数据结构来找到它。如果使用散列 函数，就知道值的具体位置，因此能够快速检索到该值。散列函数的作用是给定一个键值，然后 返回值在表中的地址</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字典和散列&quot;&gt;&lt;a href=&quot;#字典和散列&quot; class=&quot;headerlink&quot; title=&quot;字典和散列&quot;&gt;&lt;/a&gt;字典和散列&lt;/h1&gt;&lt;h2 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://zhaozhoa.github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="字典和散列" scheme="https://zhaozhoa.github.com/tags/%E5%AD%97%E5%85%B8%E5%92%8C%E6%95%A3%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://zhaozhoa.github.com/2019/06/30/%E9%9B%86%E5%90%88/"/>
    <id>https://zhaozhoa.github.com/2019/06/30/集合/</id>
    <published>2019-06-30T02:06:38.000Z</published>
    <updated>2019-08-23T06:02:15.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><blockquote><p>集合是由一组无序且唯一（即不能重复）的项组成的。该数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中</p></blockquote><h2 id="自己创建一个集合（Set"><a href="#自己创建一个集合（Set" class="headerlink" title="自己创建一个集合（Set)"></a>自己创建一个集合（Set)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个集合</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查元素是否存在在集合中</span></span><br><span class="line">  has (ele) &#123;</span><br><span class="line">    <span class="comment">// return ele in this.items</span></span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>.items, ele)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给集合里面添加元素</span></span><br><span class="line">  add (ele) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.has(ele)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.items[ele] = ele</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除集合元素</span></span><br><span class="line">  <span class="keyword">delete</span> (ele) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(ele)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.items[ele]</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清空集合</span></span><br><span class="line">  clear () &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取集合的长度</span></span><br><span class="line">  size () &#123;</span><br><span class="line">    <span class="comment">// es6 方法，将对象中的键转换成数组，再获取长度</span></span><br><span class="line">    <span class="comment">// return Object.keys(this.items).length</span></span><br><span class="line">    <span class="comment">// es5 方法</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.items) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.items.hasOwnProperty(key)) &#123;</span><br><span class="line">        count++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将集合里面的值转换成数组</span></span><br><span class="line">  values () &#123;</span><br><span class="line">    <span class="comment">// es6 方法</span></span><br><span class="line">    <span class="comment">// return Object.values(this.items)</span></span><br><span class="line">    <span class="comment">// es5 方法</span></span><br><span class="line">    <span class="keyword">let</span> values = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="keyword">this</span>.items) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.items.hasOwnProperty(key)) &#123;</span><br><span class="line">        values.push(<span class="keyword">this</span>.items[key])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> values</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Set</span></span><br></pre></td></tr></table></figure><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p><strong>直接用 es6 api 实现</strong></p><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><blockquote><p>对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求两个集合的并集</span></span><br><span class="line"><span class="comment"> * @param &#123;Set&#125; set1 集合1</span></span><br><span class="line"><span class="comment"> * @param &#123;Set&#125; set2 集合2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="function">(<span class="params">set1, set2</span>) =&gt;</span>  <span class="keyword">new</span> <span class="built_in">Set</span>([...set1, ...set2])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(union(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]), <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>])));</span><br><span class="line"><span class="comment">// Set &#123; 1, 3, 2, 5, 8, 9 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><blockquote><p>对于给定的两个集合，返回一个包含两个集合中共有元素的新集合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求两个集合的交集</span></span><br><span class="line"><span class="comment"> * @param &#123;Set&#125; set1 集合1</span></span><br><span class="line"><span class="comment"> * @param &#123;Set&#125; set2 集合2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> intersection = <span class="function">(<span class="params">set1, set2</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(set1).filter(<span class="function"><span class="params">ele</span> =&gt;</span> set2.has(ele)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(intersection(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]), <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>])));</span><br></pre></td></tr></table></figure><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><blockquote><p>对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集 合的元素的新集合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求 集合1 与 集合2 差集</span></span><br><span class="line"><span class="comment"> * @param &#123;Set&#125; set1 集合1</span></span><br><span class="line"><span class="comment"> * @param &#123;Set&#125; set2 集合2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="function">(<span class="params">set1, set2</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="built_in">Array</span>.from(set1).filter(<span class="function"><span class="params">ele</span> =&gt;</span> !set2.has(ele)))</span><br><span class="line"><span class="built_in">console</span>.log(difference(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]), <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>])));</span><br><span class="line"><span class="comment">// Set &#123; 3, 5 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;集合是由一组无序且唯一（即不能重复）的项组成的。该数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://zhaozhoa.github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="集合" scheme="https://zhaozhoa.github.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="https://zhaozhoa.github.com/2019/06/28/%E9%93%BE%E8%A1%A8/"/>
    <id>https://zhaozhoa.github.com/2019/06/28/链表/</id>
    <published>2019-06-28T07:26:41.000Z</published>
    <updated>2019-08-23T06:03:14.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><blockquote><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个<br>元素由一个存储元素本身的节点和一个指向下一个元素的引用</p></blockquote><h2 id="初始化链表"><a href="#初始化链表" class="headerlink" title="初始化链表"></a>初始化链表</h2><p><strong>链表的节点类</strong>  Node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Node</span><br></pre></td></tr></table></figure><ul><li>this.next 存储下一个节点对象</li><li>所以在js中，链表的存储结构为 <code>当前节点对象里面嵌套下一个节点对象</code></li><li>最后一个节点的 this.next 为undefined</li></ul><p><strong>初始化链表及常用方法</strong></p><p>initLinikList.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Node = <span class="built_in">require</span>(<span class="string">'./Node'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="comment">// 存储元素的数量</span></span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 存储整个</span></span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向链表尾部添加元素</span></span><br><span class="line">  push (ele) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node(ele)</span><br><span class="line">    <span class="keyword">let</span> current</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// current 的赋值为 第一个节点</span></span><br><span class="line">      current = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="comment">// current 从第一个节点移动到最后一个节点</span></span><br><span class="line">      <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      current.next = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.count++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个元素的位置</span></span><br><span class="line">  indexOf(ele) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (current.element === ele) &#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取链表节点方法</span></span><br><span class="line">  getElementAt (index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">        node = node.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从链表中移除指定位置元素</span></span><br><span class="line">  removeAt (index) &#123;</span><br><span class="line">    <span class="comment">// 判断索引边界</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = current.next</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>)</span><br><span class="line">        current = previous.next</span><br><span class="line">        previous.next = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count--</span><br><span class="line">      <span class="keyword">return</span> current.element</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从链表中移除元素</span></span><br><span class="line">  remove (ele) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="keyword">this</span>.indexOf(ele)</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'input Error'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 任意位置插入元素</span></span><br><span class="line">  insert (ele, index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = <span class="keyword">new</span> Node(ele)</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        node.next = <span class="keyword">this</span>.head</span><br><span class="line">        <span class="keyword">this</span>.head = node</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>)</span><br><span class="line">        node.next = previous.next</span><br><span class="line">        previous.next = node</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  size () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count</span><br><span class="line">  &#125;</span><br><span class="line">  inEmpty () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.head.element&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="keyword">this</span>.head.next; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>.size() &amp;&amp; current != <span class="literal">null</span>; i++) &#123; </span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span>; </span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> objString; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = LinkList</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><blockquote><p>双向链表和普通链表的区别在于，在链表中，<br>一个节点只有链向下一个节点的链接；而在双向链表中，链接是双向的：一个链向下一个元素， 另一个链向前一个元素</p></blockquote><p><strong>实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双链表的实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Node = <span class="built_in">require</span>(<span class="string">'./Node'</span>)</span><br><span class="line"><span class="keyword">let</span> LinkList = <span class="built_in">require</span>(<span class="string">'./initLInkList'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双链表节点类，继承于普通链表节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyNode</span>  <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (element, next, prev) &#123;</span><br><span class="line">    <span class="keyword">super</span>(element, next)</span><br><span class="line">    <span class="keyword">this</span>.prev = prev</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 双链表，继承于普通链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkList</span> <span class="keyword">extends</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="comment">// 用来存储最后一个节点对象</span></span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  insert (ele, index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;=<span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> DoublyNode(ele)</span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head  == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.head = node</span><br><span class="line">          <span class="keyword">this</span>.tail = node</span><br><span class="line">          </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          node.next = <span class="keyword">this</span>.head</span><br><span class="line">          current.prev = node</span><br><span class="line">          <span class="keyword">this</span>.head = node</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 给链表末尾添加节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.count) &#123;</span><br><span class="line">        current = <span class="keyword">this</span>.tail</span><br><span class="line">        current.next = node</span><br><span class="line">        node.prev = current</span><br><span class="line">        <span class="keyword">this</span>.tail = node</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>)</span><br><span class="line">        current = previous.next</span><br><span class="line">        node.next = current</span><br><span class="line">        previous.next = node</span><br><span class="line">        current.prev = node</span><br><span class="line">        node.prev = previous</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从任意位置移除元素</span></span><br><span class="line">  removeAt (index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = current.next</span><br><span class="line">        <span class="comment">// 如果只有一项，更新tail</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.count === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.tail = <span class="literal">undefined</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.head.prev = <span class="literal">undefined</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移除最后一个节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.count <span class="number">-1</span>) &#123;</span><br><span class="line">        current = <span class="keyword">this</span>.tail</span><br><span class="line">        <span class="keyword">this</span>.tail = current.prev</span><br><span class="line">        current.prev.next = <span class="literal">undefined</span></span><br><span class="line">        <span class="comment">// 移除中间节点</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = <span class="keyword">this</span>.getElementAt(index)</span><br><span class="line">        current.prev.next = current.next</span><br><span class="line">        current.next.prev = current.prev</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count--</span><br><span class="line">      <span class="keyword">return</span> current.element</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> testLinkList = <span class="keyword">new</span> DoublyLinkList()</span><br><span class="line">testLinkList.insert(<span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">testLinkList.insert(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">testLinkList.insert(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(testLinkList.removeAt(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><blockquote><p>循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（tail.next）不是引用 undefined，而是指向第一个元素（head）</p></blockquote><p><strong>循环链表的实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环链表的实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Node = <span class="built_in">require</span>(<span class="string">'./Node'</span>)</span><br><span class="line"><span class="keyword">let</span> LinkList = <span class="built_in">require</span>(<span class="string">'./initLInkList'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularLinkLidst</span> <span class="keyword">extends</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">super</span> ()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  insert (ele, index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> Node(ele)</span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.head = node</span><br><span class="line">          <span class="comment">// 最后一个节点的next 指向头节点</span></span><br><span class="line">          node.next = <span class="keyword">this</span>.head</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          node.next = current</span><br><span class="line">          <span class="comment">// 获取最后一个节点</span></span><br><span class="line">          current = <span class="keyword">this</span>.getElementAt(<span class="keyword">this</span>.size())</span><br><span class="line">          <span class="keyword">this</span>.head = node</span><br><span class="line">          current.next = <span class="keyword">this</span>.head</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>)</span><br><span class="line">        node.next = previous.next</span><br><span class="line">        previous.next = node</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count++</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  removeAt(index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.size() === <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.head = <span class="literal">undefined</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> removed = <span class="keyword">this</span>.head</span><br><span class="line">          current = <span class="keyword">this</span>.getElementAt(<span class="keyword">this</span>.size())</span><br><span class="line">          <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next</span><br><span class="line">          current.next = <span class="keyword">this</span>.head</span><br><span class="line">          current = removed</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index <span class="number">-1</span>)</span><br><span class="line">        current = previous.next</span><br><span class="line">        previous.next = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.count--</span><br><span class="line">      <span class="keyword">return</span> current.element</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个&lt;br&gt;元素由一个存储元素本身的节
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://zhaozhoa.github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="链表" scheme="https://zhaozhoa.github.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列</title>
    <link href="https://zhaozhoa.github.com/2019/06/24/%E9%98%9F%E5%88%97/"/>
    <id>https://zhaozhoa.github.com/2019/06/24/队列/</id>
    <published>2019-06-24T08:14:25.000Z</published>
    <updated>2019-08-23T06:01:20.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p><strong>先入先出</strong></p><h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><p>通过闭包和 WeakMap 将 items 封装成私有的属性</p><p><strong>initQueue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Queue = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">      items.set(<span class="keyword">this</span>, [])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    enqueue (ele) &#123;</span><br><span class="line">      <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>)</span><br><span class="line">      q.push(ele)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    dequeue () &#123;</span><br><span class="line">      <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">let</span> r = q.shift()</span><br><span class="line">      <span class="keyword">return</span> r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看队列是否为空</span></span><br><span class="line">    isEmpty () &#123;</span><br><span class="line">      <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> q.length === <span class="number">0</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 打印队列</span></span><br><span class="line">    print () &#123;</span><br><span class="line">      <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(q.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回队列元素个数</span></span><br><span class="line">    size () &#123;</span><br><span class="line">      <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> q.length</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> Queue</span><br><span class="line">&#125;) () </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Queue</span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>在入队的时候给元素优先级，使其不一定要插到队尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 优先队列的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> items = []</span><br><span class="line">  <span class="comment">// 元素的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Element</span> (<span class="params">ele, pri</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.element = ele</span><br><span class="line">    <span class="keyword">this</span>.priority = pri</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 优先队列的入队函数</span></span><br><span class="line">  <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span> (<span class="params">ele, pri</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化一个元素对象</span></span><br><span class="line">    <span class="keyword">let</span> element = <span class="keyword">new</span> Element(ele, pri)</span><br><span class="line">    <span class="comment">// 队列为空，则元素对象入队</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      items.push(element)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// 判断要插入的元素对象的优先级，和 队列元素的优先级，如果优先级高，插入到当前队列之前</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.priority &lt; items[i].priority) &#123;</span><br><span class="line">          items.splice(i, <span class="number">0</span>, element)</span><br><span class="line">          flag = <span class="literal">true</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 优先级小于所有数组元素的优先级，插入到队尾</span></span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        items.push(element)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(items[i].element, items[i].priority);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(<span class="string">'john'</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">'jack'</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">'camila'</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.print();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">jack <span class="number">1</span></span><br><span class="line">camila <span class="number">1</span></span><br><span class="line">john <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用循环队列模仿击鼓传花游戏</span></span><br><span class="line"><span class="comment">/* 在这个游戏中，孩子们围成一个圆圈，把花尽快地传递给旁边的人。</span></span><br><span class="line"><span class="comment">  某一时刻传花停止， 这个时候花在谁手里，谁就退出圆圈、结束游戏。</span></span><br><span class="line"><span class="comment">  重复这个过程，直到只剩一个孩子（胜者）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Queue = <span class="built_in">require</span>(<span class="string">'./initQueue'</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟击鼓传花游戏</span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; nameList 参加游戏的小朋友</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; num 每一回合花在小朋友中传递的次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span>(<span class="params">nameList, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  <span class="keyword">let</span> eliminatedList = []</span><br><span class="line">  <span class="comment">// 将小朋友的名字入队列</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nameList.length; i++) &#123;</span><br><span class="line">    queue.enqueue(nameList[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">      <span class="comment">// 传过的小朋友先出队列，在排到队尾</span></span><br><span class="line">      queue.enqueue(queue.dequeue())</span><br><span class="line">    &#125;</span><br><span class="line">    eliminatedList.push(queue.dequeue())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    winner: queue.dequeue(),</span><br><span class="line">    eliminatedList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="keyword">let</span> result = hotPotato(name, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// &#123; winner: 'a', eliminatedList: [ 'c', 'b', 'e', 'd' ] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p><strong>双端队列</strong>（deque，或称 double-ended queue）是一种允许我们同时从前端和后端添加和移除<br>元素的特殊队列</p><blockquote><p>在计算机科学中，双端队列的一个常见应用是存储一系列的撤销操作。每当用户在软件中进<br>行了一个操作，该操作会被存在一个双端队列中（就像在一个栈里）。当用户点击撤销按钮时， 该操作会被从双端队列中弹出，表示它被从后面移除了。在进行了预先定义的一定数量的操作后， 最先进行的操作会被从双端队列的前端移除。由于双端队列同时遵守了先进先出和后进先出原 则，可以说它是把队列和栈相结合的一种数据结构</p></blockquote><h3 id="初始化双端队列"><a href="#初始化双端队列" class="headerlink" title="初始化双端队列"></a>初始化双端队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双端队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deque</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断双端队列是否为空</span></span><br><span class="line">  isEmpty () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 从双端队列前端移除第一个元素</span></span><br><span class="line">  removeFront () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount]</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount]</span><br><span class="line">    <span class="keyword">this</span>.lowestCount++</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从双端队列后端移除第一个元素</span></span><br><span class="line">  removeBack () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">this</span>.count--</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回双端队列前端的第一个元素</span></span><br><span class="line">  peekFront () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回双端队列前端的第一个元素</span></span><br><span class="line">  peekBack () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.count <span class="number">-1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  clear () &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">    <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.lowestCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  size () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count - <span class="keyword">this</span>.lowestCount</span><br><span class="line">  &#125;</span><br><span class="line">  print () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="keyword">this</span>.lowestCount; i &lt; <span class="keyword">this</span>.count; i++) &#123;</span><br><span class="line">      res.push(<span class="keyword">this</span>.items[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在双端队列队尾添加元素 </span></span><br><span class="line">  addBack(ele) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items[<span class="keyword">this</span>.count] = ele</span><br><span class="line">    <span class="keyword">this</span>.count++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在双端队列前端添加新的元素</span></span><br><span class="line">  addFront(ele) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.addBack(ele)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.lowestCount --</span><br><span class="line">      <span class="keyword">this</span>.items[<span class="keyword">this</span>.lowestCount] = ele</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Deque</span><br></pre></td></tr></table></figure><h3 id="用双端队列检查回文"><a href="#用双端队列检查回文" class="headerlink" title="用双端队列检查回文"></a>用双端队列检查回文</h3><blockquote><p>回文是正反都能读通的单词、词组、数或一系列字符的序列，例如madam或 racecar</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Deque = <span class="built_in">require</span>(<span class="string">'./initDeque'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindromeChecker</span>(<span class="params">aString</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (aString === <span class="literal">undefined</span> || aString === <span class="literal">null</span> || (aString !== <span class="literal">null</span> &amp;&amp; aString.length === <span class="number">0</span>)) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deque = <span class="keyword">new</span> Deque()</span><br><span class="line">  <span class="keyword">const</span> lowerString = aString.toLocaleLowerCase()</span><br><span class="line">  <span class="keyword">let</span> isEqual = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> firstChar, lastChar</span><br><span class="line">  <span class="comment">// 元素入队</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lowerString.length; i++) &#123;</span><br><span class="line">    deque.addBack(lowerString.charAt(i))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (deque.size() &gt; <span class="number">1</span> &amp;&amp; isEqual) &#123;</span><br><span class="line">    firstChar = deque.removeFront()</span><br><span class="line">    lastChar = deque.removeBack()</span><br><span class="line">    <span class="keyword">if</span> (firstChar !== lastChar) &#123;</span><br><span class="line">      isEqual = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isEqual</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(palindromeChecker(<span class="string">'aaabaaa'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;先入先出&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建队列&quot;&gt;&lt;a href=&quot;#创建队列&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://zhaozhoa.github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="队列" scheme="https://zhaozhoa.github.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://zhaozhoa.github.com/2019/06/18/%E6%A0%88/"/>
    <id>https://zhaozhoa.github.com/2019/06/18/栈/</id>
    <published>2019-06-18T12:18:39.000Z</published>
    <updated>2019-06-27T15:50:51.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><p><strong>先入后出</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><ul><li>用构造函数表示栈</li><li>用数组作为存储对象</li><li>将栈的方法挂载到构造函数的原型上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用数组作为存储方法</span></span><br><span class="line">  <span class="keyword">this</span>.items = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items.push(element)</span><br><span class="line">&#125;</span><br><span class="line">Stack.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items.pop()</span><br><span class="line">&#125;</span><br><span class="line">Stack.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">Stack.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个栈的实例对象</span></span><br><span class="line"><span class="keyword">let</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"><span class="built_in">console</span>.log(stack.isEmpty());</span><br><span class="line">stack.push(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stack.items);</span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ul><li>用类实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.item = []</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  push (element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><h3 id="十进制转换二进制"><a href="#十进制转换二进制" class="headerlink" title="十进制转换二进制"></a>十进制转换二进制</h3><p><strong>封装一个栈的类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装的栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">''</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">      result += <span class="keyword">this</span>.pop().toString()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Stack</span><br></pre></td></tr></table></figure><p><strong>算法实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入封装的栈</span></span><br><span class="line"><span class="keyword">const</span> Stack = <span class="built_in">require</span>(<span class="string">'./封装一个栈'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 十进制转换二进制方法</span></span><br><span class="line"><span class="comment"> * @param &#123;Number&#125; num 要准换的十进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ten2Two</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line">  <span class="keyword">let</span> rem</span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="built_in">Math</span>.floor(num % <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    stack.push(rem)</span><br><span class="line">    num = <span class="built_in">Math</span>.floor(num / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  stack.print()</span><br><span class="line">&#125;</span><br><span class="line">Ten2Two(<span class="number">233</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈-Stack&quot;&gt;&lt;a href=&quot;#栈-Stack&quot; class=&quot;headerlink&quot; title=&quot;栈(Stack)&quot;&gt;&lt;/a&gt;栈(Stack)&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;先入后出&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://zhaozhoa.github.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="栈" scheme="https://zhaozhoa.github.com/tags/%E6%A0%88/"/>
    
  </entry>
  
</feed>
