<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>脚印</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaozhoa.github.com/"/>
  <updated>2019-03-24T11:00:22.276Z</updated>
  <id>https://zhaozhoa.github.com/</id>
  
  <author>
    <name>张朝</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存和多进程</title>
    <link href="https://zhaozhoa.github.com/2019/03/24/%E7%BC%93%E5%AD%98%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://zhaozhoa.github.com/2019/03/24/缓存和多进程/</id>
    <published>2019-03-24T10:58:01.000Z</published>
    <updated>2019-03-24T11:00:22.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存和多进程"><a href="#缓存和多进程" class="headerlink" title="缓存和多进程"></a>缓存和多进程</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="http缓存消息"><a href="#http缓存消息" class="headerlink" title="http缓存消息"></a>http缓存消息</h3><h4 id="第一次请求，无缓存，"><a href="#第一次请求，无缓存，" class="headerlink" title="第一次请求，无缓存，"></a>第一次请求，无缓存，</h4><p>服务端（S) 向 客户端 （C) 发送的http响应头部有</p><p><code>last-modified: Tue, 26 Feb 2019 10:51:39 GMT</code></p><p>告诉客户端 请求资源最后的修改日期</p><h4 id="第二次请求，有缓存"><a href="#第二次请求，有缓存" class="headerlink" title="第二次请求，有缓存"></a>第二次请求，有缓存</h4><p>C —&gt; S</p><p><code>If-Modified-Since: Tue, 26 Feb 2019 10:51:39 GMT</code> </p><p>S—-&gt; C </p><p><code>304</code>状态码</p><h3 id="node-实现缓存"><a href="#node-实现缓存" class="headerlink" title="node 实现缓存"></a>node 实现缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = url.parse(req.url)</span><br><span class="line">  <span class="comment">// console.log(pathname);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取文件修改时间</span></span><br><span class="line">  fs.stat(<span class="string">`www<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, stat) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       res.writeHead(<span class="number">404</span>)</span><br><span class="line">       res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">       res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果请求头中有 If-Modified-Since 说明不是第一次获取数据，并且在第一次获取的时候，服务器传给浏览器 Last-Modif 响应头</span></span><br><span class="line">      <span class="keyword">if</span> (req.headers[<span class="string">'if-modified-since'</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>(req.headers[<span class="string">'if-modified-since'</span>])</span><br><span class="line">        <span class="keyword">let</span> time_client = <span class="built_in">Math</span>.floor(oDate.getTime() / <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">let</span> time_server = <span class="built_in">Math</span>.floor(stat.mtime.getTime() / <span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较那个版本更新</span></span><br><span class="line">        <span class="keyword">if</span> (time_client &lt; time_server) &#123;</span><br><span class="line">          sendFileToClient()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.writeHead(<span class="number">304</span>)</span><br><span class="line">          res.write(<span class="string">'Not Modified'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sendFileToClient()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sendFileToClient</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;pathname&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">/* 添加 http 响应头，并将文件的修改世界转换成 格林威治时间 */</span></span><br><span class="line">        res.setHeader(<span class="string">'Last-Modified'</span>, stat.mtime.toGMTString())</span><br><span class="line">        rs.pipe(res)</span><br><span class="line">        rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>)</span><br><span class="line">          res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><table><thead><tr><th>多线程</th><th>性能高、复杂、编程复杂</th></tr></thead><tbody><tr><td>多进程</td><td>性能略低、简单</td></tr></tbody></table><p><strong>nodeJs 默认为 单进程、单线程</strong></p><p>但是 nodejs可以设置成多进程</p><p>多进程的优点：性能高，安全</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ol><li>普通程序不能创建进程，只有系统进程才可以创建进程</li><li>进程是分裂出来的，但是只有主进程可以分裂能力</li><li>分裂出来的进程执行同一套代码</li><li>父子进程之间可以共享’句柄‘</li></ol><h3 id="node-的多进程"><a href="#node-的多进程" class="headerlink" title="node 的多进程"></a>node 的多进程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 引入 cluster 多进程模块</span></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="comment">// cpu 为几核 几个进程可以同时工作，所以需要引入系统模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="comment">// 获取当前进程的信息模块</span></span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前是否为主进程</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; os.cpus().length; i++) &#123;</span><br><span class="line">   cluster.fork()</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'主进程'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(process.pid);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'aaaa'</span>);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器开好了，在8888上'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存和多进程&quot;&gt;&lt;a href=&quot;#缓存和多进程&quot; class=&quot;headerlink&quot; title=&quot;缓存和多进程&quot;&gt;&lt;/a&gt;缓存和多进程&lt;/h1&gt;&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="node" scheme="https://zhaozhoa.github.com/categories/node/"/>
    
    
      <category term="node" scheme="https://zhaozhoa.github.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>缓存和多进程</title>
    <link href="https://zhaozhoa.github.com/2019/03/24/%E7%BC%93%E5%AD%98%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://zhaozhoa.github.com/2019/03/24/缓存多进程/</id>
    <published>2019-03-24T10:58:01.000Z</published>
    <updated>2019-03-24T10:59:01.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存和多进程"><a href="#缓存和多进程" class="headerlink" title="缓存和多进程"></a>缓存和多进程</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="http缓存消息"><a href="#http缓存消息" class="headerlink" title="http缓存消息"></a>http缓存消息</h3><h4 id="第一次请求，无缓存，"><a href="#第一次请求，无缓存，" class="headerlink" title="第一次请求，无缓存，"></a>第一次请求，无缓存，</h4><p>服务端（S) 向 客户端 （C) 发送的http响应头部有</p><p><code>last-modified: Tue, 26 Feb 2019 10:51:39 GMT</code></p><p>告诉客户端 请求资源最后的修改日期</p><h4 id="第二次请求，有缓存"><a href="#第二次请求，有缓存" class="headerlink" title="第二次请求，有缓存"></a>第二次请求，有缓存</h4><p>C —&gt; S</p><p><code>If-Modified-Since: Tue, 26 Feb 2019 10:51:39 GMT</code> </p><p>S—-&gt; C </p><p><code>304</code>状态码</p><h3 id="node-实现缓存"><a href="#node-实现缓存" class="headerlink" title="node 实现缓存"></a>node 实现缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = url.parse(req.url)</span><br><span class="line">  <span class="comment">// console.log(pathname);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取文件修改时间</span></span><br><span class="line">  fs.stat(<span class="string">`www<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, stat) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       res.writeHead(<span class="number">404</span>)</span><br><span class="line">       res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">       res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果请求头中有 If-Modified-Since 说明不是第一次获取数据，并且在第一次获取的时候，服务器传给浏览器 Last-Modif 响应头</span></span><br><span class="line">      <span class="keyword">if</span> (req.headers[<span class="string">'if-modified-since'</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>(req.headers[<span class="string">'if-modified-since'</span>])</span><br><span class="line">        <span class="keyword">let</span> time_client = <span class="built_in">Math</span>.floor(oDate.getTime() / <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">let</span> time_server = <span class="built_in">Math</span>.floor(stat.mtime.getTime() / <span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较那个版本更新</span></span><br><span class="line">        <span class="keyword">if</span> (time_client &lt; time_server) &#123;</span><br><span class="line">          sendFileToClient()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.writeHead(<span class="number">304</span>)</span><br><span class="line">          res.write(<span class="string">'Not Modified'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sendFileToClient()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sendFileToClient</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;pathname&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">/* 添加 http 响应头，并将文件的修改世界转换成 格林威治时间 */</span></span><br><span class="line">        res.setHeader(<span class="string">'Last-Modified'</span>, stat.mtime.toGMTString())</span><br><span class="line">        rs.pipe(res)</span><br><span class="line">        rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>)</span><br><span class="line">          res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><table><thead><tr><th>多线程</th><th>性能高、复杂、编程复杂</th></tr></thead><tbody><tr><td>多进程</td><td>性能略低、简单</td></tr></tbody></table><p><strong>nodeJs 默认为 单进程、单线程</strong></p><p>但是 nodejs可以设置成多进程</p><p>多进程的优点：性能高，安全</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ol><li>普通程序不能创建进程，只有系统进程才可以创建进程</li><li>进程是分裂出来的，但是只有主进程可以分裂能力</li><li>分裂出来的进程执行同一套代码</li><li>父子进程之间可以共享’句柄‘</li></ol><h3 id="node-的多进程"><a href="#node-的多进程" class="headerlink" title="node 的多进程"></a>node 的多进程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 引入 cluster 多进程模块</span></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="comment">// cpu 为几核 几个进程可以同时工作，所以需要引入系统模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="comment">// 获取当前进程的信息模块</span></span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前是否为主进程</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; os.cpus().length; i++) &#123;</span><br><span class="line">   cluster.fork()</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'主进程'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(process.pid);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'aaaa'</span>);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器开好了，在8888上'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存和多进程&quot;&gt;&lt;a href=&quot;#缓存和多进程&quot; class=&quot;headerlink&quot; title=&quot;缓存和多进程&quot;&gt;&lt;/a&gt;缓存和多进程&lt;/h1&gt;&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>流与压缩</title>
    <link href="https://zhaozhoa.github.com/2019/03/23/%E6%B5%81%E4%B8%8E%E5%8E%8B%E7%BC%A9/"/>
    <id>https://zhaozhoa.github.com/2019/03/23/流与压缩/</id>
    <published>2019-03-23T12:47:42.000Z</published>
    <updated>2019-03-23T12:48:47.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>作用：边读取，边转发，减少内存存储压力</p><p>分类</p><table><thead><tr><th>流方式</th><th>常见的流</th></tr></thead><tbody><tr><td>读取流</td><td>req, fs.createReadStream</td></tr><tr><td>写入流</td><td>res, fs.createWriteStream</td></tr><tr><td>读写流</td><td>压缩，加密</td></tr></tbody></table><h2 id="流操作的基本过程"><a href="#流操作的基本过程" class="headerlink" title="流操作的基本过程"></a>流操作的基本过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//建立一个读取流，读取 1.txt 文件</span></span><br><span class="line"><span class="keyword">let</span> rs = createReadStream(<span class="string">'1.text'</span>)</span><br><span class="line"><span class="comment">//建立写入流写的文件 命名为 2.txt</span></span><br><span class="line"><span class="keyword">let</span> ws = createWriteStream(<span class="string">'2.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对接</span></span><br><span class="line">rs.pipe（ws)</span><br></pre></td></tr></table></figure><p>这样就可以将 1.txt 文件 一边读取，一边写入到 2.txt 文件中</p><p><strong>注意：</strong>流是有方向的，只能从读取流入写入</p><h2 id="流操作再node中的应用"><a href="#流操作再node中的应用" class="headerlink" title="流操作再node中的应用"></a>流操作再node中的应用</h2><h3 id="文件读取和写入的应用"><a href="#文件读取和写入的应用" class="headerlink" title="文件读取和写入的应用"></a>文件读取和写入的应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;req.url&#125;</span>`</span>)</span><br><span class="line">  rs.pipe(res)</span><br><span class="line">  </span><br><span class="line">  rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">404</span>)</span><br><span class="line">    res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h3 id="双向流–-压缩文件"><a href="#双向流–-压缩文件" class="headerlink" title="双向流– 压缩文件"></a>双向流– 压缩文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入压缩模块</span></span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rs = fs.createReadStream(<span class="string">'jquery.js'</span>)</span><br><span class="line"><span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">'jquery.js.gz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建压缩对象</span></span><br><span class="line"><span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向流绑定</span></span><br><span class="line">rs.pipe(gz).pipe(ws)</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="综合–将文件用node-压缩然后返回给浏览器"><a href="#综合–将文件用node-压缩然后返回给浏览器" class="headerlink" title="综合–将文件用node 压缩然后返回给浏览器"></a>综合–将文件用node 压缩然后返回给浏览器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;req.url&#125;</span>`</span>)</span><br><span class="line">  </span><br><span class="line">  res.setHeader(<span class="string">'content-encoding'</span>, <span class="string">'gzip'</span>)</span><br><span class="line">  <span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line">  rs.pipe(gz).pipe(res)</span><br><span class="line">  rs.on(<span class="string">'error'</span>, () =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">404</span>)</span><br><span class="line">    res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>因为返回给浏览器的是压缩文件，所以应该设置响应头为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&apos;content-encoding&apos;, &apos;gzip&apos;)</span><br></pre></td></tr></table></figure><p>否则浏览器不会解析压缩文件，而回将其下载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h1&gt;&lt;p&gt;作用：边读取，边转发，减少内存存储压力&lt;/p&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;流方式&lt;/th&gt;
&lt;th&gt;常见
      
    
    </summary>
    
      <category term="node" scheme="https://zhaozhoa.github.com/categories/node/"/>
    
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://zhaozhoa.github.com/2019/03/23/%E7%BB%A7%E6%89%BF/"/>
    <id>https://zhaozhoa.github.com/2019/03/23/继承/</id>
    <published>2019-03-23T02:43:35.000Z</published>
    <updated>2019-03-23T03:15:54.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p> 继承是类(class) 与(class) 之间的关系（父级别和子级别的关系），js 中没有类，但可以通过构造函数模拟类，然后通过原型来实现继承。</p><p>继承也是为了数据共享。</p><p>原型的作用：</p><ol><li>共享数据，节省内存空间</li><li>实现继承</li></ol><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>通过改变原型链实现继承</p><p>缺陷： 在原型链改变的时候会进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name, weight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.weight = weight</span><br><span class="line">  &#125;</span><br><span class="line">  Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line">  Dog.prototype = <span class="keyword">new</span> Animal(<span class="string">'哮天犬'</span>, <span class="string">'50kg'</span>)</span><br><span class="line">  Dog.prototype.bite = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>咬人`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ErHa</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line">  ErHa.prototype = <span class="keyword">new</span> Dog(<span class="string">'黑白色'</span>)</span><br><span class="line">  ErHa.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>体重为<span class="subst">$&#123;<span class="keyword">this</span>.weight&#125;</span>性别为：<span class="subst">$&#123;<span class="keyword">this</span>.gender&#125;</span>颜色为 <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> erHa = <span class="keyword">new</span> ErHa(<span class="string">'母'</span>)</span><br><span class="line">  erHa.eat()</span><br><span class="line">  erHa.bite()</span><br><span class="line">  erHa.play()</span><br></pre></td></tr></table></figure><h2 id="借用构造函数实现继承"><a href="#借用构造函数实现继承" class="headerlink" title="借用构造函数实现继承"></a>借用构造函数实现继承</h2><p>方法：通过<code>构造函数名.call(当前对象，属性1，属性2)</code></p><p>解决了属性的继承，并且只不重复</p><p>缺陷： 父级别的累中的方法不能继承</p><p>如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender, weight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">    <span class="keyword">this</span>.weight = weight</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, gender, weight, score</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 借用构造函数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>,name, age, gender, weight)</span><br><span class="line">    <span class="keyword">this</span>.score = score</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'小明'</span>, <span class="number">10</span>, <span class="string">'男'</span>, <span class="string">'30kg'</span>, <span class="number">100</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu1.name, stu1.age, stu1.gender, stu1.weight,stu1.score);</span><br><span class="line">  <span class="comment">//小明 10 男 30kg 100</span></span><br><span class="line">  stu1.sayHi() <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'小红'</span>, <span class="number">12</span>, <span class="string">'女'</span>, <span class="string">'30kg'</span>, <span class="number">80</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu2.name, stu2.age, stu2.gender, stu2.weight,stu2.score);</span><br><span class="line">  <span class="comment">//小红 12 女 30kg 80</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu3 = <span class="keyword">new</span> Student(<span class="string">'小刚'</span>, <span class="number">10</span>, <span class="string">'男'</span>, <span class="string">'20kg'</span>, <span class="number">110</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu3.name, stu3.age, stu3.gender, stu3.weight,stu3.score);</span><br><span class="line">  <span class="comment">//小刚 10 男 20kg 110</span></span><br></pre></td></tr></table></figure><p>上面的 stu1 、stu2、stu3 都继承了 Persong 的属性，但没有继承方法</p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p><strong>组合继承 = 原型继承 + 借用构造函数继承</strong></p><ol><li>通过原型继承方法；</li><li>通过借用构造函数继承属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, gender, score</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//借用构造函数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age, gender)</span><br><span class="line">    <span class="keyword">this</span>.score = score</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 改变原型链指向</span></span><br><span class="line">  Student.prototype = <span class="keyword">new</span> Person()<span class="comment">//不用传参</span></span><br><span class="line">  Student.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'小明'</span>, <span class="number">18</span>, <span class="string">'男'</span>, <span class="number">100</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu.name, stu.age, stu.gender, stu.score);<span class="comment">//小明 18 男 100</span></span><br><span class="line">  stu.eat() <span class="comment">//吃吃</span></span><br><span class="line">  stu.sayHi()<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'小红'</span>, <span class="number">12</span>, <span class="string">'女'</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stu2.name, stu2.age, stu2.gender, stu2.score);<span class="comment">//小红 12 女 100</span></span><br><span class="line">stu2.eat() <span class="comment">//吃吃</span></span><br><span class="line">stu2.sayHi()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><p>把一个对象的属性或者方法直接拷贝到另一个对象中</p><p>拷贝一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">   name: <span class="string">'小明'</span>,</span><br><span class="line">   age: <span class="number">13</span>,</span><br><span class="line">   sleep: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// var obj2 = obj1;(只拷贝了对象的地址，没有拷贝内容)</span></span><br><span class="line"> <span class="comment">//手动拷贝</span></span><br><span class="line"> <span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">   obj2[key] = obj1[key]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>用拷贝实现继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Person.prototype.age = <span class="number">10</span>;</span><br><span class="line">  Person.prototype.gender = <span class="string">'男'</span></span><br><span class="line">  Person.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'玩'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">    obj[key] = Person.prototype[key]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Person 的构造函数中有的 prototype 本来就是一个对象，age、gender、play 都是该对象的属性或方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;继承：&quot;&gt;&lt;a href=&quot;#继承：&quot; class=&quot;headerlink&quot; title=&quot;继承：&quot;&gt;&lt;/a&gt;继承：&lt;/h3&gt;&lt;p
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="原型，继承" scheme="https://zhaozhoa.github.com/tags/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>原型及原型链</title>
    <link href="https://zhaozhoa.github.com/2019/03/23/%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://zhaozhoa.github.com/2019/03/23/原型及原型链/</id>
    <published>2019-03-23T02:37:03.000Z</published>
    <updated>2019-03-23T02:39:47.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型及原型链"><a href="#原型及原型链" class="headerlink" title="原型及原型链"></a>原型及原型链</h1><h2 id="new-的作用"><a href="#new-的作用" class="headerlink" title="new 的作用"></a>new 的作用</h2><ol><li>创建一个新对象；</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个对象）；</li><li>执行构造函数中的代码（为这个新对象添加属性）；</li><li>返回新对象。</li></ol><p>选自： <em>《JavaScript高级程序设计（第三版）》P145</em></p><h2 id="原型的作用"><a href="#原型的作用" class="headerlink" title="原型的作用"></a>原型的作用</h2><h3 id="原型对象和原型"><a href="#原型对象和原型" class="headerlink" title="原型对象和原型"></a>原型对象和原型</h3><p><strong>原型对象</strong></p><p>每一个构造函数都有原型对象 prototype 属性</p><p><strong>原型</strong></p><p>每一个实例对象都有一个原型 __proto__ 属性</p><h3 id="共享内存，节省内存空间"><a href="#共享内存，节省内存空间" class="headerlink" title="共享内存，节省内存空间"></a>共享内存，节省内存空间</h3><p><strong>案例一</strong>  没有使用原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, 我的年龄是<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实例对象</span></span><br><span class="line">  <span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Person(<span class="string">'小明'</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Person(<span class="string">'小红'</span>, <span class="number">15</span>)</span><br><span class="line">  xiaoming.sayHi() <span class="comment">//我叫小明, 我的年龄是20</span></span><br><span class="line">  xiaohong.sayHi() <span class="comment">//我叫小红, 我的年龄是15</span></span><br><span class="line">  <span class="built_in">console</span>.log(xiaoming.sayHi === xiaohong.sayHi) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>当执行 最后一句时结果为 false 说明所执行的函数不是同一个函数，并没有数据共享</p><p>原因：当 new 的时候 会把这个 sayHi 方法添加到实例对象申请的空间中，所以有多少实例对象就有多少 sayHi 方法</p><p><strong>案例二</strong>   使用原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, 我的年龄是<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Person(<span class="string">'小明'</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Person(<span class="string">'小红'</span>, <span class="number">15</span>)</span><br><span class="line">  xiaoming.sayHi() <span class="comment">//我叫小明, 我的年龄是20</span></span><br><span class="line">  xiaohong.sayHi() <span class="comment">//我叫小红, 我的年龄是15</span></span><br><span class="line">  <span class="built_in">console</span>.log(xiaoming.sayHi === xiaohong.sayHi);<span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(xiaohong.__proto__ === Person.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>此时执行最后一句话时，结果为 true 说明执行的时同一个函数，实现了数据共享</p><p>原因：</p><ol><li><code>实例对象的原型 __proto__ 和 构造函数的原型对象 prototype 是相同的（__proto__指向 prototype）</code></li><li><code>实例对象可以访问构造函数的原型（prototype）</code></li></ol><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><strong>原型链指的是 实例对象 和 原型对象（prototype）之间的关系，这种关系是通过原型（__proto__)联系的</strong></p><h3 id="原型链的改变"><a href="#原型链的改变" class="headerlink" title="原型链的改变"></a>原型链的改变</h3><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 人的原型对象的方法</span></span><br><span class="line">  Person.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'人的吃方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 狗的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 狗的原型对象的方法</span></span><br><span class="line">  Dog.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'汪汪'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Dog.prototype = <span class="keyword">new</span> Person(<span class="number">20</span>)</span><br><span class="line">  <span class="keyword">var</span> bigDog = <span class="keyword">new</span> Dog()</span><br><span class="line">  bigDog.eat() <span class="comment">//人的吃方法</span></span><br><span class="line">  bigDog.sayHi() <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog.prototype = <span class="keyword">new</span> Person(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><strong>Dog 的原型对象的  替换成 new Person 这个实例对象</strong></p><p>上面的代码 使 Dog  的原型对象指向了 new Person（）的原型，同时 又因为 Dog 的实例对象 bigDog 的原型（__proto__)指向的是 Dog 的原型对象（prototype），所以也就跟着改变了其指向，指向了new Pers（）的原型</p><p><strong>总结</strong></p><ul><li>实例对象的原型__proto__指向的是该对象所在的构造函数的原型对象</li><li>构造函数的原型对象（prototype）指向如果改变，实例对象的原型__proto__也会发生改变</li></ul><h3 id="原型链的最终指向"><a href="#原型链的最终指向" class="headerlink" title="原型链的最终指向"></a>原型链的最终指向</h3><ul><li>实例对象中有__proto__原型</li><li>构造函数中有 prototype 原型对象</li><li>原型对象 prototype 中应该也有 __proto__ 原型，指向什么地方？</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  Person.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'人的吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例对象</span></span><br><span class="line">  <span class="keyword">var</span> per = <span class="keyword">new</span> Person()</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(per.__proto__ === Person.prototype); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(per.__proto__.__proto__ === Person.prototype.__proto__); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype);  <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__); <span class="comment">//null</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><ul><li>Object 是一个构造函数，有自己的原型对象（prototype）</li><li>每一个原型对象都有自己的原型__proto__， Object 的原型对象也不例外</li><li>构造函数的原型对象的原型指向 Object 的原型对象（上面的倒数第二句可知）</li><li>Object 的原型对象的原型为null（上面的倒数第一句可知）</li></ul><h3 id="原型指向改变如何添加方法和访问"><a href="#原型指向改变如何添加方法和访问" class="headerlink" title="原型指向改变如何添加方法和访问"></a>原型指向改变如何添加方法和访问</h3><p>原型对象改变前添加的方法，会在原型改变后失去，所以如果原型对象改变，应该先改变原型对象，再添加方法否则会出现<strong>原型链的改变</strong>中最后一句报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型及原型链&quot;&gt;&lt;a href=&quot;#原型及原型链&quot; class=&quot;headerlink&quot; title=&quot;原型及原型链&quot;&gt;&lt;/a&gt;原型及原型链&lt;/h1&gt;&lt;h2 id=&quot;new-的作用&quot;&gt;&lt;a href=&quot;#new-的作用&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="原型" scheme="https://zhaozhoa.github.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据通信</title>
    <link href="https://zhaozhoa.github.com/2019/03/20/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/"/>
    <id>https://zhaozhoa.github.com/2019/03/20/数据通信/</id>
    <published>2019-03-20T00:41:08.000Z</published>
    <updated>2019-03-21T11:10:22.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h1><h2 id="常见的通信方式"><a href="#常见的通信方式" class="headerlink" title="常见的通信方式"></a>常见的通信方式</h2><table><thead><tr><th>通信方式</th><th>特点</th></tr></thead><tbody><tr><td>表单</td><td>最基本，最简单</td></tr><tr><td>Ajax</td><td>不用全页面刷新，可跨域</td></tr><tr><td>jsonp</td><td>跨越，不安全</td></tr><tr><td>Websocket</td><td>高性能（快），全双工通信，直接跨越</td></tr></tbody></table><p><strong>跨域</strong>：请求不同域名或端口或协议的资源</p><h2 id="Ajax封装（仿jQuery）"><a href="#Ajax封装（仿jQuery）" class="headerlink" title="Ajax封装（仿jQuery）"></a>Ajax封装（仿jQuery）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  options.type = options.type || <span class="string">'get'</span>;</span><br><span class="line">  options.data = options.data || &#123;&#125;</span><br><span class="line">  options.dataType = options.dataType || <span class="string">'text'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//将 data里面以对象形式传入的值 解析成 a=b&amp;b=c 形式</span></span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> options.data) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(name)&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(options.data[name])&#125;</span>`</span></span><br><span class="line">    arr.push(str)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> strData = arr.join(<span class="string">'&amp;'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (options.type == <span class="string">'post'</span>) &#123;</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>,options.url, <span class="literal">true</span>)</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"></span><br><span class="line">    xhr.send(strData)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + strData ,<span class="literal">true</span>)</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = xhr.responseText</span><br><span class="line">        <span class="keyword">switch</span> (options.dataType) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'json'</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">JSON</span>.parse) &#123;</span><br><span class="line">              data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              data = <span class="built_in">eval</span>(<span class="string">'('</span>+data+<span class="string">')'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'xml'</span>:</span><br><span class="line">            data = xhr.responseXML</span><br><span class="line">        &#125;</span><br><span class="line">        options.success &amp;&amp; options.success(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      options.error &amp;&amp; options.error()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据通信&quot;&gt;&lt;a href=&quot;#数据通信&quot; class=&quot;headerlink&quot; title=&quot;数据通信&quot;&gt;&lt;/a&gt;数据通信&lt;/h1&gt;&lt;h2 id=&quot;常见的通信方式&quot;&gt;&lt;a href=&quot;#常见的通信方式&quot; class=&quot;headerlink&quot; title=&quot;常见的
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="总结" scheme="https://zhaozhoa.github.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://zhaozhoa.github.com/2019/03/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>https://zhaozhoa.github.com/2019/03/12/计算机组成原理/</id>
    <published>2019-03-12T12:45:05.000Z</published>
    <updated>2019-03-12T12:46:10.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h1><h2 id="原码、反码、补码、移码"><a href="#原码、反码、补码、移码" class="headerlink" title="原码、反码、补码、移码"></a>原码、反码、补码、移码</h2><table><thead><tr><th></th><th>数字   1</th><th>数字  -1</th><th>1 - 1</th></tr></thead><tbody><tr><td>原码</td><td>0000  0001</td><td>1000  0001</td><td>1000  0010</td></tr><tr><td>反码</td><td>0000  0001</td><td>1111  1110</td><td>1111  1111</td></tr><tr><td>补码</td><td>0000  0001</td><td>1111  1111</td><td>0000  0000</td></tr><tr><td>移码</td><td>1000  0001</td><td>0111  1111</td><td>1000  0000</td></tr></tbody></table><p>总结：</p><ul><li>正数的 原码、反码、补码都是其二进制数</li><li>负数的 反码是除符号位，其他的都按位取反。</li><li>负数的补码是给他的反码 +1。</li><li>移码是补码的符号位取反。</li></ul><h3 id="表示范围"><a href="#表示范围" class="headerlink" title="表示范围"></a>表示范围</h3><table><thead><tr><th></th><th>范围</th></tr></thead><tbody><tr><td>原码</td><td>-（2^n-1^  - 1)  ~ 2^n-1^  - 1</td></tr><tr><td>反码</td><td>-（2^n-1^  - 1)  ~ 2^n-1^  - 1</td></tr><tr><td>补码</td><td>- 2^n-1^  ~ 2^n-1^ - 1</td></tr></tbody></table><blockquote><p>因为 0 的补码的正负都相同，所以范围比原码和反码大 1</p></blockquote><h3 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h3><p>N = M * R^e^</p><p>位数：M</p><p>基数：R</p><p>指数：e</p><h1 id="CPU-的结构"><a href="#CPU-的结构" class="headerlink" title="CPU 的结构"></a>CPU 的结构</h1><p>CPU由 <code>运算器</code>和 <code>控制器</code>组成</p><h2 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h2><ul><li>算术逻辑单元ALU</li><li>累加寄存器 AC</li><li>数据缓冲寄存器 DR</li><li>状态条件寄存器 PSW</li></ul><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><ul><li>程序计数器PC</li><li>指令寄存器 IR</li><li>指令译码器</li><li>时序部件</li></ul><h1 id="计算机体系结构的分类-–-Flynn"><a href="#计算机体系结构的分类-–-Flynn" class="headerlink" title="计算机体系结构的分类 – Flynn"></a>计算机体系结构的分类 – Flynn</h1><table><thead><tr><th>体系结构类型</th><th>结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td>单指令流单数据流SISD</td><td>控制部分：一个   处理器：一个   主存储模块： 一个</td><td></td><td>但处理系统</td></tr><tr><td>单指令流多数据流SIMD</td><td>控制部分：一个   处理器：多个   主存储模块： 多个</td><td>各种处理器以异步形式执行同一天指令</td><td>并列处理机，<code>阵列处理机</code>，超级向量处理机</td></tr><tr><td>多指令流单数据流MISD</td><td>控制部分：多个   处理器：一个   主存储模块： 多个</td><td>不存在</td><td>目前不存在</td></tr><tr><td>多指令流多数据流MIMD</td><td>控制部分：多个   处理器：多个   主存储模块： 多个</td><td>能够实现作业、任务、指令等各级全面并行</td><td>多处理机系统，多计算机</td></tr></tbody></table><h1 id="CISC-与-RISC"><a href="#CISC-与-RISC" class="headerlink" title="CISC 与 RISC"></a>CISC 与 RISC</h1><table><thead><tr><th>指令系统类型</th><th>指令</th><th>寻址方式</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC（复杂）</td><td>数量多，使用频率差别大可变长格式</td><td>支持多种</td><td>微程序控制技术（微码）</td><td>研制周期长</td></tr><tr><td>RISC（精简）</td><td>数量少，使用频率接近，定长格式，大部分为单调指令，操作寄存器，只有Load/Store操作内存</td><td>支持方式少</td><td>增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><h1 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h1><blockquote><p>流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术,各种部件同时处理是针对不同指令而言的,他们可同时为多条指令的不同部分进行工作,以提高各部件的利用率和指令的平均执行速度.</p></blockquote><h2 id="流水线的时间计算"><a href="#流水线的时间计算" class="headerlink" title="流水线的时间计算"></a>流水线的时间计算</h2><ul><li>流水线的周期为执行时间最长的一段</li><li>n条指令执行的理论时间<ul><li>一条指令执行的时间（每一部分的时间和） + （指令数 - 1）* 流水线周期</li></ul></li><li>n条指令执行的实践时间<ul><li>流水线周期 * （指令的部分数 + 指令数 - 1）</li><li>在实践计算的时候，将第一条指令执行的时间看作周期 * 指令部分数</li></ul></li><li>考试以理论结果优先</li></ul><p>例题：</p><blockquote><p>若指令流水线把一条指令分为取址、分析、执行三部分，且三部分的时间分别为：2ns、2ns、1ns、那么流水线的周期是多少？100条指令全部执行完需要多少时间？</p></blockquote><p>解答：</p><blockquote><p>周期为 2ns，</p><p>理论执行时间 （2 +2 + 1) +  (100 - 1) * 2 = 203ns </p><p>实践执行时间  （3 + 100 - 1） * 2 = 204ns</p></blockquote><h2 id="流水线的吞吐率计算"><a href="#流水线的吞吐率计算" class="headerlink" title="流水线的吞吐率计算"></a>流水线的吞吐率计算</h2><blockquote><p>流水线的吞吐率（TP) 是指单位时间内流水线所完成的任务数量或输出的结果数量。</p></blockquote><p><code>TP = 指令条数 / 流水线执行时间</code></p><p>流水线最大吞吐率为 ：<code>1 / 周期</code></p><h2 id="流水线的加速比"><a href="#流水线的加速比" class="headerlink" title="流水线的加速比"></a>流水线的加速比</h2><p>定义：</p><blockquote><p>完成同一任务，不使用流水线的时间与使用流水线的时间之比</p></blockquote><p><code>s = 不使用流水线的时间 / 使用流水线的时间</code></p><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><h2 id="层次化的存储结构"><a href="#层次化的存储结构" class="headerlink" title="层次化的存储结构"></a>层次化的存储结构</h2><p>从外存、内存、cache、寄存器，速度越来越高，容量越来越小。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p><strong>Cache的功能</strong>：提高 CPU 数据输入输出的速率，突破 CPU 与存储系统间数据传送带宽限制。</p><ul><li>Cache 是计算机存储系统中访问最快的层次</li><li>使用 Cache 改善系统性能的依据是程序的局部性原理</li></ul><h3 id="使用-Cache-主存储器的系统的平均周期"><a href="#使用-Cache-主存储器的系统的平均周期" class="headerlink" title="使用 Cache + 主存储器的系统的平均周期"></a>使用 Cache + 主存储器的系统的平均周期</h3><p><code>t = h * t1 + (1-h) * t2</code></p><ul><li>h ：CPU对 Cache 的访问命中率，</li><li>t1：Cache 的周期时间</li><li>t2：主存储器的周期时间</li></ul><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><ul><li><p>时间局部性</p><p>对刚刚访问的程序再进行访问，如循环体程序，这时就将这些都放入 Cache 中</p></li><li><p>空间局部性</p><p>对相邻的地址依次访问，如变量数组，也会将其放入 Cache 中</p></li><li><p>工作集理论：工作集是进程运行时被频繁访问的页码集合</p></li></ul><h2 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>只读存储器（ROM）</p><p>断电存储内容不消失</p></li><li><p>随机存储器（RAM）</p><p>断电存储内容消失</p></li></ol><h3 id="编址"><a href="#编址" class="headerlink" title="编址"></a>编址</h3><p>例题：</p><blockquote><p>内存地址从AC000H到C7FFFH,共有（）KB个地址单元，如果该内存地址按字（16bit）编址，由28块芯片构成。已知构成此内存的芯片每片有16KB个存储单元，则该芯片每个存储单元存储（）位</p></blockquote><p>解答：</p><blockquote><p>将内存大地址减去小地址再加1就是内存地址，即C7FFFH-AC000H+1=1C000H(给7加的是16，因为是16进制)，</p><p>十六进制（1C000）16=2^16+2^15+2^14=64K+32K+16K=112K.</p><p>注意此处按字编址。需要构成的内存为112K16b,使用28块芯片构成该内存，则每个芯片的容量应为4K16B。已知构成此内存的芯片每片有16K个存储单元，因此该芯片每个存储单元存储4位二进制</p></blockquote><h2 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h2><p><code>存取时间 = 寻道时间 + 等待时间</code></p><ul><li>寻道时间： 磁头移动到磁道所需要的时间</li><li>等待时间： 等待要读写的扇区转动到磁头下面的时间</li></ul><h1 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h1><ul><li>内部总线（芯片级别）</li><li>系统总线（线路板级别）<ul><li>数据总线</li><li>地址总线</li><li>控制总线</li></ul></li><li>外部总线（外设级别）</li></ul><h1 id="可靠性分析"><a href="#可靠性分析" class="headerlink" title="可靠性分析"></a>可靠性分析</h1><h2 id="串联系统和并联系统"><a href="#串联系统和并联系统" class="headerlink" title="串联系统和并联系统"></a>串联系统和并联系统</h2><h3 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h3><p>可靠度：R = R1 <em> R2 </em>R3 <em> …  </em> Rn</p><p>失效度： S = S1 + S2 + S3 + … + Sn</p><h3 id="并联"><a href="#并联" class="headerlink" title="并联"></a>并联</h3><p>可靠度： R = 1 - (1 - R1) <em> (1 - R2) </em>  …  * (1 - Rn)</p><p>失效度：S = 1 - R</p><h1 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h1><h2 id="循环校验码-CRC"><a href="#循环校验码-CRC" class="headerlink" title="循环校验码 CRC"></a>循环校验码 CRC</h2><ul><li>可以检错，不能纠错</li></ul><p><code>重点</code></p><p><img src="E:\笔记\软考\计算机组成原理\图片库\crc" alt="&quot;crc校验&quot;的图片搜索结果"></p><h2 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h2><ul><li>既可以检错，又可以纠错</li></ul><p><code>重点</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的表示&quot;&gt;&lt;a href=&quot;#数据的表示&quot; class=&quot;headerlink&quot; title=&quot;数据的表示&quot;&gt;&lt;/a&gt;数据的表示&lt;/h1&gt;&lt;h2 id=&quot;原码、反码、补码、移码&quot;&gt;&lt;a href=&quot;#原码、反码、补码、移码&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="软考" scheme="https://zhaozhoa.github.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    
      <category term="复习" scheme="https://zhaozhoa.github.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>移动端轮播图</title>
    <link href="https://zhaozhoa.github.com/2019/03/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>https://zhaozhoa.github.com/2019/03/08/移动端轮播图/</id>
    <published>2019-03-08T10:28:59.000Z</published>
    <updated>2019-03-08T10:31:10.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li>自动轮播且无缝</li><li>点要随着图片的轮播而同步改变</li><li>图片的轮播可以随手指的滑动而改变</li><li>手指滑动距离小于屏幕的 1/3 吸附回去</li><li>手指滑动距离大于屏幕的 1/3 切换下一张或上一张图片</li></ol><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p><strong>注意：</strong></p><p>第一张图片之前重复最后一张，最后一种之后重复第一张</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jd_banner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearFix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> banner = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 获取元素 */</span></span><br><span class="line">  <span class="keyword">let</span> banner = <span class="built_in">document</span>.querySelector(<span class="string">'.jd_banner'</span>)</span><br><span class="line">  <span class="keyword">let</span> width = banner.offsetWidth</span><br><span class="line">  <span class="keyword">let</span> imageBox = banner.querySelector(<span class="string">'ul:first-child'</span>)</span><br><span class="line">  <span class="keyword">let</span> pointBox = banner.querySelector(<span class="string">'ul:last-child'</span>)</span><br><span class="line">  <span class="keyword">let</span> points = pointBox.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> addTransition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imageBox.style.transition = <span class="string">'all 0.2s'</span></span><br><span class="line">    imageBox.style.webkitTransition = <span class="string">'all 0.2s'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> removeTransition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imageBox.style.transition = <span class="string">'none'</span></span><br><span class="line">    imageBox.style.webkitTransition = <span class="string">'none'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> setTranslateX = <span class="function"><span class="keyword">function</span> (<span class="params">translateX</span>) </span>&#123;</span><br><span class="line">    imageBox.style.transform = <span class="string">'translateX('</span> + translateX + <span class="string">'px)'</span></span><br><span class="line">    imageBox.style.webkitTransform = <span class="string">'translateX('</span> + translateX + <span class="string">'px)'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    index++</span><br><span class="line">    addTransition()</span><br><span class="line">    setTranslateX(-index * width)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 判断是否要移动到第一张 */</span></span><br><span class="line">  imageBox.addEventListener(<span class="string">'transitionend'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">      index = <span class="number">1</span></span><br><span class="line">      <span class="comment">/* 清除过渡 */</span></span><br><span class="line">      removeTransition()</span><br><span class="line">      <span class="comment">/* 移动 */</span></span><br><span class="line">      setTranslateX(-index * width)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      index = <span class="number">8</span>;</span><br><span class="line">      removeTransition()</span><br><span class="line">      setTranslateX(-index * width)</span><br><span class="line">    &#125;</span><br><span class="line">    setPoint()</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 焦点移动方法 */</span></span><br><span class="line">  <span class="keyword">let</span> setPoint = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 伪数组转换成真数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(points)</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">      item.classList.remove(<span class="string">'now'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    points[index - <span class="number">1</span>].classList.add(<span class="string">'now'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 手指触摸移动事件 ---》元素随手中移动距离的改变而改变 */</span></span><br><span class="line">  <span class="keyword">let</span> startX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> distanceX = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> isMove = <span class="literal">false</span></span><br><span class="line">  imageBox.addEventListener(<span class="string">'touchstart'</span>, (e)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 清除定时器</span></span><br><span class="line">    clearInterval(timer)</span><br><span class="line">    <span class="comment">// 记录触摸点的 X 坐标</span></span><br><span class="line">    startX = e.touches[<span class="number">0</span>].clientX;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  imageBox.addEventListener(<span class="string">'touchmove'</span>, (e)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 记录滑动中的 X 坐标</span></span><br><span class="line">    <span class="keyword">let</span> moveX = e.touches[<span class="number">0</span>].clientX</span><br><span class="line">    <span class="comment">// 计算滑动距离</span></span><br><span class="line">    distanceX = moveX - startX;</span><br><span class="line">    <span class="comment">// 元素移动的距离 = 当前的位置 + 滑动的距离</span></span><br><span class="line">    <span class="keyword">let</span> translateX = -index * width + distanceX</span><br><span class="line">    <span class="comment">// 元素在跟随手指移动是不需要原来的动画过渡</span></span><br><span class="line">    removeTransition()</span><br><span class="line">    setTranslateX(translateX)</span><br><span class="line">    isMove = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  imageBox.addEventListener(<span class="string">'touchend'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="comment">/* 用滑动的距离是否小于 1/3 来判断是否切换图片 */</span></span><br><span class="line">    <span class="keyword">if</span> (isMove) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(distanceX) &lt; width / <span class="number">3</span>) &#123;</span><br><span class="line">        addTransition()</span><br><span class="line">        setTranslateX(-index * width)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 右滑动，切换上一张</span></span><br><span class="line">        <span class="keyword">if</span> (distanceX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          index--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          index++</span><br><span class="line">        &#125;</span><br><span class="line">        addTransition()</span><br><span class="line">        setTranslateX(-index * width)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 重置参数 */</span></span><br><span class="line">    startX = <span class="number">0</span></span><br><span class="line">    distanceX = <span class="number">0</span></span><br><span class="line">    isMove = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开启定时器 */</span></span><br><span class="line">    clearInterval(timer)</span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      index++</span><br><span class="line">      addTransition()</span><br><span class="line">      setTranslateX(-index * width)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要求&quot;&gt;&lt;a href=&quot;#要求&quot; class=&quot;headerlink&quot; title=&quot;要求&quot;&gt;&lt;/a&gt;要求&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自动轮播且无缝&lt;/li&gt;
&lt;li&gt;点要随着图片的轮播而同步改变&lt;/li&gt;
&lt;li&gt;图片的轮播可以随手指的滑动而改变&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="移动端" scheme="https://zhaozhoa.github.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="轮播图" scheme="https://zhaozhoa.github.com/tags/%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap 常见组件</title>
    <link href="https://zhaozhoa.github.com/2019/03/06/bootstrap%E5%B8%B8%E8%A7%81%E7%BB%84%E5%BB%BA/"/>
    <id>https://zhaozhoa.github.com/2019/03/06/bootstrap常见组建/</id>
    <published>2019-03-06T03:30:20.000Z</published>
    <updated>2019-03-06T03:41:12.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><h2 id="container-容器"><a href="#container-容器" class="headerlink" title=".container 容器"></a>.container 容器</h2><p>响应式布局容器</p><p><strong>用法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">'container'</span>&gt;</span></span><br><span class="line">    响应式内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.container 容器默认有 15px 的左右内间距</p><h2 id="栅格系统-1"><a href="#栅格系统-1" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>栅格系统就是行列布局</p><h3 id="行：-row"><a href="#行：-row" class="headerlink" title="行： row"></a>行： row</h3><p>.row 可以填充 .container 的 15px 的内边距，因为设置了 <code>margin-left，margin-right = 15px</code> 用来填充 .container 容器的内边距</p><h3 id="列-col"><a href="#列-col" class="headerlink" title="列 : col"></a>列 : col</h3><p>使用样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">col-参数1-参数2</span><br></pre></td></tr></table></figure><p><strong>参数1：</strong></p><table><thead><tr><th>参数值</th><th>作用范围</th></tr></thead><tbody><tr><td>lg</td><td>大屏以上设备生效</td></tr><tr><td>md</td><td>中屏以上设备生效</td></tr><tr><td>sm</td><td>小屏以上设备生效</td></tr><tr><td>xs</td><td>超小屏以上设备生效</td></tr></tbody></table><p><strong>参数2：</strong></p><p>每一行的等分数，默认 12 等分，是几就占几份（取值 1–12）</p><p><strong>列子</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: hotpink;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.row</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        background: pink;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.row</span> &gt; <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 25px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><p>col-参数1-offset-参数2</p><p>栅格向右偏移 多少份（ 参数和上面相同）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">'col-xm-6 col-xm-offset-1'</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h4><ul><li>col-参数1-push-参数2  向右移动</li><li>col-参数1-pull-参数2  向左移动</li></ul><h1 id="导航条（navBar-组件"><a href="#导航条（navBar-组件" class="headerlink" title="导航条（navBar) 组件"></a>导航条（navBar) 组件</h1><p><strong>因为导航条中用到了  Collapse 组件 所以先要了解 collapsed 组件</strong></p><h2 id="Collapse-组件"><a href="#Collapse-组件" class="headerlink" title="Collapse 组件"></a>Collapse 组件</h2><p>Collapse 组件作用时 控制其他元素的展开或隐藏</p><ul><li>data-toggle=”collapse”  组件类型申明 为 collapse （坍塌）</li><li>data-target=”.box”  控制目标为 .box的选择器的元素</li><li>在 a 标签中 data-target 可以 直接用 href 替换</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".box"</span> <span class="attr">aria-expander</span>=<span class="string">'false'</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">".box"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="navBar组件分析"><a href="#navBar组件分析" class="headerlink" title="navBar组件分析"></a>navBar组件分析</h2><ul><li>aria-expanded=”false” 用于屏幕阅读器使用，（提示有一个没有展开的区域）</li><li>class=”sr-only” 仅用于屏幕阅读器阅读，里面的内不会显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 采用流式布局 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 以下为三个字体图标，共同组成了一个显示按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 这是商标区域--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--以下的 链接、表单、其他内容被上面的按钮切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h1><h2 id="bootstrap-轮播图分析"><a href="#bootstrap-轮播图分析" class="headerlink" title="bootstrap 轮播图分析"></a>bootstrap 轮播图分析</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- carousel 轮播图的模块  slide是否加上滑动效果 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- data-ride="carousel" 初始化轮播图属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点盒子 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            data-target="#carousel-example-generic" 控制目标轮播图</span></span><br><span class="line"><span class="comment">            data-slide-to="0" 控制的是轮播图当中的第几张 （索引）</span></span><br><span class="line"><span class="comment">            class="active" 当前选中的点</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片盒子 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- role="listbox" 提供给屏幕阅读器使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要轮播的容器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--图片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--说明--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上一张下一张按钮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     data-slide="prev"</span></span><br><span class="line"><span class="comment">     data-slide="next"</span></span><br><span class="line"><span class="comment">     href="#carousel-example-generic"   控制目标轮播图</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span>  <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：在移动端图片显示太过于  扁长 ，显示有缺陷，图片大小修改会造成显示问题</p><h2 id="修改pc端显示效果"><a href="#修改pc端显示效果" class="headerlink" title="修改pc端显示效果"></a>修改pc端显示效果</h2><p>将 img 标签的图片修改成 background 来显示，这样可以控制图片大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.pcimg_box</span>&#123;</span></span><br><span class="line"><span class="undefined">      height: 400px;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      display: block;</span></span><br><span class="line"><span class="undefined">      background-size: cover;</span></span><br><span class="line"><span class="undefined">      background-position: center;</span></span><br><span class="line"><span class="undefined">      background-repeat: no-repeat;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指示器（焦点） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_01_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_02_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_03_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_04_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要将背景图片写在行内样式中，方便后端渲染</p><h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页签 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#home"</span> <span class="attr">aria-controls</span>=<span class="string">"home"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#profile"</span> <span class="attr">aria-controls</span>=<span class="string">"profile"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#messages"</span> <span class="attr">aria-controls</span>=<span class="string">"messages"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#settings"</span> <span class="attr">aria-controls</span>=<span class="string">"settings"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Tab panes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane active"</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"profile"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"settings"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栅格系统&quot;&gt;&lt;a href=&quot;#栅格系统&quot; class=&quot;headerlink&quot; title=&quot;栅格系统&quot;&gt;&lt;/a&gt;栅格系统&lt;/h1&gt;&lt;h2 id=&quot;container-容器&quot;&gt;&lt;a href=&quot;#container-容器&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="bootstrap" scheme="https://zhaozhoa.github.com/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>数据的获取和转换</title>
    <link href="https://zhaozhoa.github.com/2019/03/05/%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E8%BD%AC%E6%8D%A2/"/>
    <id>https://zhaozhoa.github.com/2019/03/05/数据的获取和转换/</id>
    <published>2019-03-05T08:06:15.000Z</published>
    <updated>2019-03-23T07:11:37.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的获取和转换"><a href="#数据的获取和转换" class="headerlink" title="数据的获取和转换"></a>数据的获取和转换</h1><h2 id="获取页面-url-通过问号传参"><a href="#获取页面-url-通过问号传参" class="headerlink" title="获取页面 url 通过问号传参"></a>获取页面 url 通过问号传参</h2><p>传递的样式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/m/searchList.html?key=1&amp;name=10</span></span><br></pre></td></tr></table></figure><p>获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getParamsByUrl = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">   <span class="keyword">var</span> params = &#123;&#125;</span><br><span class="line">   <span class="keyword">var</span> search = location.search          <span class="comment">//"?key=1&amp;name=10"</span></span><br><span class="line">   <span class="keyword">if</span> (search) &#123;</span><br><span class="line">     search = search.replace(<span class="string">'?'</span>, <span class="string">''</span>)    <span class="comment">//"key=1&amp;name=10"</span></span><br><span class="line">     <span class="keyword">var</span> arr = search.split(<span class="string">'&amp;'</span>)         <span class="comment">//["key=1", "name=10"]</span></span><br><span class="line">     arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, i</span>) </span>&#123;  </span><br><span class="line">       <span class="keyword">var</span> itemArr = item.split(<span class="string">'='</span>)<span class="comment">//["key", "1"] ["name", "10"]</span></span><br><span class="line">       params[itemArr[<span class="number">0</span>]] = itemArr[<span class="number">1</span>]<span class="comment">//&#123;key: "1", name: "10"&#125;</span></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> params;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> params = getParamsByUrl()</span><br></pre></td></tr></table></figure><h2 id="node-获取-get-和-post-参数"><a href="#node-获取-get-和-post-参数" class="headerlink" title="node 获取 get 和 post 参数"></a>node 获取 get 和 post 参数</h2><h3 id="获取-get-参数"><a href="#获取-get-参数" class="headerlink" title="获取 get 参数"></a>获取 get 参数</h3><p>直接从url 中获取</p><p>使用 req.rul </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.url);<span class="comment">//    /data.js?username=se&amp;pwd=d</span></span><br><span class="line">  res.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>以对象形式获取</strong></p><p>引入 url 核心模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">'rul'</span>)</span><br></pre></td></tr></table></figure><p>给 url使用parse 方法解析 req.url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = url.parse(req.url)</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line">  res.end()</span><br></pre></td></tr></table></figure><p>解析结果为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="literal">null</span>,</span><br><span class="line">  slashes: <span class="literal">null</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="literal">null</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?username=se&amp;pwd=f'</span>,</span><br><span class="line">  query: <span class="string">'username=se&amp;pwd=f'</span>,</span><br><span class="line">  pathname: <span class="string">'/data.js'</span>,</span><br><span class="line">  path: <span class="string">'/data.js?username=se&amp;pwd=f'</span>,</span><br><span class="line">  href: <span class="string">'/data.js?username=se&amp;pwd=f'</span> &#125;</span><br></pre></td></tr></table></figure><p>此时的 query 属性还是 字符串形式，<strong>如果给 parse 方法传入第二个参数：true，则结果为</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="literal">null</span>,</span><br><span class="line">  slashes: <span class="literal">null</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="literal">null</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?username=se&amp;pwd=deee'</span>,</span><br><span class="line">  query: [<span class="built_in">Object</span>: <span class="literal">null</span> prototype] &#123; <span class="attr">username</span>: <span class="string">'se'</span>, <span class="attr">pwd</span>: <span class="string">'deee'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/data.js'</span>,</span><br><span class="line">  path: <span class="string">'/data.js?username=se&amp;pwd=deee'</span>,</span><br><span class="line">  href: <span class="string">'/data.js?username=se&amp;pwd=deee'</span> &#125;</span><br></pre></td></tr></table></figure><p>这时的 query 属性值为一个对象</p><h3 id="获取-post-提交参数"><a href="#获取-post-提交参数" class="headerlink" title="获取 post 提交参数"></a>获取 post 提交参数</h3><p>post 提交的参数在请求体中，获取请求体是以分组报文的形式获取，所以 post 里面的参数不能直接一次性获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//解析传来的参数为 json</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">  <span class="comment">// 监听每一部分报文到达，将每一次的报文拼装</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data=&gt; &#123;</span><br><span class="line">    str +=data</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//全部传输完毕</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> post = queryString.parse(str)</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">//   username=se&amp;pwd=fgd [Object: null prototype] &#123; username: 'se', pwd: 'fgd' &#125;</span></span><br><span class="line">    res.end()</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><strong>这种方式只可以获取普通编码数据，不能获取二进制文件，因为二进制转换成字符串，再转换回去格式会被破坏</strong></p><p><strong>url.parse 和queryString.parse 区别</strong></p><ul><li><p>url.parse()解析的是整个 url 如：/data.js?username=se&amp;pwd=f</p></li><li><p>querystring.parse()解析的是 参数  如：username=se&amp;pwd=f</p></li></ul><h3 id="封装成都可以获取"><a href="#封装成都可以获取" class="headerlink" title="封装成都可以获取"></a>封装成都可以获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取get参数</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname, query&#125; = url.parse(req.url,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取post 参数</span></span><br><span class="line">  <span class="keyword">let</span> str =<span class="string">''</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    str += data</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> post = querystring.parse(str)</span><br><span class="line">    <span class="built_in">console</span>.log(pathname, query, post);</span><br><span class="line">  &#125;)</span><br><span class="line">  res.end()</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的获取和转换&quot;&gt;&lt;a href=&quot;#数据的获取和转换&quot; class=&quot;headerlink&quot; title=&quot;数据的获取和转换&quot;&gt;&lt;/a&gt;数据的获取和转换&lt;/h1&gt;&lt;h2 id=&quot;获取页面-url-通过问号传参&quot;&gt;&lt;a href=&quot;#获取页面-url-通过问号传
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="数据，node" scheme="https://zhaozhoa.github.com/tags/%E6%95%B0%E6%8D%AE%EF%BC%8Cnode/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎使用步骤</title>
    <link href="https://zhaozhoa.github.com/2019/03/04/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/"/>
    <id>https://zhaozhoa.github.com/2019/03/04/模板引擎使用步骤/</id>
    <published>2019-03-04T13:23:54.000Z</published>
    <updated>2019-03-05T01:06:31.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板引擎渲染步骤"><a href="#模板引擎渲染步骤" class="headerlink" title="模板引擎渲染步骤"></a>模板引擎渲染步骤</h1><ol><li>获取数据</li><li>定义模板</li><li>调用模板</li><li>返回 html</li></ol><h2 id="1-用-jQuery-发送-get请求，获取数据"><a href="#1-用-jQuery-发送-get请求，获取数据" class="headerlink" title="1. 用 jQuery 发送 get请求，获取数据"></a>1. 用 jQuery 发送 get请求，获取数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getFirstCategoryData = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/category/queryTopCategory'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    data: <span class="string">''</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      callback &amp;&amp; callback(data)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后台返回的json数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">total</span>: <span class="number">5</span>, <span class="attr">rows</span>: <span class="built_in">Array</span>(<span class="number">5</span>)&#125;</span><br><span class="line">rows: <span class="built_in">Array</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">0</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">categoryName</span>: <span class="string">"运动馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">1</span>: &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">categoryName</span>: <span class="string">"女士馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">2</span>: &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">categoryName</span>: <span class="string">"男士馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">3</span>: &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">categoryName</span>: <span class="string">"帆布馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">4</span>: &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">categoryName</span>: <span class="string">"户外管"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line">length: <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-定义模板"><a href="#2-定义模板" class="headerlink" title="2. 定义模板"></a>2. 定义模板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/template"</span> id=<span class="string">"firstTemplate"</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows.length; i++) &#123; %&gt;</span><br><span class="line">      &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"&lt;%= i==0?'now':''%&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span> = <span class="string">"&lt;%=rows[i].id%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=rows[i].categoryName%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-调用模板-进行渲染"><a href="#3-调用模板-进行渲染" class="headerlink" title="3. 调用模板,进行渲染"></a>3. 调用模板,进行渲染</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getFirstCategoryData(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   $(<span class="string">'.cate_left ul'</span>).html(template(<span class="string">'firstTemplate'</span>,data))</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-渲染结果"><a href="#4-渲染结果" class="headerlink" title="4. 渲染结果"></a>4. 渲染结果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"1"</span>&gt;</span>运动馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"2"</span>&gt;</span>女士馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"3"</span>&gt;</span>男士馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"4"</span>&gt;</span>帆布馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"5"</span>&gt;</span>户外馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模板引擎渲染步骤&quot;&gt;&lt;a href=&quot;#模板引擎渲染步骤&quot; class=&quot;headerlink&quot; title=&quot;模板引擎渲染步骤&quot;&gt;&lt;/a&gt;模板引擎渲染步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取数据&lt;/li&gt;
&lt;li&gt;定义模板&lt;/li&gt;
&lt;li&gt;调用模板&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="json" scheme="https://zhaozhoa.github.com/tags/json/"/>
    
      <category term="ajax" scheme="https://zhaozhoa.github.com/tags/ajax/"/>
    
      <category term="模板引擎" scheme="https://zhaozhoa.github.com/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>less常见语法</title>
    <link href="https://zhaozhoa.github.com/2019/03/03/less%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95/"/>
    <id>https://zhaozhoa.github.com/2019/03/03/less常见语法/</id>
    <published>2019-03-03T14:52:11.000Z</published>
    <updated>2019-03-03T14:53:15.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><h2 id="安装less"><a href="#安装less" class="headerlink" title="安装less"></a>安装less</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g less</span><br></pre></td></tr></table></figure><h2 id="less-文件编译成-css-文件"><a href="#less-文件编译成-css-文件" class="headerlink" title="less 文件编译成 css 文件"></a>less 文件编译成 css 文件</h2><p><strong>手动编译</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc less文件.less 编译后的css文件.css</span><br></pre></td></tr></table></figure><p><strong>vscode 自动编译</strong></p><p>安装插件 Ease Less</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="申明变量"><a href="#申明变量" class="headerlink" title="申明变量"></a>申明变量</h3><ul><li>必须<code>@</code> 前缀 <code>:</code> 相当于 等号 ，必须<code>;</code> 结束。</li><li>必须符合变量的命名规则。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mainColor:</span> <span class="number">#ccc</span>;</span><br></pre></td></tr></table></figure><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>:hover&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译结果</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>less 文件开头 指定编码为 UTF-8 编码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span></span><br></pre></td></tr></table></figure><h2 id="Mixin-混入"><a href="#Mixin-混入" class="headerlink" title="Mixin 混入"></a>Mixin 混入</h2><h3 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h3><p>less 语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w50-f_left</span>&#123;</span><br><span class="line">  <span class="selector-class">.w50</span>();</span><br><span class="line">  <span class="selector-class">.f_left</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成 css </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w50-f_left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的 css 会出现混入前的类</p><h3 id="函数混入"><a href="#函数混入" class="headerlink" title="函数混入"></a>函数混入</h3><p>less 语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50</span>()&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span>()&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w50-f_left</span>&#123;</span><br><span class="line">  <span class="selector-class">.w50</span>();</span><br><span class="line">  <span class="selector-class">.f_left</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成 css 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50-f_left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的 css 不会出现函数本体。</p><p><strong>带参函数混入</strong></p><ul><li>定义了参数（没有默认值）调用的时候必须传参。</li><li>定义 默认值的方式和定义变量相同。</li><li>定义了参数（有默认值），调用的时候可以不用传参。</li></ul><p>less 语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f</span>(<span class="variable">@direction</span>: left) &#123;</span><br><span class="line">    <span class="attribute">float</span>:<span class="variable">@direction</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.r_left</span>&#123;</span><br><span class="line">    <span class="selector-class">.f</span>();</span><br><span class="line">    <span class="selector-class">.f</span>(right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.r_left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>为了使 css 的层次更加清楚 ，less 可以像 html一样进行类似的嵌套写法</p><p>less语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top_bar</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top_bar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_bar</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>伪类和伪元素等需要和前面的选择器紧挨使用的 需要用<code>&amp;</code>符号进行连接否则编译后会有空格。</p><h2 id="Import（导入）"><a href="#Import（导入）" class="headerlink" title="Import（导入）"></a>Import（导入）</h2><p>less 可以进行模块化，最后可以用 import 进行导入组合</p><p>variables.less 的内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mainColor:</span><span class="number">#ccc</span>;</span><br><span class="line"><span class="variable">@box:</span> box;</span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span>:hover&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.@&#123;box&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main.less 中导入 variables.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"variables"</span>;</span><br></pre></td></tr></table></figure><p>编译的 css 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>less 支持数字的简单运算</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@num:</span><span class="number">7</span>;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> * <span class="variable">@num</span>;</span><br><span class="line">  <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> / <span class="variable">@num</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">700%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14.28571429%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Less&quot;&gt;&lt;a href=&quot;#Less&quot; class=&quot;headerlink&quot; title=&quot;Less&quot;&gt;&lt;/a&gt;Less&lt;/h1&gt;&lt;h2 id=&quot;安装less&quot;&gt;&lt;a href=&quot;#安装less&quot; class=&quot;headerlink&quot; title=&quot;安装les
      
    
    </summary>
    
      <category term="移动端" scheme="https://zhaozhoa.github.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="less" scheme="https://zhaozhoa.github.com/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>rem+less适配</title>
    <link href="https://zhaozhoa.github.com/2019/03/03/rem-less%E9%80%82%E9%85%8D/"/>
    <id>https://zhaozhoa.github.com/2019/03/03/rem-less适配/</id>
    <published>2019-03-03T14:33:49.000Z</published>
    <updated>2019-03-03T14:39:26.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem-和-em"><a href="#rem-和-em" class="headerlink" title="rem 和 em"></a>rem 和 em</h1><p>rem和 em都是相对单位</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>em 是基于父容器的字体大小</li><li>rem 是基于根元素（也就是 html 元素）的字体大小</li></ul><h2 id="rem-适配"><a href="#rem-适配" class="headerlink" title="rem 适配"></a>rem 适配</h2><h3 id="常见的适配方案"><a href="#常见的适配方案" class="headerlink" title="常见的适配方案"></a>常见的适配方案</h3><table><thead><tr><th>名称</th><th>缺点</th></tr></thead><tbody><tr><td>伸缩布局</td><td>元素只能宽度适配</td></tr><tr><td>流式布局</td><td>元素只能宽度适配</td></tr><tr><td>响应式布局</td><td>元素只能宽度适配</td></tr><tr><td>rem 布局</td><td><code>高度和宽度可以同时适配</code></td></tr></tbody></table><h3 id="rem-适配原理"><a href="#rem-适配原理" class="headerlink" title="rem 适配原理"></a>rem 适配原理</h3><p>页面的尺寸都用 rem 作为单位，针对不同大小的页面只需要更改 基准值 html 的大小即可实现适配</p><h3 id="rem-基准值的换算公式"><a href="#rem-基准值的换算公式" class="headerlink" title="rem 基准值的换算公式"></a>rem 基准值的换算公式</h3><p><code>当前设备 rem 基准值 = 预设的基准值 / 设计稿的宽度 * 当前设备的宽度</code></p><blockquote><p>当前的设备：</p><p>设备宽度为 640px ，当前的 div 为 640px  <em> 100px，预设基准为 100px ，所以div 大小可以转换为 6.4rem </em> 1rem</p><p>适配的设备：</p><p>设备宽度为 320px ，div 的大小为 6.4rem * 1rem，要想div的尺寸实现适配，需要修改当前的 rem 基准值。</p><p>由上面的公式可以算出：</p><p>100 / 640 * 320 = 50px。</p><p>所以需要修改当前的 基准值为 50px</p></blockquote><h3 id="less-rem-实现多种设备的适配"><a href="#less-rem-实现多种设备的适配" class="headerlink" title="less + rem 实现多种设备的适配"></a>less + rem 实现多种设备的适配</h3><p>根据 rem 的适配原理，可以知道是根据设备的宽度不同来改变 html 元素的字体大小来进行适配。所以如果根据当前设备宽度来改变 html 元素的字体大小呢？</p><p><strong>方式一：媒体查询</strong></p><p>同时适配 640px 和 320px 的设备</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="css">    @<span class="keyword">media</span> (min-width:<span class="number">320px</span>) &#123;</span></span><br><span class="line"><span class="undefined">      html&#123;</span></span><br><span class="line"><span class="undefined">        font-size: 50px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    @<span class="keyword">media</span> (min-width: <span class="number">640px</span>) &#123;</span></span><br><span class="line"><span class="undefined">      html&#123;</span></span><br><span class="line"><span class="undefined">        font-size: 100px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    body&#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    header&#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: 1rem;</span></span><br><span class="line"><span class="undefined">      line-height: 1rem;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 0<span class="selector-class">.32rem</span>;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      background-color: green;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随着设备的增多，媒体查询和基准值的计算会不方便同时也不好维护，所以可以通过 less 进行改进</p><p><strong>方式二：less</strong></p><ol><li>定义存储变量的less 文件 var.less</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="comment">// 通过 less 定义数组，存储主流设备的尺寸</span></span><br><span class="line"><span class="variable">@adapterDeviceList:</span><span class="number">750px</span>, <span class="number">720px</span>, <span class="number">640px</span>, <span class="number">540px</span>, <span class="number">480px</span>, <span class="number">424px</span>, <span class="number">414px</span>, <span class="number">400px</span>, <span class="number">384px</span>, <span class="number">375px</span>, <span class="number">360px</span>, <span class="number">320px</span>;</span><br><span class="line"><span class="comment">// 设计稿尺寸</span></span><br><span class="line"><span class="variable">@psdWidth:</span> <span class="number">750px</span>;</span><br><span class="line"><span class="comment">// 预设基准值</span></span><br><span class="line"><span class="variable">@baseFontSize:</span> <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设备的种类（数组的长度）</span></span><br><span class="line"><span class="comment">// 通过内置函数 length来获取</span></span><br><span class="line"><span class="variable">@len:</span> length(<span class="variable">@adapterDeviceList</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>设置一个适配的less 文件 mixins.less<ul><li>这个less文件通过递归来生成不同的媒体查询</li><li>less 没有循环语法</li><li>when （此处是函数的执行条件）</li><li>内置函数  extract（）用于获取数组里面的元素，传入两个参数，一个是数组名称，另一个时序号</li><li>下面的函数是倒着获取数组元素，生成媒体插叙的函数</li></ul></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.adapterMixins</span>(<span class="variable">@index</span>) <span class="keyword">when</span>(<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>)) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="variable">@baseFontSize</span> / <span class="variable">@psdWidth</span> * extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.adapterMixins</span>(<span class="variable">@index</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.adapterMixins</span>(<span class="variable">@len</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>设置一个less 文件用于引入上面的less文件的 index.less</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"var.less"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"mixins.less"</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>编译 index.less 后引入到html文件即可</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem-和-em&quot;&gt;&lt;a href=&quot;#rem-和-em&quot; class=&quot;headerlink&quot; title=&quot;rem 和 em&quot;&gt;&lt;/a&gt;rem 和 em&lt;/h1&gt;&lt;p&gt;rem和 em都是相对单位&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; cl
      
    
    </summary>
    
      <category term="移动端" scheme="https://zhaozhoa.github.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="less" scheme="https://zhaozhoa.github.com/tags/less/"/>
    
      <category term="rem" scheme="https://zhaozhoa.github.com/tags/rem/"/>
    
  </entry>
  
</feed>
