<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>脚印</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaozhoa.github.com/"/>
  <updated>2019-05-19T05:55:52.147Z</updated>
  <id>https://zhaozhoa.github.com/</id>
  
  <author>
    <name>张朝</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue通信&amp;vuex</title>
    <link href="https://zhaozhoa.github.com/2019/05/13/Vue%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1&amp;Vuex/"/>
    <id>https://zhaozhoa.github.com/2019/05/13/Vue数据通信&amp;Vuex/</id>
    <published>2019-05-13T13:24:48.000Z</published>
    <updated>2019-05-19T05:55:52.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue-数据通信"><a href="#vue-数据通信" class="headerlink" title="vue 数据通信"></a>vue 数据通信</h1><h2 id="vue-组件间通信"><a href="#vue-组件间通信" class="headerlink" title="vue 组件间通信"></a>vue 组件间通信</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p><strong>父组件</strong></p><p>父组件在子组件上使用 key=value 的方式向子组件发送信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;ListItem v-for=&quot;item in items&quot; :data=&quot;item&quot; str=&quot;aaa&quot;&gt;&lt;/ListItem&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ListItem from &apos;./list_item&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [</span><br><span class="line">        &#123;name: &apos;aaa&apos;, price: 355, salse: 552&#125;,</span><br><span class="line">        &#123;name: &apos;bbb&apos;, price: 66, salse: 554&#125;,</span><br><span class="line">        &#123;name: &apos;ccc&apos;, price: 22, salse: 66&#125;,</span><br><span class="line">        &#123;name: &apos;ddd&apos;, price: 555, salse: 88&#125;,</span><br><span class="line">        &#123;name: &apos;eee&apos;, price: 15, salse: 22&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;ListItem&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="props-方法-接收-父组件传递的信息"><a href="#props-方法-接收-父组件传递的信息" class="headerlink" title="props 方法 接收 父组件传递的信息"></a>props 方法 接收 父组件传递的信息</h4><ul><li>子组件中 使用 <code>proops:[&#39;父组件中传递的key&#39;]</code></li><li>子组件接收后，就可直接使用父组件传递的信息</li></ul><p><strong>子组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;h3&gt;名称：&#123;&#123;data.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;价格&#123;&#123;data.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;月销：&#123;&#123;data.salse&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;ListItem&apos;,</span><br><span class="line">  props: [&apos;data&apos;],</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      text: &apos;&apos;,</span><br><span class="line">      data2: &#123;&#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    console.log(this.$attrs);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="attrs-接收父组件传递的信息"><a href="#attrs-接收父组件传递的信息" class="headerlink" title="$attrs 接收父组件传递的信息"></a>$attrs 接收父组件传递的信息</h4><p>$attrs 是一个对象，接收的是 子组件中没有通过 props 接收的值，</p><p>如果 通过props 接收了，则用$attrs接收不到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;h3&gt;商品名称:&#123;&#123;data.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;价格:&#123;&#123;data.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;月销：&#123;&#123;data.salse&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;ListItem&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.data = this.$attrs.data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>父组件向子组件传递自己的方法</p><p><strong>父组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    已选中&#123;&#123;count&#125;&#125;件</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    &lt;ListItem v-for=&quot;item in items&quot; :data=&quot;item&quot; str=&quot;aaa&quot; :add=&quot;addOne&quot; :minus=&quot;minusOne&quot;&gt;&lt;/ListItem&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ListItem from &apos;./list_item&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">      items: [</span><br><span class="line">        &#123;name: &apos;aaa&apos;, price: 355, salse: 552&#125;,</span><br><span class="line">        &#123;name: &apos;bbb&apos;, price: 66, salse: 554&#125;,</span><br><span class="line">        &#123;name: &apos;ccc&apos;, price: 22, salse: 66&#125;,</span><br><span class="line">        &#123;name: &apos;ddd&apos;, price: 555, salse: 88&#125;,</span><br><span class="line">        &#123;name: &apos;eee&apos;, price: 15, salse: 22&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  components: &#123;ListItem&#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    addOne () &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    minusOne () &#123;</span><br><span class="line">      this.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>子组件</strong></p><p>子组件公共 $attrs 接收父组件传递的方法，调用这个方法，实现通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;h3&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;商品名称:&#123;&#123;data.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;p&gt;价格:&#123;&#123;data.price&#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;月销：&#123;&#123;data.salse&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;ListItem&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      checked: false,</span><br><span class="line">      data: &#123;&#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.data = this.$attrs.data</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    checked () &#123;</span><br><span class="line">      if (this.checked) &#123;</span><br><span class="line">      // 子组件调用父组件的方法，实现通信</span><br><span class="line">        this.$attrs.add()</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$attrs.minus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="axios-和-fetch"><a href="#axios-和-fetch" class="headerlink" title="axios 和 fetch"></a>axios 和 fetch</h2><p>axios 和 fetch 都是 对 xmlhttprequest 的封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     items: []</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">文档</a></p><p>简单使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">// 将其添加到vue的原型对象上</span></span><br><span class="line">Vue.prototype.axios = axios</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> mounted () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = (<span class="keyword">await</span> <span class="keyword">this</span>.axios.get(<span class="string">'http://localhost:3000/list'</span>)).data</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>fetch 是官方对 xhmhttprequest  的封装</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">文档</a></p><p>简单使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> mounted () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = <span class="keyword">await</span> (<span class="keyword">await</span> fetch(<span class="string">'http://localhost:3000/list'</span>)).json()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>用 <code>(await fetch(&#39;http://localhost:3000/list&#39;)).json()</code>  获取请求数据，返回的是一个 Promise 对象， 所以还需要 await一下 </p><h2 id="vuex-统一状态管理"><a href="#vuex-统一状态管理" class="headerlink" title="vuex 统一状态管理"></a>vuex 统一状态管理</h2><h3 id="Vuex-简介"><a href="#Vuex-简介" class="headerlink" title="Vuex 简介"></a>Vuex 简介</h3><h4 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h4><p>Vuex 是专门为 Vue.js 应用程序开发的状态管理模式</p><h4 id="为什么要用Vuex"><a href="#为什么要用Vuex" class="headerlink" title="为什么要用Vuex"></a>为什么要用Vuex</h4><p>当我们构建一个中大型的单页面应用程序时，Vuex 可以更好的帮助我们在组件外部统一管理状态</p><h3 id="Vuex-的核心"><a href="#Vuex-的核心" class="headerlink" title="Vuex 的核心"></a>Vuex 的核心</h3><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><ul><li>State 是唯一的数据源</li><li>单一的状态树</li></ul><h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><ul><li>通过 getters 可以派生出一些新的状态</li></ul><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>;,<span class="attr">texi</span>:<span class="string">'...'</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>;,<span class="attr">texi</span>:<span class="string">'...'</span>,<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><ul><li>更改 Vuex 中 store 中的状态唯一的方法就是提交 mutation</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      <span class="comment">// 只能用 mutations 改变  </span></span><br><span class="line">      state.conunt++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中触发vuex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><p><code>直接掉用 mutations 里面的方法 改变 state 里面的值</code></p><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><ul><li>actions 提交的是 mutation， 而不是直接变更状态</li><li>actions 可以包含任意的异步操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state:&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中触发vuex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><p><code>先触发 actions 里面的方法，再触发 mutations 的方法，修改 state 里面的值</code></p><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><ul><li>面对复杂的应用程序，当管理的状态比较多时，需要将Vuex 的store 对象分割成模块（modules）</li></ul><h3 id="Vuex全局状态管理"><a href="#Vuex全局状态管理" class="headerlink" title="Vuex全局状态管理"></a>Vuex全局状态管理</h3><p><img src="https://pic2.zhimg.com/v2-be68719a9e63469fb846d7e1dec92b81_r.jpg" alt="vuex全局状态管理"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue-数据通信&quot;&gt;&lt;a href=&quot;#vue-数据通信&quot; class=&quot;headerlink&quot; title=&quot;vue 数据通信&quot;&gt;&lt;/a&gt;vue 数据通信&lt;/h1&gt;&lt;h2 id=&quot;vue-组件间通信&quot;&gt;&lt;a href=&quot;#vue-组件间通信&quot; class=&quot;he
      
    
    </summary>
    
      <category term="vue" scheme="https://zhaozhoa.github.com/categories/vue/"/>
    
    
      <category term="vue" scheme="https://zhaozhoa.github.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter</title>
    <link href="https://zhaozhoa.github.com/2019/04/16/VueRouter/"/>
    <id>https://zhaozhoa.github.com/2019/04/16/VueRouter/</id>
    <published>2019-04-16T09:57:46.000Z</published>
    <updated>2019-04-16T10:01:56.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p><code>前端路由的本质是锚点值改变，页面不跳转，但改变 innerHtml的内容</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/login"</span>&gt;</span>点我登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/register"</span>&gt;</span>点我注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>,()=&gt;&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">switch</span>(location.hash) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">case</span> <span class="string">'#/login'</span>:</span></span><br><span class="line"><span class="xml">        div.innerHTML = '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">case</span> <span class="string">'#/register'</span>:</span></span><br><span class="line"><span class="xml">        div.innerHTML = '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span><br><span class="line"><span class="javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125; )</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>路由其实是由 hash 完成的（基于hashchange事件）</li><li>监听 url 上锚点（#xxx）的变化改变页面的内容（锚点和 hash 一回事）</li></ul><h2 id="vue-路由"><a href="#vue-路由" class="headerlink" title="vue 路由"></a>vue 路由</h2><p><strong>路由使用步骤：</strong></p><ol><li>引入vue-router路由（插件）对象 </li><li>安装插件</li><li>创建路由对象</li><li>配置路由对象</li><li>指定路由改变的位置</li><li>将配置好的 路由对象 关联到 vue 实例中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>node_modules/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 1. 引入vue-router路由（插件）对象 --&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>./node_modules/vue-router/dist/vue-router.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  // 2. 安装插件</span></span><br><span class="line"><span class="string">  Vue.use(VueRouter);</span></span><br><span class="line"><span class="string">  // 需要显示的组件</span></span><br><span class="line"><span class="string">  let login = &#123;</span></span><br><span class="line"><span class="string">    template:`&lt;div&gt;</span></span><br><span class="line"><span class="string">    登陆</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let register = &#123;</span></span><br><span class="line"><span class="string">    template:`&lt;div&gt;</span></span><br><span class="line"><span class="string">    注册&lt;/div&gt;`</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  // 3.创建路由对象</span></span><br><span class="line"><span class="string">  let router = new VueRouter(&#123;</span></span><br><span class="line"><span class="string">      // 4. 配置路由对象</span></span><br><span class="line"><span class="string">      routes:[</span></span><br><span class="line"><span class="string">        &#123; path: '/login', component: login &#125;,</span></span><br><span class="line"><span class="string">        &#123; path: '/register', component: register &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 5. 指定路由改变的位置</span></span><br><span class="line"><span class="string">  let app = &#123;</span></span><br><span class="line"><span class="string">    template:</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link to="</span>/login<span class="string">"&gt;注册&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link to="</span>/register<span class="string">"&gt;登陆&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  // 6. 将配置好的 路由对象 关联到 vue 实例中</span></span><br><span class="line"><span class="string">  new Vue(&#123;</span></span><br><span class="line"><span class="string">    el:'#app',</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      app</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    router,</span></span><br><span class="line"><span class="string">    template:'&lt;app/&gt;',</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>vue中的路由是切换组件，并不是页面切换。</li><li>router-link 其实就是一个 a 标签</li><li>router-view 是一个占位符，需要路由的地方就需要 router-view</li></ul><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><ul><li>用 <code>$route.params</code> 获取 路由参数 /:123</li><li>用 <code>$route.query</code> 获取 问号参数 /a=123</li><li>用 <code>beforRouteUpdate(to, from, next)</code>监听路由变化</li><li>也可以用 <code>watch</code> 监听路由变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/article/1"</span>&gt;文章<span class="number">1</span>&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to="/</span>article/<span class="number">5</span><span class="string">"&gt;文章2&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;router-link to="</span>/article/<span class="number">10</span><span class="string">"&gt;文章3&lt;/router-link&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  let router = new VueRouter(&#123;</span></span><br><span class="line"><span class="string">    routes: [&#123;</span></span><br><span class="line"><span class="string">      path: '/article/:id',</span></span><br><span class="line"><span class="string">      component: &#123;</span></span><br><span class="line"><span class="string">        // $route 记录当前路由信息</span></span><br><span class="line"><span class="string">        template: '&lt;div&gt;文章的id：&#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;',</span></span><br><span class="line"><span class="string">        beforeRouteUpdate(to, from, next)&#123;</span></span><br><span class="line"><span class="string">          if (confirm('如果离开，修改不会保存')) &#123;</span></span><br><span class="line"><span class="string">            next();</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;],</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  new Vue(&#123;</span></span><br><span class="line"><span class="string">    el: '#div1',</span></span><br><span class="line"><span class="string">    router,</span></span><br><span class="line"><span class="string">    watch: &#123;</span></span><br><span class="line"><span class="string">      // 监听路由变化</span></span><br><span class="line"><span class="string">      $route(newVal, oldVal) &#123;</span></span><br><span class="line"><span class="string">        console.log('从', oldVal);</span></span><br><span class="line"><span class="string">        console.log('变到', newVal);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ul><li><p>给路由对象一个名称，相当于一个存储路由路径的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 属性的值相当于一个变量，存储了路由的来路径</span></span><br><span class="line">       &#123; <span class="attr">name</span>:<span class="string">'login'</span>, <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">component</span>: login &#125;,</span><br><span class="line">       &#123; <span class="attr">name</span>:<span class="string">'register'</span>, <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</span><br></pre></td></tr></table></figure></li><li><p>在 router-link 的 to 属性中通过对象描述这个规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'login'&#125;"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'register'&#125;"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><p>路由包含子路由，视图（router-view）包含变化的子视图 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js</span></span></span><br><span class="line"><span class="tag"><span class="string">  "</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> login = &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">        login路由，下面是子路由显示的内容</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vip = &#123;</span></span><br><span class="line"><span class="undefined">        template: </span></span><br><span class="line"><span class="undefined">        `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">          vip 登陆</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">        `</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> register = &#123;</span></span><br><span class="line"><span class="xml">       template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> app = &#123;</span></span><br><span class="line"><span class="undefined">        template: </span></span><br><span class="line"><span class="undefined">        `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name:'vip'&#125;"</span>&gt;</span>去vip<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">        `,</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="undefined">        routes:[</span></span><br><span class="line"><span class="javascript">         &#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">name</span>: <span class="string">'login'</span>, <span class="attr">component</span>: login,</span></span><br><span class="line"><span class="undefined">           children: [</span></span><br><span class="line"><span class="javascript">             &#123; <span class="attr">path</span>: <span class="string">'vip'</span>, <span class="attr">name</span>: <span class="string">'vip'</span>, <span class="attr">component</span>: vip &#125;</span></span><br><span class="line"><span class="undefined">           ]</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">        ]</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">      Vue.use(VueRouter)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      router,</span></span><br><span class="line"><span class="undefined">      components: &#123;</span></span><br><span class="line"><span class="undefined">        app</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      template: <span class="string">'&lt;app/&gt;'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子路由只需要在父级路由中加上一个 children 的数组，里面配置自己的路由</li></ul><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>meta 是对于路由规则是否需要验证权限的配置</p><ul><li><p>路由对象中，和 name 属性同级</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meta:&#123;<span class="attr">isChicked</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>node_modules/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script src="</span>./node_modules/vue-router/dist/vue-router.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  let isLogin = false</span></span><br><span class="line"><span class="string">  Vue.use(VueRouter);</span></span><br><span class="line"><span class="string">  let login = &#123;</span></span><br><span class="line"><span class="string">    template: `&lt;div&gt;</span></span><br><span class="line"><span class="string">    登陆界面，不登陆，不显示音乐界面</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`,</span></span><br><span class="line"><span class="string">    // 组件创建之后</span></span><br><span class="line"><span class="string">    created () &#123;</span></span><br><span class="line"><span class="string">      isLogin = true</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let music = &#123;</span></span><br><span class="line"><span class="string">    template: `&lt;div&gt;</span></span><br><span class="line"><span class="string">    音乐界面&lt;/div&gt;`</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let router = new VueRouter()</span></span><br><span class="line"><span class="string">    // 追加路由对象</span></span><br><span class="line"><span class="string">    router.addRoutes([</span></span><br><span class="line"><span class="string">      // 默认首页路由</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        path: '/',</span></span><br><span class="line"><span class="string">        redirect: &#123;name: 'login'&#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name:'login',</span></span><br><span class="line"><span class="string">        path: '/login',</span></span><br><span class="line"><span class="string">        component: login</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name:'music',</span></span><br><span class="line"><span class="string">        path: '/music',</span></span><br><span class="line"><span class="string">        component: music,</span></span><br><span class="line"><span class="string">        // 路由守卫（权限控制）</span></span><br><span class="line"><span class="string">        meta: &#123; isChick:true &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">    ])</span></span><br><span class="line"><span class="string">    router.beforeEach((to, from, next) =&gt; &#123;</span></span><br><span class="line"><span class="string">    //  to: 要去的路由对象</span></span><br><span class="line"><span class="string">    //  from： 从哪里去的 路由对象</span></span><br><span class="line"><span class="string">    //  next() 继续执行</span></span><br><span class="line"><span class="string">      if (!to.meta.isChick) &#123;</span></span><br><span class="line"><span class="string">        next()</span></span><br><span class="line"><span class="string">      &#125;else&#123;</span></span><br><span class="line"><span class="string">        if (isLogin) &#123;</span></span><br><span class="line"><span class="string">          next()</span></span><br><span class="line"><span class="string">        &#125; else&#123;</span></span><br><span class="line"><span class="string">          // 重定向</span></span><br><span class="line"><span class="string">          next(&#123;name: 'login'&#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 5. 指定路由改变的位置</span></span><br><span class="line"><span class="string">  let app = &#123;</span></span><br><span class="line"><span class="string">    template: `</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'login'</span>&#125;<span class="string">"&gt;登陆&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-link :to="</span>&#123;<span class="attr">name</span>:<span class="string">'music'</span>&#125;<span class="string">"&gt;音乐&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">      &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  // 6. 将配置好的 路由对象 关联到 vue 实例中</span></span><br><span class="line"><span class="string">  new Vue(&#123;</span></span><br><span class="line"><span class="string">    el: '#app',</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      app</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    router,</span></span><br><span class="line"><span class="string">    template: '&lt;app/&gt;',</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编程导航"><a href="#编程导航" class="headerlink" title="编程导航"></a>编程导航</h3><ul><li>跳转到指定锚点，并显示页面 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push&#123;<span class="attr">name</span>:<span class="string">'xxx'</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;,<span class="attr">params</span>:&#123;<span class="attr">name</span>:<span class="string">'abc'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>根据历史记录前进或后退</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">1</span> | <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>​    1 前进，-1 后退</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由&quot;&gt;&lt;a href=&quot;#路由&quot; class=&quot;headerlink&quot; title=&quot;路由&quot;&gt;&lt;/a&gt;路由&lt;/h1&gt;&lt;p&gt;&lt;code&gt;前端路由的本质是锚点值改变，页面不跳转，但改变 innerHtml的内容&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="vue" scheme="https://zhaozhoa.github.com/categories/vue/"/>
    
    
      <category term="路由" scheme="https://zhaozhoa.github.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>初窥vue</title>
    <link href="https://zhaozhoa.github.com/2019/04/14/%E5%88%9D%E7%AA%A5vue/"/>
    <id>https://zhaozhoa.github.com/2019/04/14/初窥vue/</id>
    <published>2019-04-14T03:50:07.000Z</published>
    <updated>2019-04-14T03:51:32.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><h3 id="一向"><a href="#一向" class="headerlink" title="一向"></a>一向</h3><p>js 内存属性的改变，影响页面的变化 </p><h3 id="二向"><a href="#二向" class="headerlink" title="二向"></a>二向</h3><p>页面的改变影响 js 内存的改变 </p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 启动 Vue</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue 监管的区域</span></span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="comment">// dom 结构</span></span></span><br><span class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>大家好 &#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>', </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 存放变量</span></span></span><br><span class="line"><span class="undefined">    data()&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        text: <span class="string">'hello vue'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue-的常见指令"><a href="#vue-的常见指令" class="headerlink" title="vue 的常见指令"></a>vue 的常见指令</h2><ul><li><p>v-text ：</p><p>是元素的innerText 只能在双标签中使用</p></li><li><p>v-html ：</p><p>是元素的 innerHTML 不能有 </p></li><li><p>v-if ：</p><p>元素是否移除（删除元素）</p></li><li><p>v-show  ：</p><p>元素是否显示或隐藏</p></li><li><p>v-model：</p><p>双向数据绑定（内存js和页面的变化相互影响）</p></li><li><p>v-bind:</p><p>单向数据绑定（内存js 影响页面）</p><p>多用于属性绑定</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-bind:title = <span class="string">"txt"</span></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line">:title = <span class="string">"txt"</span></span><br></pre></td></tr></table></figure><ul><li><p>v-on：</p><p>用于事件绑定</p><p>可以简写 @:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#div1'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">          cont: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">          fnClick() &#123;</span><br><span class="line">            <span class="keyword">this</span>.cont ++</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</span><br><span class="line">    &#123;&#123; cont &#125;&#125; &lt;br&gt;</span><br><span class="line">    &lt;span v-on:click = <span class="string">"fnClick"</span>&gt;点击试试&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>v-for:</p><p>用于循环</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script&gt;</span><br><span class="line">   <span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'#div1'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">         users: [</span><br><span class="line">           &#123; <span class="attr">id</span>:<span class="number">11</span> ,<span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">id</span>:<span class="number">13</span> ,<span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">id</span>:<span class="number">18</span> ,<span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">           &#123; <span class="attr">id</span>:<span class="number">120</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">         ]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"div1"</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">    <span class="comment">//用 key 绑定 数据中一个不会变的值，这样可以将 每一条数据和相应的视图所对应，在数据发生变化的时候，可以直接修改这个视图</span></span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"item,index in users"</span> :key=<span class="string">"users.id"</span>&gt;</span><br><span class="line">        &#123;&#123; index &#125;&#125;姓名: &#123;&#123;item.name&#125;&#125;, 年龄： &#123;&#123; item.age &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件的使用"><a href="#组件的使用" class="headerlink" title="组件的使用"></a>组件的使用</h3><ul><li><p>第一步：创建组件</p></li><li><p>第二步：声明组件（components)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;<span class="string">'组件名'</span>，组件对象&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三步：使用组件（template）</p><ul><li>组件需要放在一个<div></div>标签下</li><li>可以通过&lt;组件名&gt;&lt;/组件名&gt;使用</li><li>也可以通过&lt;组件名/&gt;使用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>node_modules/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  // 创建子组件</span></span><br><span class="line"><span class="string">  let MyHeader = &#123;</span></span><br><span class="line"><span class="string">    template: </span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">      &lt;div&gt; 我是header组件 &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  let MyFooter = &#123;</span></span><br><span class="line"><span class="string">    template: </span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">      &lt;div&gt; 我是footer组件 &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  // 入口组件(父组件)</span></span><br><span class="line"><span class="string">  let App = &#123;</span></span><br><span class="line"><span class="string">    // 声明使用子组件</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      'my-header': MyHeader,</span></span><br><span class="line"><span class="string">      'my-footer': MyFooter</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    // 使用子组件</span></span><br><span class="line"><span class="string">    template:</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;my-header/&gt;</span></span><br><span class="line"><span class="string">        &lt;my-footer/&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  new Vue(&#123;</span></span><br><span class="line"><span class="string">    el: '#app',</span></span><br><span class="line"><span class="string">    // 声明使用父组件</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      app: App</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    // 使用父组件</span></span><br><span class="line"><span class="string">    template: '&lt;app/&gt;'</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><ul><li>父组件使用子组件时通过属性传递</li><li>子组件要声明 props[‘属性名’] 来接收</li><li>子组件收到父组件后在 template 中直接使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>node_modules/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 创建子组件</span></span><br><span class="line"><span class="string">  let Son = &#123;</span></span><br><span class="line"><span class="string">    template: `</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      接收到父组件的数据是 &#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;1&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;2&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">      &lt;button&gt;改变显示&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt; `,</span></span><br><span class="line"><span class="string">    // 声明接收参数</span></span><br><span class="line"><span class="string">    props:['title']</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  // 声明入口组件</span></span><br><span class="line"><span class="string">  // 父向子传递， 就是 v-bind 给元素的属性赋值</span></span><br><span class="line"><span class="string">  let App = &#123;</span></span><br><span class="line"><span class="string">    // 声明子组件</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      son:Son</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    template: `</span></span><br><span class="line"><span class="string">    &lt;h1&gt;</span></span><br><span class="line"><span class="string">      &lt;!-- 父传子--&gt;</span></span><br><span class="line"><span class="string">      &lt;son :title="</span>xxx<span class="string">"&gt;&lt;/son&gt;</span></span><br><span class="line"><span class="string">    我是入口组件</span></span><br><span class="line"><span class="string">    &lt;/h1&gt;`,</span></span><br><span class="line"><span class="string">    data()&#123;</span></span><br><span class="line"><span class="string">      return &#123;</span></span><br><span class="line"><span class="string">        xxx: '我是 xxx 数据'</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  new Vue(&#123;</span></span><br><span class="line"><span class="string">    el: '#app',</span></span><br><span class="line"><span class="string">    // 声明要使用的组件</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">      app: App</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    template: '&lt;app/&gt;',//入口组件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h3><p><strong>应用场景：</strong>将公共组件注册成为全局组件，在使用全局组件时候不用声明，减少代码冗余</p><p><strong>写法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'组件名'</span>，组件对象)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册公共的全局组件</span></span><br><span class="line"> Vue.component(<span class="string">'my-btn'</span>,&#123;</span><br><span class="line">   template:</span><br><span class="line">   <span class="string">`</span></span><br><span class="line"><span class="string">     &lt;button&gt; 全局组件 button &lt;/button&gt;</span></span><br><span class="line"><span class="string">   `</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 创建子组件</span></span><br><span class="line"> <span class="keyword">let</span> MyHeader = &#123;</span><br><span class="line">   template: </span><br><span class="line">   <span class="string">`</span></span><br><span class="line"><span class="string">     &lt;div&gt; </span></span><br><span class="line"><span class="string">       我是header组件 </span></span><br><span class="line"><span class="string">       &lt;my-btn/&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string">   `</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在子组件中直接使用 my-btn 组件</p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p><strong>作用：</strong>父元素向子元素传递 dom 节点</p><p><strong>用法：</strong>通过 vue 提供的 <slot></slot></p><p><strong>例如</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">  // <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> 是一个占位符，具体内容可以在使用时自定义</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> myLi = &#123;</span></span><br><span class="line"><span class="undefined">    template: `</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"one"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 将 myLi 注册成为全局组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-li'</span>, myLi)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> app = &#123;</span></span><br><span class="line"><span class="undefined">    template:</span></span><br><span class="line"><span class="undefined">    `</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined">        第一个slot</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">my-li</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"one"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">my-li</span>&gt;</span></span></span><br><span class="line"><span class="undefined">        第二个slot</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">my-li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"two"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">my-li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    `</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      app</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    template: <span class="string">'&lt;app/&gt;'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><slot></slot>标签可以有多个</li><li>slot 有一个name 属性，用来作为标识</li><li>用其他元素填充 <slot></slot>时候，需要给这个元素加一个 slot 属性，属性的值要和name 的属性值相同，这样此元素可以填充对应的<slot></slot></li></ul><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><ul><li><p>beforeCreate 和 created</p><ul><li>beforeCreate：表示：在组件创建之前</li><li>created：组件创建之后<ul><li>created 可以操作数据，实现 vue -&gt; 页面的影响</li><li>通常用来 发起 ajax 请求</li></ul></li><li>使用该组件就会触发以上的事件函数（钩子函数）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> test = &#123;</span></span><br><span class="line"><span class="undefined">    template: </span></span><br><span class="line"><span class="undefined">    `</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      我是 test 组件</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    `,</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        text:<span class="string">'zhao'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    beforeCreate () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.text);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    created () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.text);  <span class="comment">//zhao</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> app = &#123;</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      test</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    template: </span></span><br><span class="line"><span class="undefined">    `</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">test</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    `</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      app</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    template: <span class="string">'&lt;app/&gt;'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>beforeMount 和 Mounted</p><ul><li>beforeMount：vue 还没有装载的组件的 dom</li><li>Mounted：vue 装载后的组件后的 dom</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  beforeMount () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.body.innerHTML);</span><br><span class="line">    <span class="comment">//没有装载的组件的 dom </span></span><br><span class="line">    <span class="comment">// &lt;div id="app"&gt;&lt;/div&gt;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// vue 装载数据到 dom 之后</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.body.innerHTML);</span><br><span class="line">    <span class="comment">//装载后的组件后的 dom </span></span><br><span class="line">    <span class="comment">// &lt;div&gt;</span></span><br><span class="line">    <span class="comment">//   &lt;div&gt;</span></span><br><span class="line">    <span class="comment">//     我是 test 组件</span></span><br><span class="line">    <span class="comment">//   &lt;/div&gt;</span></span><br><span class="line">    <span class="comment">// &lt;/div&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>beforeUpdate 和 updated</p><ul><li>beforeUpdate：基于数据页面数据改变之前的 dom</li><li>updated：页面数据改变后 dom</li></ul></li><li><p>beforeDestroy 和 destroyed</p><ul><li><p>beforeDestroy：组件对象销毁之前</p></li><li><p>destroyed：组件对象销毁之后</p></li><li><p>以上的两个事件，必须和 父组件的 v-if false 配合使用4</p></li><li><p>销毁，最终都是做一些其他功能的释放，比如销毁之前将数据保存到localStorage</p></li><li><p>频繁发销毁和创建组件不利于页面的渲染，vue 中 提供了<keep-alive></keep-alive>将销毁的组件包裹，这样可以控制组件的激活和停用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">template: </span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;keep-alive&gt;</span></span><br><span class="line"><span class="string">        &lt;test v-if="isExist"&gt;&lt;/test&gt;</span></span><br><span class="line"><span class="string">      &lt;/keep-alive&gt;</span></span><br><span class="line"><span class="string">      &lt;button @click="isExist=!isExist&gt;切换&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>activated 和 deactivated</p><ul><li>activated：用于判断组件是否被激活</li><li>deactivated：用于判断组件是否停用</li></ul></li></ul><h2 id="过滤器（filter）"><a href="#过滤器（filter）" class="headerlink" title="过滤器（filter）"></a>过滤器（filter）</h2><ul><li>filter 全局过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'过滤器名'</span>,<span class="string">'过滤方式'</span>)</span><br></pre></td></tr></table></figure><ul><li>filters 组件自己的过滤器</li></ul><p>反转字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="./</span>node_modules/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  let app = &#123;</span></span><br><span class="line"><span class="string">    template:</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="</span>text<span class="string">" v-model="</span>myText<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">&lt;!-- 使用过滤器， 接收一个 myText 过滤后的值 --&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123; myText | reverse('你好') &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `,</span></span><br><span class="line"><span class="string">    data() &#123;</span></span><br><span class="line"><span class="string">      return &#123; myText: ''&#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    methods: &#123;</span></span><br><span class="line"><span class="string">      fn() &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    //设置过滤器</span></span><br><span class="line"><span class="string">    filters: &#123;</span></span><br><span class="line"><span class="string">      //第一个参数为 myText 的值， 第二个为使用 reverse 传入的</span></span><br><span class="line"><span class="string">      reverse(oldVal, params) &#123;</span></span><br><span class="line"><span class="string">        return params + ':' + oldVal.split('').reverse().join('')</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  new Vue(&#123;</span></span><br><span class="line"><span class="string">    el:'#app',</span></span><br><span class="line"><span class="string">    components:&#123;</span></span><br><span class="line"><span class="string">      app</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    template: '&lt;app/&gt;'</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>跟 component 和 components 类似</li></ul><h2 id="监听（watch）"><a href="#监听（watch）" class="headerlink" title="监听（watch）"></a>监听（watch）</h2><h3 id="基本监听"><a href="#基本监听" class="headerlink" title="基本监听"></a>基本监听</h3><p>只能监听基本数据类型，</p><ul><li>因为简单数据类型的变量指向的是内存中的数据，</li><li>而而复杂数据类型指向的是其在内存中的地址。</li><li>复杂类型改变其地址不变，所以监听不到</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#div1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          a: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// watch 用于监听变化，</span></span></span><br><span class="line"><span class="undefined">        watch: &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 第一个为 改变后的值，第二个为改变前的值</span></span></span><br><span class="line"><span class="undefined">          a(newVal, oldVal)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">`a从<span class="subst">$&#123;oldVal&#125;</span>变成<span class="subst">$&#123;newVal&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="复杂监听"><a href="#复杂监听" class="headerlink" title="复杂监听"></a>复杂监听</h3><p>可以监听到 复杂数据类型的改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">let</span> app = &#123;</span><br><span class="line">    template: </span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;button @click="stus[0].name='zhang'"&gt;改变数组naem属性值&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        stus: [&#123;<span class="attr">name</span>:<span class="string">'zhao'</span>&#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 深度监听</span></span><br><span class="line">    watch: &#123;</span><br><span class="line">      stus:&#123;</span><br><span class="line">        deep: <span class="literal">true</span>,</span><br><span class="line">        handler(newVal, oldVal) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'改变了'</span>);</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      app</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">'&lt;app/&gt;'</span></span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue&quot;&gt;&lt;a href=&quot;#vue&quot; class=&quot;headerlink&quot; title=&quot;vue&quot;&gt;&lt;/a&gt;vue&lt;/h1&gt;&lt;h2 id=&quot;双向数据绑定&quot;&gt;&lt;a href=&quot;#双向数据绑定&quot; class=&quot;headerlink&quot; title=&quot;双向数据绑定&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="vue" scheme="https://zhaozhoa.github.com/categories/vue/"/>
    
    
      <category term="vue" scheme="https://zhaozhoa.github.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>es6</title>
    <link href="https://zhaozhoa.github.com/2019/04/04/es6/"/>
    <id>https://zhaozhoa.github.com/2019/04/04/es6/</id>
    <published>2019-04-03T16:41:43.000Z</published>
    <updated>2019-04-03T16:42:53.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h1><h2 id="变量-amp-赋值"><a href="#变量-amp-赋值" class="headerlink" title="变量&amp;赋值"></a>变量&amp;赋值</h2><h3 id="var-的缺点"><a href="#var-的缺点" class="headerlink" title="var 的缺点"></a>var 的缺点</h3><ul><li>可以重复定义</li><li>不能限制修改</li><li>没有块级作用域</li></ul><h3 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h3><p>对比：</p><table><thead><tr><th>let</th><th>定义变量</th><th>有块级作用于</th><th>不能重复定义</th><th>声明不会提升</th></tr></thead><tbody><tr><td>const</td><td>定义常量</td><td>有块级作用于</td><td>不能重复定义</td><td>声明不会提升</td></tr><tr><td>var</td><td>定义变量</td><td>没有块级作用域</td><td>可以重复定义会覆盖</td><td>声明会提升</td></tr></tbody></table><h4 id="经典用法"><a href="#经典用法" class="headerlink" title="经典用法"></a>经典用法</h4><p><strong>解决for循环中的闭包</strong></p><ul><li>es6用法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"2"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"3"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    window.onload=function ()&#123;</span></span><br><span class="line"><span class="regexp">      let aBtn=document.getElementsByTagName('input');</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">      for(let i=0;i&lt;aBtn.length;i++)&#123;</span></span><br><span class="line"><span class="regexp">        aBtn[i].onclick=function ()&#123;</span></span><br><span class="line"><span class="regexp">          alert(i);</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ul><li>es5闭包实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;input type=<span class="string">"button"</span> value=<span class="string">"1"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"button"</span> value=<span class="string">"2"</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">"button"</span> value=<span class="string">"3"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"> &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    window.onload=function ()&#123;</span></span><br><span class="line"><span class="regexp">      var aBtn=document.getElementsByTagName('input');</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      for(var i=0;i&lt;aBtn.length;i++)&#123;</span></span><br><span class="line"><span class="regexp">        (function (i) &#123;</span></span><br><span class="line"><span class="regexp">          aBtn[i].onclick=function ()&#123;</span></span><br><span class="line"><span class="regexp">          alert(i);</span></span><br><span class="line"><span class="regexp">          &#125;;</span></span><br><span class="line"><span class="regexp">        &#125;)(i)</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h4><ul><li>把等号右边的 数组或 json 的元素依次赋值给<code></code>右边相同结构`的元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span>&#123;a,b,c&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><ul><li>es5 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">参数<span class="number">1</span>，参数<span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>es6 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(参数<span class="number">1</span>，参数<span class="number">2</span>)=&gt;&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>如果<code>有且仅有</code>一个参数  （）可以省略</li><li>如果函数体只是 return 返回的一句话 {} 可以省略</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> show = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>) <span class="comment">//9</span></span><br></pre></td></tr></table></figure><p>简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> show = <span class="function"><span class="params">a</span> =&gt;</span> a*<span class="number">3</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)<span class="comment">//9</span></span><br></pre></td></tr></table></figure><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>在 es5 中 函数的参数没有默认值 但可以通过函数体实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    b = b || <span class="number">2</span></span><br><span class="line">    c = c || <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.log(a+b+c)</span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">1</span>) <span class="comment">//6</span></span><br><span class="line">show(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>es6 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params">a, b = <span class="number">2</span>, c = <span class="number">3</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a+b+c)</span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">1</span>) <span class="comment">//6</span></span><br><span class="line">show(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><h4 id="参数展开"><a href="#参数展开" class="headerlink" title="参数展开"></a>参数展开</h4><p><strong>…名字  的用法</strong></p><p>作用一:</p><p>用于接收传进来的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a,b,c,...f</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>(a,b,c,f)</span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 2 3 [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>作用 二：</p><p>传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">arr.push(...arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure><h2 id="数组-amp-json"><a href="#数组-amp-json" class="headerlink" title="数组&amp;json"></a>数组&amp;json</h2><h3 id="map（映射）"><a href="#map（映射）" class="headerlink" title="map（映射）"></a>map（映射）</h3><p>表示一对一的关系，如：给定成绩数组，返回对应是否及格数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [30,50,67,80,90,45]=&gt;[false,false,true,true,true,false]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">30</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">45</span>]</span><br><span class="line">    <span class="keyword">let</span> arr2  = arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="keyword">let</span> arr2  = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item&gt;=<span class="number">60</span> )</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><p>map 的返回值是一个新数组</p><h3 id="filter（过滤）"><a href="#filter（过滤）" class="headerlink" title="filter（过滤）"></a>filter（过滤）</h3><p>过滤掉不及格的成绩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">30</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">45</span>]</span><br><span class="line">    <span class="keyword">let</span> arr2 = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">60</span>)</span><br><span class="line">    <span class="comment">//item &gt;=60 将其返回，否则过滤掉</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><p>filter 返回也使一个新数组</p><h3 id="forEach（遍历）"><a href="#forEach（遍历）" class="headerlink" title="forEach（遍历）"></a>forEach（遍历）</h3><p>求总成绩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">30</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">45</span>]</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      sum += item</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h3 id="reduce-（减少）"><a href="#reduce-（减少）" class="headerlink" title="reduce （减少）"></a>reduce （减少）</h3><p>进去一堆，出来一个，多用于汇总</p><p>求和</p><p>参数 tem 为临时值，用于保存每次相加的结果</p><p>tmp 第一次 为 30</p><pre><code>第二次 为 80</code></pre><p>​        …      147</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">30</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">45</span>]</span><br><span class="line">    <span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">tmp, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> tmp +item</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h3 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h3><p>去除数组重复的元素</p><p>先将 数组转换成集合，再将集合转换成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">30</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">45</span>,<span class="number">67</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">45</span>]</span><br><span class="line">  <span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">  <span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul><li>如果键值名字相同，可以只写一个</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> json = &#123;a, b&#125; <span class="comment">//相当于 let json = &#123;a: a, b: b&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(json);</span><br></pre></td></tr></table></figure><ul><li>省略 function</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"> <span class="keyword">let</span> b = <span class="number">12</span></span><br><span class="line"> <span class="keyword">let</span> json = &#123;</span><br><span class="line">   a, </span><br><span class="line">   b,</span><br><span class="line">   show()&#123;</span><br><span class="line">     <span class="keyword">return</span> a + b</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><p>用 ``符号将字符串包裹，用 ${变量}</p><p>优点：</p><ul><li>植入变量</li><li>可以行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    name: <span class="string">'zhao'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + json.name + <span class="string">'今年'</span> + json.age);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//用字符串模板</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;json.name&#125;</span>,今年<span class="subst">$&#123;json.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>class 类名{}</li><li>constructor（） {属性}</li><li>方法（）{}</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">     <span class="keyword">this</span>.age = age</span><br><span class="line">   &#125;</span><br><span class="line">   showname() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`我叫 <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   showage() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`我 <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'小米'</span>, <span class="number">18</span>)</span><br><span class="line"> p.showname() <span class="comment">//我叫 小米</span></span><br><span class="line"> p.showage() <span class="comment">//我 18</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>class 子类 extends 父类{}</li><li>super（继承父类的属性）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    showname() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`我叫 <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    showage() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`我 <span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, job) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, age);</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">  &#125;</span><br><span class="line">  showjob() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我的工作是 <span class="subst">$&#123;<span class="keyword">this</span>.job&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> worker = <span class="keyword">new</span> Worker(<span class="string">'小米'</span>, <span class="number">18</span>, <span class="string">'打杂的'</span>)</span><br><span class="line"></span><br><span class="line">worker.showage() <span class="comment">//我 18</span></span><br><span class="line">worker.showname() <span class="comment">//我叫 小米</span></span><br><span class="line">worker.showjob() <span class="comment">// 我的工作是 打杂的</span></span><br></pre></td></tr></table></figure><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><ol><li>创建一个promise对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = promise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line">p.then (<span class="function"><span class="params">()</span> =&gt;</span>&#123;&#125;,() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>promise 对象中有两参数，一个表示请求成功后的回调函数，一个是请求失败的回调函数</p><p>then 方法接收两个函数，第一个是 resolve 的回调函数，第二个是 reject 的回调函数</p><p><strong>使用：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>,  (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/b.txt'</span>, <span class="string">'utf8'</span>,  (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/c.txt'</span>, <span class="string">'utf8'</span>,  (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1</span><br><span class="line">  .then( <span class="function">(<span class="params">data</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="comment">// 当 p1 读取成功的时候</span></span><br><span class="line">    <span class="comment">// 当前函数中 return 的结果就可以在后面的 then 中 function 接收到</span></span><br><span class="line">    <span class="comment">// 真正有用的是：我们可以 return 一个 Promise 对象</span></span><br><span class="line">    <span class="comment">// 当 return 一个 Promise 对象的时候，后续的 then 方法中的第一个参数会作为 p2 的 resolve</span></span><br><span class="line">    <span class="keyword">return</span> p2</span><br><span class="line">  &#125;,  (err) =&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败了'</span>, err)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then( <span class="function">(<span class="params">data</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="keyword">return</span> p3</span><br><span class="line">  &#125;)</span><br><span class="line">  .then( <span class="function">(<span class="params">data</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>promise.all 使用</strong></p><p>promise.all 方法可以简化 then 方法的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/a.txt'</span>, <span class="string">'utf8'</span>,  (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/b.txt'</span>, <span class="string">'utf8'</span>,  (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/c.txt'</span>, <span class="string">'utf8'</span>,  (err, data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2,p3]).then(<span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//解构赋值</span></span><br><span class="line">  <span class="keyword">let</span> [a, b, c] =arr;</span><br><span class="line">  alert(<span class="string">'成功'</span>)</span><br><span class="line">&#125;,err=&gt; &#123;</span><br><span class="line">  alert(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>all 方法中 以数组形式 传入promise 对象，后面 then 中用数组接收返回结果 </p><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><ul><li>generator 可以使函数 运行时暂停</li><li>yield 可以设置断点</li><li>generator 函数是有返回值的</li><li>执行 generator 函数 需要用到 返回值 中的 next() 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个 generator 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用 yield 可以设置 断点 ，</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'aaa'</span>)</span><br><span class="line">  <span class="keyword">yield</span></span><br><span class="line">  alert(<span class="string">'bbb'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收 generator 函数 的返回值</span></span><br><span class="line"><span class="keyword">let</span> gen = show()</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">gen.next() <span class="comment">//此时函数执行到 yield 处停止 // aaa</span></span><br><span class="line">gen.next() <span class="comment">//执行yield 下半部分 // bbb</span></span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><ul><li>传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'aaa'</span>)</span><br><span class="line">  <span class="comment">// 接受参数</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">yield</span></span><br><span class="line">  alert(<span class="string">'bbb'</span> + a) <span class="comment">// bbb12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = show()</span><br><span class="line"></span><br><span class="line">gen.next() </span><br><span class="line">gen.next(<span class="number">12</span>) <span class="comment">//传参</span></span><br></pre></td></tr></table></figure><ul><li>返回</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'aaa'</span>)</span><br><span class="line">  <span class="comment">// 返回值</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">55</span></span><br><span class="line">  alert(<span class="string">'bbb'</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = show()</span><br><span class="line"><span class="keyword">let</span> res1 = gen.next() </span><br><span class="line"><span class="built_in">console</span>.log(res1) <span class="comment">// &#123;value: 55, done: false&#125;</span></span><br><span class="line"><span class="keyword">let</span> res2 = gen.next() </span><br><span class="line"><span class="built_in">console</span>.log(res2) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>done ，表示函数是否执行完成</p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data1 = <span class="keyword">await</span> $.ajax(url: <span class="string">'1.text'</span>,<span class="attr">dataType</span>: <span class="string">'json'</span>)</span><br><span class="line">    <span class="keyword">let</span> data2 = <span class="keyword">await</span> $.ajax(url: <span class="string">'2.text'</span>,<span class="attr">dataType</span>: <span class="string">'json'</span>)</span><br><span class="line">    <span class="keyword">let</span> data3 = <span class="keyword">await</span> $.ajax(url: <span class="string">'3.text'</span>,<span class="attr">dataType</span>: <span class="string">'json'</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      alert(<span class="string">'出错'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p>async 中的 await 异步操作 会变成按顺序执行 ，同时返回成功的结果，可以用try-catch进行错误捕获，得到错误结果</p><h2 id="编译——-gt-es5"><a href="#编译——-gt-es5" class="headerlink" title="编译——&gt;es5"></a>编译——&gt;es5</h2><p>babel编译</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;es6&quot;&gt;&lt;a href=&quot;#es6&quot; class=&quot;headerlink&quot; title=&quot;es6&quot;&gt;&lt;/a&gt;es6&lt;/h1&gt;&lt;h2 id=&quot;变量-amp-赋值&quot;&gt;&lt;a href=&quot;#变量-amp-赋值&quot; class=&quot;headerlink&quot; title=&quot;变量&amp;
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="es6" scheme="https://zhaozhoa.github.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>koa</title>
    <link href="https://zhaozhoa.github.com/2019/03/31/koa/"/>
    <id>https://zhaozhoa.github.com/2019/03/31/koa/</id>
    <published>2019-03-31T10:16:42.000Z</published>
    <updated>2019-03-31T10:17:51.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h1><p><strong>koa 中所有的异步操作都需要用 async /await</strong></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i koa koa-static koa-better-body koa-convert koa-router -D</span><br></pre></td></tr></table></figure><ul><li>koa-static 用于开放静态资源</li><li>koa-better-body 用于解析 post 提交数据</li><li>koa-convert 用于兼容中间件</li><li>koa-router 用于路由</li></ul><h2 id="koa-入门"><a href="#koa-入门" class="headerlink" title="koa 入门"></a>koa 入门</h2><ul><li>引入模块</li><li>使用</li><li>监听端口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>koa 对router 强依赖，不像 express 一样可以自带简单路由</p><p><strong>express 中的简单路由</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = express</span><br><span class="line">server.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是这个不能在 koa 中使用，要在 koa 中使用路由，必须</p><ul><li>引入路由模块，</li><li>创建路由</li><li>配置中间件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router1 = router()</span><br><span class="line">server.use(router1.routes())</span><br><span class="line"></span><br><span class="line">router1.get(<span class="string">'/'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="async-中的-ctx-对象-的重要属性"><a href="#async-中的-ctx-对象-的重要属性" class="headerlink" title="async 中的 ctx 对象 的重要属性"></a>async 中的 ctx 对象 的重要属性</h2><ul><li><p>ctx. req</p><p>原生的 req 对象</p></li><li><p>ctx.request</p><p>koa 封装的 req 对象</p></li><li><p>ctx.res</p><p>原生的 res 对象</p></li><li><p>ctx.response</p><p>koa 封装的 res 对象</p></li></ul><h3 id="ctx-response"><a href="#ctx-response" class="headerlink" title="ctx.response"></a>ctx.response</h3><ul><li>设置响应头</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置一个 a 的响应头， 值为 12</span></span><br><span class="line">ctx.response.set(<span class="string">'a'</span>, <span class="number">12</span>)</span><br></pre></td></tr></table></figure><ul><li>设置返回内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向浏览器返回json</span></span><br><span class="line">ctx.response.body = &#123;<span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>设置状态码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.response.status = <span class="number">403</span></span><br></pre></td></tr></table></figure><h3 id="ctx-request"><a href="#ctx-request" class="headerlink" title="ctx.request"></a>ctx.request</h3><ul><li>获取请求头</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.request.headers</span><br></pre></td></tr></table></figure><h2 id="开放静态文件，-返回文件"><a href="#开放静态文件，-返回文件" class="headerlink" title="开放静态文件， 返回文件"></a>开放静态文件， 返回文件</h2><p>开放 www 目录下的资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径转化成绝对路径</span></span><br><span class="line">server.use(<span class="keyword">static</span>(path.resolve(<span class="string">'./www'</span>)))</span><br></pre></td></tr></table></figure><p> 如果 www 目录下面 有一个 1.html 我文件，则可以通过 </p><p><a href="http://localhost:8888/1.html" target="_blank" rel="noopener">http://localhost:8888/1.html</a>请求</p><h3 id="koa-static-存在问题"><a href="#koa-static-存在问题" class="headerlink" title="koa-static 存在问题"></a>koa-static 存在问题</h3><ul><li>发送给浏览器的文件没有经过压缩</li><li>发送的文件不会缓存</li></ul><p><strong>解决方法</strong></p><p>使用中间件 <code>koa-static-cache</code> 代替 koa-static</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> staticCache = <span class="built_in">require</span>(<span class="string">'koa-static-cache'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径转化成绝对路径</span></span><br><span class="line">server.use(staticCache(path.resolve(<span class="string">'./www'</span>)))</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><h3 id="获取-get-数据"><a href="#获取-get-数据" class="headerlink" title="获取 get 数据"></a>获取 get 数据</h3><p><strong>获取问号参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.request.query</span><br></pre></td></tr></table></figure><p><strong>获取路由参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.params</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = router()</span><br><span class="line">server.use(r1.routes())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由参数为 user，和 age</span></span><br><span class="line">r1.get(<span class="string">'/:user/:age'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.response.body = <span class="string">'sadfasd'</span></span><br><span class="line">  <span class="built_in">console</span>.log(ctx.params); <span class="comment">//&#123; user: '小明', age: '54' &#125;</span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>请求url：<a href="http://localhost:8888/小明/54" target="_blank" rel="noopener">http://localhost:8888/小明/54</a> ，</p><h3 id="获取-post-数据"><a href="#获取-post-数据" class="headerlink" title="获取 post 数据"></a>获取 post 数据</h3><ol><li>引入第三方模块 koa-better-body，用来解析 post 提交的数据</li><li>引入 koa-convert ，用来 兼容 koa-better-body 在 koa2版本的使用</li></ol><ul><li><p>ctx.request.fields</p><p>可以获取 post 方式提交的 表单，文件信息</p></li><li><p>ctx.request.files</p><p>只能获取 post 方式提交的 文件信息</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> betterBody = <span class="built_in">require</span>(<span class="string">'koa-better-body'</span>)</span><br><span class="line"><span class="keyword">const</span> staticCache = <span class="built_in">require</span>(<span class="string">'koa-static-cache'</span>)</span><br><span class="line"><span class="keyword">const</span> convert = <span class="built_in">require</span>(<span class="string">'koa-convert'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源</span></span><br><span class="line">server.use(staticCache(path.resolve(<span class="string">'./www'</span>)))</span><br><span class="line"></span><br><span class="line">server.use(convert(betterBody(&#123;</span><br><span class="line">  <span class="comment">//保存提交的文件地址</span></span><br><span class="line">  uploadDir: path.resolve(<span class="string">'./upload'</span>),</span><br><span class="line">  <span class="comment">//是否保留上传文件的扩展名（一般不用保留）</span></span><br><span class="line">  keepExtensions: <span class="literal">true</span></span><br><span class="line">&#125;)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//不用路由，可以获取所有的提交</span></span><br><span class="line">server.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.fields);</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.files);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="cookie-amp-session"><a href="#cookie-amp-session" class="headerlink" title="cookie&amp;session"></a>cookie&amp;session</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li>获取cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookies.get(cookie名字)</span><br></pre></td></tr></table></figure><ul><li>设置cookie</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookes.set(cookie名字，值，option)</span><br></pre></td></tr></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>使用 第三方模块 koa- session</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>)</span><br></pre></td></tr></table></figure><p>配置中间件</p><p>{}中填入session 的信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.use(session(&#123;&#125;, server))</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.session</span><br></pre></td></tr></table></figure><h2 id="ejs-后端渲染"><a href="#ejs-后端渲染" class="headerlink" title="ejs 后端渲染"></a>ejs 后端渲染</h2><p>安装 ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'koa-ejs'</span>)</span><br></pre></td></tr></table></figure><p><code>将模板文件创建在 template 目录下 名称为 template.html</code></p><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'koa-ejs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">ejs(server, &#123;</span><br><span class="line">  <span class="comment">//模板文件目录</span></span><br><span class="line">  root: path.resolve(<span class="string">'template'</span>),</span><br><span class="line">  layout: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//模板文件 扩展名</span></span><br><span class="line">  viewExt: <span class="string">'html'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.use(<span class="keyword">async</span> ctx=&gt;&#123;</span><br><span class="line">  <span class="comment">//渲染文件 template，不用带扩展名，&#123;渲染数据&#125;</span></span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">'template'</span>, &#123;</span><br><span class="line">    name: <span class="string">'zhao'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>引入中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db = <span class="built_in">require</span>(<span class="string">'mysql-pro'</span>)</span><br></pre></td></tr></table></figure><p><strong>优点:</strong></p><ul><li>事务管理（Transaction）</li><li>防止 SQL 注入</li></ul><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)</span><br><span class="line"><span class="keyword">const</span> Mysql = <span class="built_in">require</span>(<span class="string">'mysql-pro'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Mysql(&#123;</span><br><span class="line"> mysql: &#123;</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    database: <span class="string">'test'</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> koa()</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1= router()</span><br><span class="line">server.use(r1.routes())</span><br><span class="line"></span><br><span class="line">r1.get(<span class="string">'/user'</span>, <span class="keyword">async</span> ctx=&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> id = ctx.query.id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开启事务</span></span><br><span class="line">  <span class="keyword">await</span> db.startTransaction()</span><br><span class="line"><span class="comment">//防止sql 注入</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> db.executeTransaction(<span class="string">'SELECT * FROM user WHERE ID=?;'</span>,[id])</span><br><span class="line">  ctx.response.body = data</span><br><span class="line">  <span class="comment">//关闭事务</span></span><br><span class="line">  <span class="keyword">await</span> db.stopTransaction()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>注意:</code></p><ul><li>开启事务，对应着要关闭事务</li><li>为了防止 sql 注入，mysql-pro 要求将 需要的参数用 <code>?</code> 代替，然后将参数用数组的形式放到语句后面。</li></ul><h3 id="事务（transaction）"><a href="#事务（transaction）" class="headerlink" title="事务（transaction）"></a>事务（transaction）</h3><p>性质：</p><ul><li><p>A  原子性</p><p>事务内的事情，要么都发生，要么都不发生</p></li><li><p>C  持久性</p><p>只要事务提交，他的作用就是永久的</p></li><li><p>I 隔离性</p><p>各事务之间独立，不干扰</p></li><li><p>D 一致性</p><p>事务前后的状态一致</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;koa&quot;&gt;&lt;a href=&quot;#koa&quot; class=&quot;headerlink&quot; title=&quot;koa&quot;&gt;&lt;/a&gt;koa&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;koa 中所有的异步操作都需要用 async /await&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
      <category term="node" scheme="https://zhaozhoa.github.com/categories/node/"/>
    
    
      <category term="koa" scheme="https://zhaozhoa.github.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>express</title>
    <link href="https://zhaozhoa.github.com/2019/03/30/express/"/>
    <id>https://zhaozhoa.github.com/2019/03/30/express/</id>
    <published>2019-03-30T02:38:03.000Z</published>
    <updated>2019-03-30T02:38:51.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><h2 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> experss = <span class="built_in">require</span>(<span class="string">'experss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = experss()</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/a'</span>, (req, res)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'sadf'</span>)</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用中间件 开放 www下面的静态资源</span></span><br><span class="line">server.use(experss.static(<span class="string">'www/'</span>))</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ol><li>插件 –补充框架的功能</li><li>类似于流水线</li></ol><h3 id="中间件的next-方法（流水线）"><a href="#中间件的next-方法（流水线）" class="headerlink" title="中间件的next()方法（流水线）"></a>中间件的next()方法（流水线）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> experss = <span class="built_in">require</span>(<span class="string">'experss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = experss()</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/a'</span>, (req, res, next)=&gt;&#123;</span><br><span class="line">  res.send(<span class="string">'sadf'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sssssss'</span>);</span><br><span class="line">  </span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/a'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'dddddddddddd'</span>);</span><br><span class="line">  </span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">server.use(experss.static(<span class="string">'www/'</span>))</span><br></pre></td></tr></table></figure><p>添加了 next(), 程序会执行向下执行</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>path 模块中有 resolve() 方法 可以获取文件绝对路径</p><h3 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a>path.basename</h3><p>作用：</p><p>获取路径中的文件名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.basename(<span class="string">'c:a/b/c/d/index.js'</span>)</span><br><span class="line"> <span class="string">'index.js'</span></span><br><span class="line"></span><br><span class="line">path.basename(<span class="string">'c:a/b/c/index.js'</span>, <span class="string">'.js'</span>)</span><br><span class="line"> <span class="string">'index'</span></span><br></pre></td></tr></table></figure><h3 id="path-dirname"><a href="#path-dirname" class="headerlink" title="path.dirname"></a>path.dirname</h3><p>作用：</p><p>获取文件目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.dirname(<span class="string">'c:a/b/c/index'</span>)</span><br><span class="line"> c:a/b/c<span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a>path.extname</h3><p>作用：</p><p>获取文件扩展名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.extname(<span class="string">'c:/a/b/c/index.js'</span>)</span><br><span class="line"> <span class="string">'.js'</span></span><br></pre></td></tr></table></figure><h3 id="path-isAbsolute"><a href="#path-isAbsolute" class="headerlink" title="path.isAbsolute"></a>path.isAbsolute</h3><p>作用:</p><p>判断是否为绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">path.isAbsolute(<span class="string">'a/b/c/index'</span>)</span><br><span class="line"> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">path.isAbsolute(<span class="string">'/a/b/c/index'</span>)</span><br><span class="line"> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">path.isAbsolute(<span class="string">'./a/b/c/index'</span>)</span><br><span class="line"> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="path-parse"><a href="#path-parse" class="headerlink" title="path.parse"></a>path.parse</h3><p>作用：</p><p>获取路径的所有信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">path.parse(<span class="string">'c:/a/b/c/index.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#123; <span class="attr">root</span>: <span class="string">'c:/'</span>,</span><br><span class="line">  dir: <span class="string">'c:/a/b/c'</span>,</span><br><span class="line">  base: <span class="string">'index.html'</span>,</span><br><span class="line">  ext: <span class="string">'.html'</span>,</span><br><span class="line">  name: <span class="string">'index'</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="path-join"><a href="#path-join" class="headerlink" title="path.join()"></a>path.join()</h3><p>作用：</p><p>追加路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">'c:/a/'</span>,<span class="string">'b'</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="string">'c:\\a\\b'</span></span><br></pre></td></tr></table></figure><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><h3 id="获取-get-数据"><a href="#获取-get-数据" class="headerlink" title="获取 get 数据"></a>获取 get 数据</h3><p>req.query属性可以获取（json方式）</p><h3 id="获取-post-数据"><a href="#获取-post-数据" class="headerlink" title="获取 post 数据"></a>获取 post 数据</h3><p>使用第三方模块 body-parser</p><p>安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pody-parser -D</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyPaser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br></pre></td></tr></table></figure><p>配置中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br></pre></td></tr></table></figure><p>获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.post(<span class="string">'/a'</span>, (req, res)=&gt;&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(req.body);</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="创建路由的基本步骤"><a href="#创建路由的基本步骤" class="headerlink" title="创建路由的基本步骤"></a>创建路由的基本步骤</h3><ol><li>创建路由</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userRouter = express.Router()</span><br></pre></td></tr></table></figure><ol start="2"><li>设置父级路由</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有和 /user 有关的路由都由 userRouter 处理</span></span><br><span class="line">server.use(<span class="string">'/user'</span>, userRouter)</span><br></pre></td></tr></table></figure><ol start="3"><li>设置子路由</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理 /user/ 的路由</span></span><br><span class="line">userRouter.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'首页'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//处理 /user/a 的路由</span></span><br><span class="line">userRouter.get(<span class="string">'/a'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'aaaaaaa'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h3><p>将子路由封装到一个模块 user.js 中， 并用 module.exports 导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = express.Router()</span><br><span class="line">router.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'首页'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">'/a'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'aaaaaaa'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>修改父级路由，只需要请求该模块即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.use(<span class="string">'/user'</span>,<span class="built_in">require</span>(<span class="string">'./routes/user.js'</span>))</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="状态码返回"><a href="#状态码返回" class="headerlink" title="状态码返回"></a>状态码返回</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.sendStatus(<span class="number">404</span>) <span class="comment">//返回404 状态码</span></span><br></pre></td></tr></table></figure><p>相当于原生的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.writeHeader(<span class="number">404</span>)</span><br><span class="line">res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.redirect(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure><p>相当于原生的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">'location'</span>,<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">res.writhHeader(<span class="number">301</span>)</span><br><span class="line">res.end()</span><br></pre></td></tr></table></figure><h3 id="开放静态资源"><a href="#开放静态资源" class="headerlink" title="开放静态资源"></a>开放静态资源</h3><p>开放www目录下面的静态资源可以被用户访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.use(experss.static(<span class="string">'www/'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h1&gt;&lt;h2 id=&quot;基本使用步骤&quot;&gt;&lt;a href=&quot;#基本使用步骤&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="node" scheme="https://zhaozhoa.github.com/categories/node/"/>
    
    
      <category term="express" scheme="https://zhaozhoa.github.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="https://zhaozhoa.github.com/2019/03/29/canvas/"/>
    <id>https://zhaozhoa.github.com/2019/03/29/canvas/</id>
    <published>2019-03-29T09:29:39.000Z</published>
    <updated>2019-03-29T09:30:56.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas-画布"><a href="#canvas-画布" class="headerlink" title="canvas 画布"></a>canvas 画布</h1><ul><li><canvas>标签必须在行内设置 width 和 height，不能在其他地方添加。</canvas></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作画布基础步骤"><a href="#操作画布基础步骤" class="headerlink" title="操作画布基础步骤"></a>操作画布基础步骤</h2><ol><li>创建画布对象，并设置宽高</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">id</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取画布对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oC = <span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>获取上下文</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gd = oC.getContext(<span class="string">'2d'</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>设置起始坐标</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gd.moveTo(<span class="number">100</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>设置移动终点坐标</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gd.lineTo(<span class="number">200</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>设置线条颜色</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gd.strokeStyle = <span class="string">'red'</span></span><br></pre></td></tr></table></figure><ol start="7"><li>绘画</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gd.stroke()</span><br></pre></td></tr></table></figure><ol start="8"><li><code>重新开始绘画路径（防止干扰上一条路径）</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gd.beginPath()</span><br></pre></td></tr></table></figure><h2 id="画布常用方法"><a href="#画布常用方法" class="headerlink" title="画布常用方法"></a>画布常用方法</h2><ul><li>moveTo(x, y) ： 设置起始坐标</li><li>lineTo(x, y)：设置终点坐标</li><li>stroke()：绘画（描边）</li><li>fill()：填充</li><li>beginPath()：开始新路径，清除之前路径设置</li><li>closePath()：闭合当前路径</li></ul><h2 id="常见图像"><a href="#常见图像" class="headerlink" title="常见图像"></a>常见图像</h2><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><ul><li>rect(x坐标，y坐标，宽，高) ,    路径操作，需要描边才能生成图形</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gd.beginPath()</span><br><span class="line">gd.rect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">gd.strokeStyle = <span class="string">'pink'</span></span><br><span class="line">gd.stroke()</span><br></pre></td></tr></table></figure><ul><li>stokeRect(x坐标，y坐标，宽，高) ,     图形操作，直接生成图形</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gd.beginPath()</span><br><span class="line">gd.strokeStyle = <span class="string">'pink'</span></span><br><span class="line">gd.strokeRect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><ul><li>fillRect(x坐标，y坐标，宽，高) ,     图形操作，直接生成图形</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gd.beginPath()</span><br><span class="line">gd.fillStyle = <span class="string">'pink'</span></span><br><span class="line">gd.fillRect(<span class="number">300</span>,<span class="number">300</span>,<span class="number">100</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><ul><li>clearRect(x坐标，y坐标，宽，高),    清除图形</li></ul><h3 id="弧（圆）"><a href="#弧（圆）" class="headerlink" title="弧（圆）"></a>弧（圆）</h3><p>arc(圆心的x 坐标， 圆心的y坐标，半径，起始角度，终止角度，旋转反向）</p><ul><li>角度时以弧度为单位（Math.PI = 180度）</li><li>起点在圆心右侧一个半径的位置</li><li>最后一个参数默认为 false 默认为 逆时针</li><li>路径操作，需要描边才能显示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oC = <span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">let</span> gb = oC.getContext(<span class="string">'2d'</span>)</span><br><span class="line">      </span><br><span class="line">gb.beginPath()</span><br><span class="line">gb.arc(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>,<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">gb.stroke()</span><br></pre></td></tr></table></figure><h2 id="canvas-的-transform"><a href="#canvas-的-transform" class="headerlink" title="canvas 的 transform"></a>canvas 的 transform</h2><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><ol><li>rotate 操作 必须放在 图形绘制完成之前</li><li>rotate 操作其实是整个画布都在旋转，并不是绘制的图形旋转</li></ol><ul><li>translate</li><li>scale</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;canvas-画布&quot;&gt;&lt;a href=&quot;#canvas-画布&quot; class=&quot;headerlink&quot; title=&quot;canvas 画布&quot;&gt;&lt;/a&gt;canvas 画布&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;canvas&gt;标签必须在行内设置 width 和 height，不能在
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="canvas" scheme="https://zhaozhoa.github.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>缓存和多进程</title>
    <link href="https://zhaozhoa.github.com/2019/03/24/%E7%BC%93%E5%AD%98%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>https://zhaozhoa.github.com/2019/03/24/缓存和多进程/</id>
    <published>2019-03-24T10:58:01.000Z</published>
    <updated>2019-03-24T11:00:22.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存和多进程"><a href="#缓存和多进程" class="headerlink" title="缓存和多进程"></a>缓存和多进程</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="http缓存消息"><a href="#http缓存消息" class="headerlink" title="http缓存消息"></a>http缓存消息</h3><h4 id="第一次请求，无缓存，"><a href="#第一次请求，无缓存，" class="headerlink" title="第一次请求，无缓存，"></a>第一次请求，无缓存，</h4><p>服务端（S) 向 客户端 （C) 发送的http响应头部有</p><p><code>last-modified: Tue, 26 Feb 2019 10:51:39 GMT</code></p><p>告诉客户端 请求资源最后的修改日期</p><h4 id="第二次请求，有缓存"><a href="#第二次请求，有缓存" class="headerlink" title="第二次请求，有缓存"></a>第二次请求，有缓存</h4><p>C —&gt; S</p><p><code>If-Modified-Since: Tue, 26 Feb 2019 10:51:39 GMT</code> </p><p>S—-&gt; C </p><p><code>304</code>状态码</p><h3 id="node-实现缓存"><a href="#node-实现缓存" class="headerlink" title="node 实现缓存"></a>node 实现缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = url.parse(req.url)</span><br><span class="line">  <span class="comment">// console.log(pathname);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取文件修改时间</span></span><br><span class="line">  fs.stat(<span class="string">`www<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, stat) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       res.writeHead(<span class="number">404</span>)</span><br><span class="line">       res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">       res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果请求头中有 If-Modified-Since 说明不是第一次获取数据，并且在第一次获取的时候，服务器传给浏览器 Last-Modif 响应头</span></span><br><span class="line">      <span class="keyword">if</span> (req.headers[<span class="string">'if-modified-since'</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>(req.headers[<span class="string">'if-modified-since'</span>])</span><br><span class="line">        <span class="keyword">let</span> time_client = <span class="built_in">Math</span>.floor(oDate.getTime() / <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">let</span> time_server = <span class="built_in">Math</span>.floor(stat.mtime.getTime() / <span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 比较那个版本更新</span></span><br><span class="line">        <span class="keyword">if</span> (time_client &lt; time_server) &#123;</span><br><span class="line">          sendFileToClient()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.writeHead(<span class="number">304</span>)</span><br><span class="line">          res.write(<span class="string">'Not Modified'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sendFileToClient()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sendFileToClient</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;pathname&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">/* 添加 http 响应头，并将文件的修改世界转换成 格林威治时间 */</span></span><br><span class="line">        res.setHeader(<span class="string">'Last-Modified'</span>, stat.mtime.toGMTString())</span><br><span class="line">        rs.pipe(res)</span><br><span class="line">        rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>)</span><br><span class="line">          res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">          res.end()</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">8888</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><table><thead><tr><th>多线程</th><th>性能高、复杂、编程复杂</th></tr></thead><tbody><tr><td>多进程</td><td>性能略低、简单</td></tr></tbody></table><p><strong>nodeJs 默认为 单进程、单线程</strong></p><p>但是 nodejs可以设置成多进程</p><p>多进程的优点：性能高，安全</p><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ol><li>普通程序不能创建进程，只有系统进程才可以创建进程</li><li>进程是分裂出来的，但是只有主进程可以分裂能力</li><li>分裂出来的进程执行同一套代码</li><li>父子进程之间可以共享’句柄‘</li></ol><h3 id="node-的多进程"><a href="#node-的多进程" class="headerlink" title="node 的多进程"></a>node 的多进程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">// 引入 cluster 多进程模块</span></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>)</span><br><span class="line"><span class="comment">// cpu 为几核 几个进程可以同时工作，所以需要引入系统模块</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line"><span class="comment">// 获取当前进程的信息模块</span></span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">'process'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前是否为主进程</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; os.cpus().length; i++) &#123;</span><br><span class="line">   cluster.fork()</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'主进程'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(process.pid);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="string">'aaaa'</span>);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  server.listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器开好了，在8888上'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存和多进程&quot;&gt;&lt;a href=&quot;#缓存和多进程&quot; class=&quot;headerlink&quot; title=&quot;缓存和多进程&quot;&gt;&lt;/a&gt;缓存和多进程&lt;/h1&gt;&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="node" scheme="https://zhaozhoa.github.com/categories/node/"/>
    
    
      <category term="node" scheme="https://zhaozhoa.github.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>流与压缩</title>
    <link href="https://zhaozhoa.github.com/2019/03/23/%E6%B5%81%E4%B8%8E%E5%8E%8B%E7%BC%A9/"/>
    <id>https://zhaozhoa.github.com/2019/03/23/流与压缩/</id>
    <published>2019-03-23T12:47:42.000Z</published>
    <updated>2019-03-23T12:48:47.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>作用：边读取，边转发，减少内存存储压力</p><p>分类</p><table><thead><tr><th>流方式</th><th>常见的流</th></tr></thead><tbody><tr><td>读取流</td><td>req, fs.createReadStream</td></tr><tr><td>写入流</td><td>res, fs.createWriteStream</td></tr><tr><td>读写流</td><td>压缩，加密</td></tr></tbody></table><h2 id="流操作的基本过程"><a href="#流操作的基本过程" class="headerlink" title="流操作的基本过程"></a>流操作的基本过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">//建立一个读取流，读取 1.txt 文件</span></span><br><span class="line"><span class="keyword">let</span> rs = createReadStream(<span class="string">'1.text'</span>)</span><br><span class="line"><span class="comment">//建立写入流写的文件 命名为 2.txt</span></span><br><span class="line"><span class="keyword">let</span> ws = createWriteStream(<span class="string">'2.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对接</span></span><br><span class="line">rs.pipe（ws)</span><br></pre></td></tr></table></figure><p>这样就可以将 1.txt 文件 一边读取，一边写入到 2.txt 文件中</p><p><strong>注意：</strong>流是有方向的，只能从读取流入写入</p><h2 id="流操作再node中的应用"><a href="#流操作再node中的应用" class="headerlink" title="流操作再node中的应用"></a>流操作再node中的应用</h2><h3 id="文件读取和写入的应用"><a href="#文件读取和写入的应用" class="headerlink" title="文件读取和写入的应用"></a>文件读取和写入的应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;req.url&#125;</span>`</span>)</span><br><span class="line">  rs.pipe(res)</span><br><span class="line">  </span><br><span class="line">  rs.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">404</span>)</span><br><span class="line">    res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><h3 id="双向流–-压缩文件"><a href="#双向流–-压缩文件" class="headerlink" title="双向流– 压缩文件"></a>双向流– 压缩文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入压缩模块</span></span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rs = fs.createReadStream(<span class="string">'jquery.js'</span>)</span><br><span class="line"><span class="keyword">let</span> ws = fs.createWriteStream(<span class="string">'jquery.js.gz'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建压缩对象</span></span><br><span class="line"><span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向流绑定</span></span><br><span class="line">rs.pipe(gz).pipe(ws)</span><br><span class="line"></span><br><span class="line">ws.on(<span class="string">'finish'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="综合–将文件用node-压缩然后返回给浏览器"><a href="#综合–将文件用node-压缩然后返回给浏览器" class="headerlink" title="综合–将文件用node 压缩然后返回给浏览器"></a>综合–将文件用node 压缩然后返回给浏览器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rs = fs.createReadStream(<span class="string">`www<span class="subst">$&#123;req.url&#125;</span>`</span>)</span><br><span class="line">  </span><br><span class="line">  res.setHeader(<span class="string">'content-encoding'</span>, <span class="string">'gzip'</span>)</span><br><span class="line">  <span class="keyword">let</span> gz = zlib.createGzip()</span><br><span class="line">  rs.pipe(gz).pipe(res)</span><br><span class="line">  rs.on(<span class="string">'error'</span>, () =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">404</span>)</span><br><span class="line">    res.write(<span class="string">'Not Fond'</span>)</span><br><span class="line">    res.end()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>因为返回给浏览器的是压缩文件，所以应该设置响应头为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(&apos;content-encoding&apos;, &apos;gzip&apos;)</span><br></pre></td></tr></table></figure><p>否则浏览器不会解析压缩文件，而回将其下载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流&quot;&gt;&lt;a href=&quot;#流&quot; class=&quot;headerlink&quot; title=&quot;流&quot;&gt;&lt;/a&gt;流&lt;/h1&gt;&lt;p&gt;作用：边读取，边转发，减少内存存储压力&lt;/p&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;流方式&lt;/th&gt;
&lt;th&gt;常见
      
    
    </summary>
    
      <category term="node" scheme="https://zhaozhoa.github.com/categories/node/"/>
    
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://zhaozhoa.github.com/2019/03/23/%E7%BB%A7%E6%89%BF/"/>
    <id>https://zhaozhoa.github.com/2019/03/23/继承/</id>
    <published>2019-03-23T02:43:35.000Z</published>
    <updated>2019-03-23T03:15:54.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p> 继承是类(class) 与(class) 之间的关系（父级别和子级别的关系），js 中没有类，但可以通过构造函数模拟类，然后通过原型来实现继承。</p><p>继承也是为了数据共享。</p><p>原型的作用：</p><ol><li>共享数据，节省内存空间</li><li>实现继承</li></ol><h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>通过改变原型链实现继承</p><p>缺陷： 在原型链改变的时候会进行赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name, weight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.weight = weight</span><br><span class="line">  &#125;</span><br><span class="line">  Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line">  Dog.prototype = <span class="keyword">new</span> Animal(<span class="string">'哮天犬'</span>, <span class="string">'50kg'</span>)</span><br><span class="line">  Dog.prototype.bite = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>咬人`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ErHa</span>(<span class="params">gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line">  ErHa.prototype = <span class="keyword">new</span> Dog(<span class="string">'黑白色'</span>)</span><br><span class="line">  ErHa.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>体重为<span class="subst">$&#123;<span class="keyword">this</span>.weight&#125;</span>性别为：<span class="subst">$&#123;<span class="keyword">this</span>.gender&#125;</span>颜色为 <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> erHa = <span class="keyword">new</span> ErHa(<span class="string">'母'</span>)</span><br><span class="line">  erHa.eat()</span><br><span class="line">  erHa.bite()</span><br><span class="line">  erHa.play()</span><br></pre></td></tr></table></figure><h2 id="借用构造函数实现继承"><a href="#借用构造函数实现继承" class="headerlink" title="借用构造函数实现继承"></a>借用构造函数实现继承</h2><p>方法：通过<code>构造函数名.call(当前对象，属性1，属性2)</code></p><p>解决了属性的继承，并且只不重复</p><p>缺陷： 父级别的累中的方法不能继承</p><p>如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender, weight</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">    <span class="keyword">this</span>.weight = weight</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, gender, weight, score</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 借用构造函数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>,name, age, gender, weight)</span><br><span class="line">    <span class="keyword">this</span>.score = score</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu1 = <span class="keyword">new</span> Student(<span class="string">'小明'</span>, <span class="number">10</span>, <span class="string">'男'</span>, <span class="string">'30kg'</span>, <span class="number">100</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu1.name, stu1.age, stu1.gender, stu1.weight,stu1.score);</span><br><span class="line">  <span class="comment">//小明 10 男 30kg 100</span></span><br><span class="line">  stu1.sayHi() <span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'小红'</span>, <span class="number">12</span>, <span class="string">'女'</span>, <span class="string">'30kg'</span>, <span class="number">80</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu2.name, stu2.age, stu2.gender, stu2.weight,stu2.score);</span><br><span class="line">  <span class="comment">//小红 12 女 30kg 80</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu3 = <span class="keyword">new</span> Student(<span class="string">'小刚'</span>, <span class="number">10</span>, <span class="string">'男'</span>, <span class="string">'20kg'</span>, <span class="number">110</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu3.name, stu3.age, stu3.gender, stu3.weight,stu3.score);</span><br><span class="line">  <span class="comment">//小刚 10 男 20kg 110</span></span><br></pre></td></tr></table></figure><p>上面的 stu1 、stu2、stu3 都继承了 Persong 的属性，但没有继承方法</p><h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p><strong>组合继承 = 原型继承 + 借用构造函数继承</strong></p><ol><li>通过原型继承方法；</li><li>通过借用构造函数继承属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, gender, score</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//借用构造函数</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age, gender)</span><br><span class="line">    <span class="keyword">this</span>.score = score</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 改变原型链指向</span></span><br><span class="line">  Student.prototype = <span class="keyword">new</span> Person()<span class="comment">//不用传参</span></span><br><span class="line">  Student.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stu = <span class="keyword">new</span> Student(<span class="string">'小明'</span>, <span class="number">18</span>, <span class="string">'男'</span>, <span class="number">100</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(stu.name, stu.age, stu.gender, stu.score);<span class="comment">//小明 18 男 100</span></span><br><span class="line">  stu.eat() <span class="comment">//吃吃</span></span><br><span class="line">  stu.sayHi()<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu2 = <span class="keyword">new</span> Student(<span class="string">'小红'</span>, <span class="number">12</span>, <span class="string">'女'</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(stu2.name, stu2.age, stu2.gender, stu2.score);<span class="comment">//小红 12 女 100</span></span><br><span class="line">stu2.eat() <span class="comment">//吃吃</span></span><br><span class="line">stu2.sayHi()<span class="comment">//hello</span></span><br></pre></td></tr></table></figure><h2 id="拷贝继承"><a href="#拷贝继承" class="headerlink" title="拷贝继承"></a>拷贝继承</h2><p>把一个对象的属性或者方法直接拷贝到另一个对象中</p><p>拷贝一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">   name: <span class="string">'小明'</span>,</span><br><span class="line">   age: <span class="number">13</span>,</span><br><span class="line">   sleep: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'睡觉'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// var obj2 = obj1;(只拷贝了对象的地址，没有拷贝内容)</span></span><br><span class="line"> <span class="comment">//手动拷贝</span></span><br><span class="line"> <span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">   obj2[key] = obj1[key]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>用拷贝实现继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  Person.prototype.age = <span class="number">10</span>;</span><br><span class="line">  Person.prototype.gender = <span class="string">'男'</span></span><br><span class="line">  Person.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'玩'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">    obj[key] = Person.prototype[key]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Person 的构造函数中有的 prototype 本来就是一个对象，age、gender、play 都是该对象的属性或方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;继承：&quot;&gt;&lt;a href=&quot;#继承：&quot; class=&quot;headerlink&quot; title=&quot;继承：&quot;&gt;&lt;/a&gt;继承：&lt;/h3&gt;&lt;p
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="原型，继承" scheme="https://zhaozhoa.github.com/tags/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>原型及原型链</title>
    <link href="https://zhaozhoa.github.com/2019/03/23/%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://zhaozhoa.github.com/2019/03/23/原型及原型链/</id>
    <published>2019-03-23T02:37:03.000Z</published>
    <updated>2019-03-23T02:39:47.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原型及原型链"><a href="#原型及原型链" class="headerlink" title="原型及原型链"></a>原型及原型链</h1><h2 id="new-的作用"><a href="#new-的作用" class="headerlink" title="new 的作用"></a>new 的作用</h2><ol><li>创建一个新对象；</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个对象）；</li><li>执行构造函数中的代码（为这个新对象添加属性）；</li><li>返回新对象。</li></ol><p>选自： <em>《JavaScript高级程序设计（第三版）》P145</em></p><h2 id="原型的作用"><a href="#原型的作用" class="headerlink" title="原型的作用"></a>原型的作用</h2><h3 id="原型对象和原型"><a href="#原型对象和原型" class="headerlink" title="原型对象和原型"></a>原型对象和原型</h3><p><strong>原型对象</strong></p><p>每一个构造函数都有原型对象 prototype 属性</p><p><strong>原型</strong></p><p>每一个实例对象都有一个原型 __proto__ 属性</p><h3 id="共享内存，节省内存空间"><a href="#共享内存，节省内存空间" class="headerlink" title="共享内存，节省内存空间"></a>共享内存，节省内存空间</h3><p><strong>案例一</strong>  没有使用原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, 我的年龄是<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实例对象</span></span><br><span class="line">  <span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Person(<span class="string">'小明'</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Person(<span class="string">'小红'</span>, <span class="number">15</span>)</span><br><span class="line">  xiaoming.sayHi() <span class="comment">//我叫小明, 我的年龄是20</span></span><br><span class="line">  xiaohong.sayHi() <span class="comment">//我叫小红, 我的年龄是15</span></span><br><span class="line">  <span class="built_in">console</span>.log(xiaoming.sayHi === xiaohong.sayHi) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>当执行 最后一句时结果为 false 说明所执行的函数不是同一个函数，并没有数据共享</p><p>原因：当 new 的时候 会把这个 sayHi 方法添加到实例对象申请的空间中，所以有多少实例对象就有多少 sayHi 方法</p><p><strong>案例二</strong>   使用原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, 我的年龄是<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Person(<span class="string">'小明'</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Person(<span class="string">'小红'</span>, <span class="number">15</span>)</span><br><span class="line">  xiaoming.sayHi() <span class="comment">//我叫小明, 我的年龄是20</span></span><br><span class="line">  xiaohong.sayHi() <span class="comment">//我叫小红, 我的年龄是15</span></span><br><span class="line">  <span class="built_in">console</span>.log(xiaoming.sayHi === xiaohong.sayHi);<span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(xiaohong.__proto__ === Person.prototype);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>此时执行最后一句话时，结果为 true 说明执行的时同一个函数，实现了数据共享</p><p>原因：</p><ol><li><code>实例对象的原型 __proto__ 和 构造函数的原型对象 prototype 是相同的（__proto__指向 prototype）</code></li><li><code>实例对象可以访问构造函数的原型（prototype）</code></li></ol><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><strong>原型链指的是 实例对象 和 原型对象（prototype）之间的关系，这种关系是通过原型（__proto__)联系的</strong></p><h3 id="原型链的改变"><a href="#原型链的改变" class="headerlink" title="原型链的改变"></a>原型链的改变</h3><p><strong>案例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 人的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 人的原型对象的方法</span></span><br><span class="line">  Person.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'人的吃方法'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 狗的构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="comment">// 狗的原型对象的方法</span></span><br><span class="line">  Dog.prototype.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'汪汪'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Dog.prototype = <span class="keyword">new</span> Person(<span class="number">20</span>)</span><br><span class="line">  <span class="keyword">var</span> bigDog = <span class="keyword">new</span> Dog()</span><br><span class="line">  bigDog.eat() <span class="comment">//人的吃方法</span></span><br><span class="line">  bigDog.sayHi() <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog.prototype = <span class="keyword">new</span> Person(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><strong>Dog 的原型对象的  替换成 new Person 这个实例对象</strong></p><p>上面的代码 使 Dog  的原型对象指向了 new Person（）的原型，同时 又因为 Dog 的实例对象 bigDog 的原型（__proto__)指向的是 Dog 的原型对象（prototype），所以也就跟着改变了其指向，指向了new Pers（）的原型</p><p><strong>总结</strong></p><ul><li>实例对象的原型__proto__指向的是该对象所在的构造函数的原型对象</li><li>构造函数的原型对象（prototype）指向如果改变，实例对象的原型__proto__也会发生改变</li></ul><h3 id="原型链的最终指向"><a href="#原型链的最终指向" class="headerlink" title="原型链的最终指向"></a>原型链的最终指向</h3><ul><li>实例对象中有__proto__原型</li><li>构造函数中有 prototype 原型对象</li><li>原型对象 prototype 中应该也有 __proto__ 原型，指向什么地方？</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  Person.prototype.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'人的吃'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实例对象</span></span><br><span class="line">  <span class="keyword">var</span> per = <span class="keyword">new</span> Person()</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(per.__proto__ === Person.prototype); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(per.__proto__.__proto__ === Person.prototype.__proto__); <span class="comment">//true</span></span><br><span class="line">  <span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype);  <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__); <span class="comment">//null</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><ul><li>Object 是一个构造函数，有自己的原型对象（prototype）</li><li>每一个原型对象都有自己的原型__proto__， Object 的原型对象也不例外</li><li>构造函数的原型对象的原型指向 Object 的原型对象（上面的倒数第二句可知）</li><li>Object 的原型对象的原型为null（上面的倒数第一句可知）</li></ul><h3 id="原型指向改变如何添加方法和访问"><a href="#原型指向改变如何添加方法和访问" class="headerlink" title="原型指向改变如何添加方法和访问"></a>原型指向改变如何添加方法和访问</h3><p>原型对象改变前添加的方法，会在原型改变后失去，所以如果原型对象改变，应该先改变原型对象，再添加方法否则会出现<strong>原型链的改变</strong>中最后一句报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原型及原型链&quot;&gt;&lt;a href=&quot;#原型及原型链&quot; class=&quot;headerlink&quot; title=&quot;原型及原型链&quot;&gt;&lt;/a&gt;原型及原型链&lt;/h1&gt;&lt;h2 id=&quot;new-的作用&quot;&gt;&lt;a href=&quot;#new-的作用&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="原型" scheme="https://zhaozhoa.github.com/tags/%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据通信</title>
    <link href="https://zhaozhoa.github.com/2019/03/20/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1/"/>
    <id>https://zhaozhoa.github.com/2019/03/20/数据通信/</id>
    <published>2019-03-20T00:41:08.000Z</published>
    <updated>2019-03-24T11:14:28.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h1><h2 id="常见的通信方式"><a href="#常见的通信方式" class="headerlink" title="常见的通信方式"></a>常见的通信方式</h2><table><thead><tr><th>通信方式</th><th>特点</th></tr></thead><tbody><tr><td>表单</td><td>最基本，最简单</td></tr><tr><td>Ajax</td><td>不用全页面刷新，可跨域</td></tr><tr><td>jsonp</td><td>跨越，不安全</td></tr><tr><td>Websocket</td><td>高性能（快），双工通信，直接跨越</td></tr></tbody></table><p><strong>跨域</strong>：请求不同域名或端口或协议的资源</p><h2 id="Ajax封装（仿jQuery）"><a href="#Ajax封装（仿jQuery）" class="headerlink" title="Ajax封装（仿jQuery）"></a>Ajax封装（仿jQuery）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  options.type = options.type || <span class="string">'get'</span>;</span><br><span class="line">  options.data = options.data || &#123;&#125;</span><br><span class="line">  options.dataType = options.dataType || <span class="string">'text'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//将 data里面以对象形式传入的值 解析成 a=b&amp;b=c 形式</span></span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> options.data) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(name)&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(options.data[name])&#125;</span>`</span></span><br><span class="line">    arr.push(str)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> strData = arr.join(<span class="string">'&amp;'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (options.type == <span class="string">'post'</span>) &#123;</span><br><span class="line">    xhr.open(<span class="string">'POST'</span>,options.url, <span class="literal">true</span>)</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'content-type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"></span><br><span class="line">    xhr.send(strData)</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + strData ,<span class="literal">true</span>)</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> data = xhr.responseText</span><br><span class="line">        <span class="keyword">switch</span> (options.dataType) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'json'</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">JSON</span>.parse) &#123;</span><br><span class="line">              data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              data = <span class="built_in">eval</span>(<span class="string">'('</span>+data+<span class="string">')'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'xml'</span>:</span><br><span class="line">            data = xhr.responseXML</span><br><span class="line">        &#125;</span><br><span class="line">        options.success &amp;&amp; options.success(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      options.error &amp;&amp; options.error()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据通信&quot;&gt;&lt;a href=&quot;#数据通信&quot; class=&quot;headerlink&quot; title=&quot;数据通信&quot;&gt;&lt;/a&gt;数据通信&lt;/h1&gt;&lt;h2 id=&quot;常见的通信方式&quot;&gt;&lt;a href=&quot;#常见的通信方式&quot; class=&quot;headerlink&quot; title=&quot;常见的
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="总结" scheme="https://zhaozhoa.github.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://zhaozhoa.github.com/2019/03/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>https://zhaozhoa.github.com/2019/03/12/计算机组成原理/</id>
    <published>2019-03-12T12:45:05.000Z</published>
    <updated>2019-03-12T12:46:10.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h1><h2 id="原码、反码、补码、移码"><a href="#原码、反码、补码、移码" class="headerlink" title="原码、反码、补码、移码"></a>原码、反码、补码、移码</h2><table><thead><tr><th></th><th>数字   1</th><th>数字  -1</th><th>1 - 1</th></tr></thead><tbody><tr><td>原码</td><td>0000  0001</td><td>1000  0001</td><td>1000  0010</td></tr><tr><td>反码</td><td>0000  0001</td><td>1111  1110</td><td>1111  1111</td></tr><tr><td>补码</td><td>0000  0001</td><td>1111  1111</td><td>0000  0000</td></tr><tr><td>移码</td><td>1000  0001</td><td>0111  1111</td><td>1000  0000</td></tr></tbody></table><p>总结：</p><ul><li>正数的 原码、反码、补码都是其二进制数</li><li>负数的 反码是除符号位，其他的都按位取反。</li><li>负数的补码是给他的反码 +1。</li><li>移码是补码的符号位取反。</li></ul><h3 id="表示范围"><a href="#表示范围" class="headerlink" title="表示范围"></a>表示范围</h3><table><thead><tr><th></th><th>范围</th></tr></thead><tbody><tr><td>原码</td><td>-（2^n-1^  - 1)  ~ 2^n-1^  - 1</td></tr><tr><td>反码</td><td>-（2^n-1^  - 1)  ~ 2^n-1^  - 1</td></tr><tr><td>补码</td><td>- 2^n-1^  ~ 2^n-1^ - 1</td></tr></tbody></table><blockquote><p>因为 0 的补码的正负都相同，所以范围比原码和反码大 1</p></blockquote><h3 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h3><p>N = M * R^e^</p><p>位数：M</p><p>基数：R</p><p>指数：e</p><h1 id="CPU-的结构"><a href="#CPU-的结构" class="headerlink" title="CPU 的结构"></a>CPU 的结构</h1><p>CPU由 <code>运算器</code>和 <code>控制器</code>组成</p><h2 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h2><ul><li>算术逻辑单元ALU</li><li>累加寄存器 AC</li><li>数据缓冲寄存器 DR</li><li>状态条件寄存器 PSW</li></ul><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><ul><li>程序计数器PC</li><li>指令寄存器 IR</li><li>指令译码器</li><li>时序部件</li></ul><h1 id="计算机体系结构的分类-–-Flynn"><a href="#计算机体系结构的分类-–-Flynn" class="headerlink" title="计算机体系结构的分类 – Flynn"></a>计算机体系结构的分类 – Flynn</h1><table><thead><tr><th>体系结构类型</th><th>结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td>单指令流单数据流SISD</td><td>控制部分：一个   处理器：一个   主存储模块： 一个</td><td></td><td>但处理系统</td></tr><tr><td>单指令流多数据流SIMD</td><td>控制部分：一个   处理器：多个   主存储模块： 多个</td><td>各种处理器以异步形式执行同一天指令</td><td>并列处理机，<code>阵列处理机</code>，超级向量处理机</td></tr><tr><td>多指令流单数据流MISD</td><td>控制部分：多个   处理器：一个   主存储模块： 多个</td><td>不存在</td><td>目前不存在</td></tr><tr><td>多指令流多数据流MIMD</td><td>控制部分：多个   处理器：多个   主存储模块： 多个</td><td>能够实现作业、任务、指令等各级全面并行</td><td>多处理机系统，多计算机</td></tr></tbody></table><h1 id="CISC-与-RISC"><a href="#CISC-与-RISC" class="headerlink" title="CISC 与 RISC"></a>CISC 与 RISC</h1><table><thead><tr><th>指令系统类型</th><th>指令</th><th>寻址方式</th><th>实现方式</th><th>其他</th></tr></thead><tbody><tr><td>CISC（复杂）</td><td>数量多，使用频率差别大可变长格式</td><td>支持多种</td><td>微程序控制技术（微码）</td><td>研制周期长</td></tr><tr><td>RISC（精简）</td><td>数量少，使用频率接近，定长格式，大部分为单调指令，操作寄存器，只有Load/Store操作内存</td><td>支持方式少</td><td>增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线</td><td>优化编译，有效支持高级语言</td></tr></tbody></table><h1 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h1><blockquote><p>流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术,各种部件同时处理是针对不同指令而言的,他们可同时为多条指令的不同部分进行工作,以提高各部件的利用率和指令的平均执行速度.</p></blockquote><h2 id="流水线的时间计算"><a href="#流水线的时间计算" class="headerlink" title="流水线的时间计算"></a>流水线的时间计算</h2><ul><li>流水线的周期为执行时间最长的一段</li><li>n条指令执行的理论时间<ul><li>一条指令执行的时间（每一部分的时间和） + （指令数 - 1）* 流水线周期</li></ul></li><li>n条指令执行的实践时间<ul><li>流水线周期 * （指令的部分数 + 指令数 - 1）</li><li>在实践计算的时候，将第一条指令执行的时间看作周期 * 指令部分数</li></ul></li><li>考试以理论结果优先</li></ul><p>例题：</p><blockquote><p>若指令流水线把一条指令分为取址、分析、执行三部分，且三部分的时间分别为：2ns、2ns、1ns、那么流水线的周期是多少？100条指令全部执行完需要多少时间？</p></blockquote><p>解答：</p><blockquote><p>周期为 2ns，</p><p>理论执行时间 （2 +2 + 1) +  (100 - 1) * 2 = 203ns </p><p>实践执行时间  （3 + 100 - 1） * 2 = 204ns</p></blockquote><h2 id="流水线的吞吐率计算"><a href="#流水线的吞吐率计算" class="headerlink" title="流水线的吞吐率计算"></a>流水线的吞吐率计算</h2><blockquote><p>流水线的吞吐率（TP) 是指单位时间内流水线所完成的任务数量或输出的结果数量。</p></blockquote><p><code>TP = 指令条数 / 流水线执行时间</code></p><p>流水线最大吞吐率为 ：<code>1 / 周期</code></p><h2 id="流水线的加速比"><a href="#流水线的加速比" class="headerlink" title="流水线的加速比"></a>流水线的加速比</h2><p>定义：</p><blockquote><p>完成同一任务，不使用流水线的时间与使用流水线的时间之比</p></blockquote><p><code>s = 不使用流水线的时间 / 使用流水线的时间</code></p><h1 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h1><h2 id="层次化的存储结构"><a href="#层次化的存储结构" class="headerlink" title="层次化的存储结构"></a>层次化的存储结构</h2><p>从外存、内存、cache、寄存器，速度越来越高，容量越来越小。</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p><strong>Cache的功能</strong>：提高 CPU 数据输入输出的速率，突破 CPU 与存储系统间数据传送带宽限制。</p><ul><li>Cache 是计算机存储系统中访问最快的层次</li><li>使用 Cache 改善系统性能的依据是程序的局部性原理</li></ul><h3 id="使用-Cache-主存储器的系统的平均周期"><a href="#使用-Cache-主存储器的系统的平均周期" class="headerlink" title="使用 Cache + 主存储器的系统的平均周期"></a>使用 Cache + 主存储器的系统的平均周期</h3><p><code>t = h * t1 + (1-h) * t2</code></p><ul><li>h ：CPU对 Cache 的访问命中率，</li><li>t1：Cache 的周期时间</li><li>t2：主存储器的周期时间</li></ul><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><ul><li><p>时间局部性</p><p>对刚刚访问的程序再进行访问，如循环体程序，这时就将这些都放入 Cache 中</p></li><li><p>空间局部性</p><p>对相邻的地址依次访问，如变量数组，也会将其放入 Cache 中</p></li><li><p>工作集理论：工作集是进程运行时被频繁访问的页码集合</p></li></ul><h2 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><p>只读存储器（ROM）</p><p>断电存储内容不消失</p></li><li><p>随机存储器（RAM）</p><p>断电存储内容消失</p></li></ol><h3 id="编址"><a href="#编址" class="headerlink" title="编址"></a>编址</h3><p>例题：</p><blockquote><p>内存地址从AC000H到C7FFFH,共有（）KB个地址单元，如果该内存地址按字（16bit）编址，由28块芯片构成。已知构成此内存的芯片每片有16KB个存储单元，则该芯片每个存储单元存储（）位</p></blockquote><p>解答：</p><blockquote><p>将内存大地址减去小地址再加1就是内存地址，即C7FFFH-AC000H+1=1C000H(给7加的是16，因为是16进制)，</p><p>十六进制（1C000）16=2^16+2^15+2^14=64K+32K+16K=112K.</p><p>注意此处按字编址。需要构成的内存为112K16b,使用28块芯片构成该内存，则每个芯片的容量应为4K16B。已知构成此内存的芯片每片有16K个存储单元，因此该芯片每个存储单元存储4位二进制</p></blockquote><h2 id="磁盘结构与参数"><a href="#磁盘结构与参数" class="headerlink" title="磁盘结构与参数"></a>磁盘结构与参数</h2><p><code>存取时间 = 寻道时间 + 等待时间</code></p><ul><li>寻道时间： 磁头移动到磁道所需要的时间</li><li>等待时间： 等待要读写的扇区转动到磁头下面的时间</li></ul><h1 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h1><ul><li>内部总线（芯片级别）</li><li>系统总线（线路板级别）<ul><li>数据总线</li><li>地址总线</li><li>控制总线</li></ul></li><li>外部总线（外设级别）</li></ul><h1 id="可靠性分析"><a href="#可靠性分析" class="headerlink" title="可靠性分析"></a>可靠性分析</h1><h2 id="串联系统和并联系统"><a href="#串联系统和并联系统" class="headerlink" title="串联系统和并联系统"></a>串联系统和并联系统</h2><h3 id="串联"><a href="#串联" class="headerlink" title="串联"></a>串联</h3><p>可靠度：R = R1 <em> R2 </em>R3 <em> …  </em> Rn</p><p>失效度： S = S1 + S2 + S3 + … + Sn</p><h3 id="并联"><a href="#并联" class="headerlink" title="并联"></a>并联</h3><p>可靠度： R = 1 - (1 - R1) <em> (1 - R2) </em>  …  * (1 - Rn)</p><p>失效度：S = 1 - R</p><h1 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h1><h2 id="循环校验码-CRC"><a href="#循环校验码-CRC" class="headerlink" title="循环校验码 CRC"></a>循环校验码 CRC</h2><ul><li>可以检错，不能纠错</li></ul><p><code>重点</code></p><p><img src="E:\笔记\软考\计算机组成原理\图片库\crc" alt="&quot;crc校验&quot;的图片搜索结果"></p><h2 id="海明码"><a href="#海明码" class="headerlink" title="海明码"></a>海明码</h2><ul><li>既可以检错，又可以纠错</li></ul><p><code>重点</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的表示&quot;&gt;&lt;a href=&quot;#数据的表示&quot; class=&quot;headerlink&quot; title=&quot;数据的表示&quot;&gt;&lt;/a&gt;数据的表示&lt;/h1&gt;&lt;h2 id=&quot;原码、反码、补码、移码&quot;&gt;&lt;a href=&quot;#原码、反码、补码、移码&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="软考" scheme="https://zhaozhoa.github.com/categories/%E8%BD%AF%E8%80%83/"/>
    
    
      <category term="复习" scheme="https://zhaozhoa.github.com/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>移动端轮播图</title>
    <link href="https://zhaozhoa.github.com/2019/03/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>https://zhaozhoa.github.com/2019/03/08/移动端轮播图/</id>
    <published>2019-03-08T10:28:59.000Z</published>
    <updated>2019-03-08T10:31:10.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol><li>自动轮播且无缝</li><li>点要随着图片的轮播而同步改变</li><li>图片的轮播可以随手指的滑动而改变</li><li>手指滑动距离小于屏幕的 1/3 吸附回去</li><li>手指滑动距离大于屏幕的 1/3 切换下一张或上一张图片</li></ol><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p><strong>注意：</strong></p><p>第一张图片之前重复最后一张，最后一种之后重复第一张</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jd_banner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clearFix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/l1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> banner = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 获取元素 */</span></span><br><span class="line">  <span class="keyword">let</span> banner = <span class="built_in">document</span>.querySelector(<span class="string">'.jd_banner'</span>)</span><br><span class="line">  <span class="keyword">let</span> width = banner.offsetWidth</span><br><span class="line">  <span class="keyword">let</span> imageBox = banner.querySelector(<span class="string">'ul:first-child'</span>)</span><br><span class="line">  <span class="keyword">let</span> pointBox = banner.querySelector(<span class="string">'ul:last-child'</span>)</span><br><span class="line">  <span class="keyword">let</span> points = pointBox.querySelectorAll(<span class="string">'li'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> addTransition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imageBox.style.transition = <span class="string">'all 0.2s'</span></span><br><span class="line">    imageBox.style.webkitTransition = <span class="string">'all 0.2s'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> removeTransition = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    imageBox.style.transition = <span class="string">'none'</span></span><br><span class="line">    imageBox.style.webkitTransition = <span class="string">'none'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> setTranslateX = <span class="function"><span class="keyword">function</span> (<span class="params">translateX</span>) </span>&#123;</span><br><span class="line">    imageBox.style.transform = <span class="string">'translateX('</span> + translateX + <span class="string">'px)'</span></span><br><span class="line">    imageBox.style.webkitTransform = <span class="string">'translateX('</span> + translateX + <span class="string">'px)'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    index++</span><br><span class="line">    addTransition()</span><br><span class="line">    setTranslateX(-index * width)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 判断是否要移动到第一张 */</span></span><br><span class="line">  imageBox.addEventListener(<span class="string">'transitionend'</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">      index = <span class="number">1</span></span><br><span class="line">      <span class="comment">/* 清除过渡 */</span></span><br><span class="line">      removeTransition()</span><br><span class="line">      <span class="comment">/* 移动 */</span></span><br><span class="line">      setTranslateX(-index * width)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      index = <span class="number">8</span>;</span><br><span class="line">      removeTransition()</span><br><span class="line">      setTranslateX(-index * width)</span><br><span class="line">    &#125;</span><br><span class="line">    setPoint()</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 焦点移动方法 */</span></span><br><span class="line">  <span class="keyword">let</span> setPoint = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 伪数组转换成真数组</span></span><br><span class="line">    <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(points)</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">      item.classList.remove(<span class="string">'now'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    points[index - <span class="number">1</span>].classList.add(<span class="string">'now'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 手指触摸移动事件 ---》元素随手中移动距离的改变而改变 */</span></span><br><span class="line">  <span class="keyword">let</span> startX = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> distanceX = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> isMove = <span class="literal">false</span></span><br><span class="line">  imageBox.addEventListener(<span class="string">'touchstart'</span>, (e)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 清除定时器</span></span><br><span class="line">    clearInterval(timer)</span><br><span class="line">    <span class="comment">// 记录触摸点的 X 坐标</span></span><br><span class="line">    startX = e.touches[<span class="number">0</span>].clientX;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  imageBox.addEventListener(<span class="string">'touchmove'</span>, (e)=&gt;&#123;</span><br><span class="line">    <span class="comment">// 记录滑动中的 X 坐标</span></span><br><span class="line">    <span class="keyword">let</span> moveX = e.touches[<span class="number">0</span>].clientX</span><br><span class="line">    <span class="comment">// 计算滑动距离</span></span><br><span class="line">    distanceX = moveX - startX;</span><br><span class="line">    <span class="comment">// 元素移动的距离 = 当前的位置 + 滑动的距离</span></span><br><span class="line">    <span class="keyword">let</span> translateX = -index * width + distanceX</span><br><span class="line">    <span class="comment">// 元素在跟随手指移动是不需要原来的动画过渡</span></span><br><span class="line">    removeTransition()</span><br><span class="line">    setTranslateX(translateX)</span><br><span class="line">    isMove = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  imageBox.addEventListener(<span class="string">'touchend'</span>, (e) =&gt; &#123;</span><br><span class="line">    <span class="comment">/* 用滑动的距离是否小于 1/3 来判断是否切换图片 */</span></span><br><span class="line">    <span class="keyword">if</span> (isMove) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(distanceX) &lt; width / <span class="number">3</span>) &#123;</span><br><span class="line">        addTransition()</span><br><span class="line">        setTranslateX(-index * width)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 右滑动，切换上一张</span></span><br><span class="line">        <span class="keyword">if</span> (distanceX &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          index--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          index++</span><br><span class="line">        &#125;</span><br><span class="line">        addTransition()</span><br><span class="line">        setTranslateX(-index * width)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 重置参数 */</span></span><br><span class="line">    startX = <span class="number">0</span></span><br><span class="line">    distanceX = <span class="number">0</span></span><br><span class="line">    isMove = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 开启定时器 */</span></span><br><span class="line">    clearInterval(timer)</span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      index++</span><br><span class="line">      addTransition()</span><br><span class="line">      setTranslateX(-index * width)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要求&quot;&gt;&lt;a href=&quot;#要求&quot; class=&quot;headerlink&quot; title=&quot;要求&quot;&gt;&lt;/a&gt;要求&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自动轮播且无缝&lt;/li&gt;
&lt;li&gt;点要随着图片的轮播而同步改变&lt;/li&gt;
&lt;li&gt;图片的轮播可以随手指的滑动而改变&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="移动端" scheme="https://zhaozhoa.github.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="轮播图" scheme="https://zhaozhoa.github.com/tags/%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap 常见组件</title>
    <link href="https://zhaozhoa.github.com/2019/03/06/bootstrap%E5%B8%B8%E8%A7%81%E7%BB%84%E5%BB%BA/"/>
    <id>https://zhaozhoa.github.com/2019/03/06/bootstrap常见组建/</id>
    <published>2019-03-06T03:30:20.000Z</published>
    <updated>2019-03-06T03:41:12.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><h2 id="container-容器"><a href="#container-容器" class="headerlink" title=".container 容器"></a>.container 容器</h2><p>响应式布局容器</p><p><strong>用法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">'container'</span>&gt;</span></span><br><span class="line">    响应式内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.container 容器默认有 15px 的左右内间距</p><h2 id="栅格系统-1"><a href="#栅格系统-1" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>栅格系统就是行列布局</p><h3 id="行：-row"><a href="#行：-row" class="headerlink" title="行： row"></a>行： row</h3><p>.row 可以填充 .container 的 15px 的内边距，因为设置了 <code>margin-left，margin-right = 15px</code> 用来填充 .container 容器的内边距</p><h3 id="列-col"><a href="#列-col" class="headerlink" title="列 : col"></a>列 : col</h3><p>使用样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">col-参数1-参数2</span><br></pre></td></tr></table></figure><p><strong>参数1：</strong></p><table><thead><tr><th>参数值</th><th>作用范围</th></tr></thead><tbody><tr><td>lg</td><td>大屏以上设备生效</td></tr><tr><td>md</td><td>中屏以上设备生效</td></tr><tr><td>sm</td><td>小屏以上设备生效</td></tr><tr><td>xs</td><td>超小屏以上设备生效</td></tr></tbody></table><p><strong>参数2：</strong></p><p>每一行的等分数，默认 12 等分，是几就占几份（取值 1–12）</p><p><strong>列子</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: hotpink;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.row</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        background: pink;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.row</span> &gt; <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 25px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><p>col-参数1-offset-参数2</p><p>栅格向右偏移 多少份（ 参数和上面相同）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">'col-xm-6 col-xm-offset-1'</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h4><ul><li>col-参数1-push-参数2  向右移动</li><li>col-参数1-pull-参数2  向左移动</li></ul><h1 id="导航条（navBar-组件"><a href="#导航条（navBar-组件" class="headerlink" title="导航条（navBar) 组件"></a>导航条（navBar) 组件</h1><p><strong>因为导航条中用到了  Collapse 组件 所以先要了解 collapsed 组件</strong></p><h2 id="Collapse-组件"><a href="#Collapse-组件" class="headerlink" title="Collapse 组件"></a>Collapse 组件</h2><p>Collapse 组件作用时 控制其他元素的展开或隐藏</p><ul><li>data-toggle=”collapse”  组件类型申明 为 collapse （坍塌）</li><li>data-target=”.box”  控制目标为 .box的选择器的元素</li><li>在 a 标签中 data-target 可以 直接用 href 替换</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".box"</span> <span class="attr">aria-expander</span>=<span class="string">'false'</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">".box"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="navBar组件分析"><a href="#navBar组件分析" class="headerlink" title="navBar组件分析"></a>navBar组件分析</h2><ul><li>aria-expanded=”false” 用于屏幕阅读器使用，（提示有一个没有展开的区域）</li><li>class=”sr-only” 仅用于屏幕阅读器阅读，里面的内不会显示</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 采用流式布局 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 以下为三个字体图标，共同组成了一个显示按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 这是商标区域--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--以下的 链接、表单、其他内容被上面的按钮切换 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="轮播"><a href="#轮播" class="headerlink" title="轮播"></a>轮播</h1><h2 id="bootstrap-轮播图分析"><a href="#bootstrap-轮播图分析" class="headerlink" title="bootstrap 轮播图分析"></a>bootstrap 轮播图分析</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- carousel 轮播图的模块  slide是否加上滑动效果 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- data-ride="carousel" 初始化轮播图属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点盒子 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            data-target="#carousel-example-generic" 控制目标轮播图</span></span><br><span class="line"><span class="comment">            data-slide-to="0" 控制的是轮播图当中的第几张 （索引）</span></span><br><span class="line"><span class="comment">            class="active" 当前选中的点</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片盒子 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- role="listbox" 提供给屏幕阅读器使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--需要轮播的容器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--图片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--说明--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 上一张下一张按钮 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     data-slide="prev"</span></span><br><span class="line"><span class="comment">     data-slide="next"</span></span><br><span class="line"><span class="comment">     href="#carousel-example-generic"   控制目标轮播图</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span>  <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缺点：在移动端图片显示太过于  扁长 ，显示有缺陷，图片大小修改会造成显示问题</p><h2 id="修改pc端显示效果"><a href="#修改pc端显示效果" class="headerlink" title="修改pc端显示效果"></a>修改pc端显示效果</h2><p>将 img 标签的图片修改成 background 来显示，这样可以控制图片大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.pcimg_box</span>&#123;</span></span><br><span class="line"><span class="undefined">      height: 400px;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      display: block;</span></span><br><span class="line"><span class="undefined">      background-size: cover;</span></span><br><span class="line"><span class="undefined">      background-position: center;</span></span><br><span class="line"><span class="undefined">      background-repeat: no-repeat;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指示器（焦点） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_01_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_02_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_03_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pcimg_box"</span> <span class="attr">style</span>=<span class="string">"background-image:url('../微金所/images/slide_04_2000x410.jpg')"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要将背景图片写在行内样式中，方便后端渲染</p><h1 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页签 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#home"</span> <span class="attr">aria-controls</span>=<span class="string">"home"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#profile"</span> <span class="attr">aria-controls</span>=<span class="string">"profile"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#messages"</span> <span class="attr">aria-controls</span>=<span class="string">"messages"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#settings"</span> <span class="attr">aria-controls</span>=<span class="string">"settings"</span> <span class="attr">role</span>=<span class="string">"tab"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Tab panes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane active"</span> <span class="attr">id</span>=<span class="string">"home"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"profile"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"tabpanel"</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"settings"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栅格系统&quot;&gt;&lt;a href=&quot;#栅格系统&quot; class=&quot;headerlink&quot; title=&quot;栅格系统&quot;&gt;&lt;/a&gt;栅格系统&lt;/h1&gt;&lt;h2 id=&quot;container-容器&quot;&gt;&lt;a href=&quot;#container-容器&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="bootstrap" scheme="https://zhaozhoa.github.com/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>数据的获取和转换</title>
    <link href="https://zhaozhoa.github.com/2019/03/05/%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E8%BD%AC%E6%8D%A2/"/>
    <id>https://zhaozhoa.github.com/2019/03/05/数据的获取和转换/</id>
    <published>2019-03-05T08:06:15.000Z</published>
    <updated>2019-03-23T07:11:37.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据的获取和转换"><a href="#数据的获取和转换" class="headerlink" title="数据的获取和转换"></a>数据的获取和转换</h1><h2 id="获取页面-url-通过问号传参"><a href="#获取页面-url-通过问号传参" class="headerlink" title="获取页面 url 通过问号传参"></a>获取页面 url 通过问号传参</h2><p>传递的样式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:3000/m/searchList.html?key=1&amp;name=10</span></span><br></pre></td></tr></table></figure><p>获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getParamsByUrl = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">   <span class="keyword">var</span> params = &#123;&#125;</span><br><span class="line">   <span class="keyword">var</span> search = location.search          <span class="comment">//"?key=1&amp;name=10"</span></span><br><span class="line">   <span class="keyword">if</span> (search) &#123;</span><br><span class="line">     search = search.replace(<span class="string">'?'</span>, <span class="string">''</span>)    <span class="comment">//"key=1&amp;name=10"</span></span><br><span class="line">     <span class="keyword">var</span> arr = search.split(<span class="string">'&amp;'</span>)         <span class="comment">//["key=1", "name=10"]</span></span><br><span class="line">     arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, i</span>) </span>&#123;  </span><br><span class="line">       <span class="keyword">var</span> itemArr = item.split(<span class="string">'='</span>)<span class="comment">//["key", "1"] ["name", "10"]</span></span><br><span class="line">       params[itemArr[<span class="number">0</span>]] = itemArr[<span class="number">1</span>]<span class="comment">//&#123;key: "1", name: "10"&#125;</span></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> params;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> params = getParamsByUrl()</span><br></pre></td></tr></table></figure><h2 id="node-获取-get-和-post-参数"><a href="#node-获取-get-和-post-参数" class="headerlink" title="node 获取 get 和 post 参数"></a>node 获取 get 和 post 参数</h2><h3 id="获取-get-参数"><a href="#获取-get-参数" class="headerlink" title="获取 get 参数"></a>获取 get 参数</h3><p>直接从url 中获取</p><p>使用 req.rul </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.url);<span class="comment">//    /data.js?username=se&amp;pwd=d</span></span><br><span class="line">  res.end()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>以对象形式获取</strong></p><p>引入 url 核心模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">'rul'</span>)</span><br></pre></td></tr></table></figure><p>给 url使用parse 方法解析 req.url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = url.parse(req.url)</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line">  res.end()</span><br></pre></td></tr></table></figure><p>解析结果为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="literal">null</span>,</span><br><span class="line">  slashes: <span class="literal">null</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="literal">null</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?username=se&amp;pwd=f'</span>,</span><br><span class="line">  query: <span class="string">'username=se&amp;pwd=f'</span>,</span><br><span class="line">  pathname: <span class="string">'/data.js'</span>,</span><br><span class="line">  path: <span class="string">'/data.js?username=se&amp;pwd=f'</span>,</span><br><span class="line">  href: <span class="string">'/data.js?username=se&amp;pwd=f'</span> &#125;</span><br></pre></td></tr></table></figure><p>此时的 query 属性还是 字符串形式，<strong>如果给 parse 方法传入第二个参数：true，则结果为</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="literal">null</span>,</span><br><span class="line">  slashes: <span class="literal">null</span>,</span><br><span class="line">  auth: <span class="literal">null</span>,</span><br><span class="line">  host: <span class="literal">null</span>,</span><br><span class="line">  port: <span class="literal">null</span>,</span><br><span class="line">  hostname: <span class="literal">null</span>,</span><br><span class="line">  hash: <span class="literal">null</span>,</span><br><span class="line">  search: <span class="string">'?username=se&amp;pwd=deee'</span>,</span><br><span class="line">  query: [<span class="built_in">Object</span>: <span class="literal">null</span> prototype] &#123; <span class="attr">username</span>: <span class="string">'se'</span>, <span class="attr">pwd</span>: <span class="string">'deee'</span> &#125;,</span><br><span class="line">  pathname: <span class="string">'/data.js'</span>,</span><br><span class="line">  path: <span class="string">'/data.js?username=se&amp;pwd=deee'</span>,</span><br><span class="line">  href: <span class="string">'/data.js?username=se&amp;pwd=deee'</span> &#125;</span><br></pre></td></tr></table></figure><p>这时的 query 属性值为一个对象</p><h3 id="获取-post-提交参数"><a href="#获取-post-提交参数" class="headerlink" title="获取 post 提交参数"></a>获取 post 提交参数</h3><p>post 提交的参数在请求体中，获取请求体是以分组报文的形式获取，所以 post 里面的参数不能直接一次性获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="comment">//解析传来的参数为 json</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">  <span class="comment">// 监听每一部分报文到达，将每一次的报文拼装</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data=&gt; &#123;</span><br><span class="line">    str +=data</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//全部传输完毕</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, ()=&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> post = queryString.parse(str)</span><br><span class="line">    <span class="built_in">console</span>.log(str); <span class="comment">//   username=se&amp;pwd=fgd [Object: null prototype] &#123; username: 'se', pwd: 'fgd' &#125;</span></span><br><span class="line">    res.end()</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure><p><strong>这种方式只可以获取普通编码数据，不能获取二进制文件，因为二进制转换成字符串，再转换回去格式会被破坏</strong></p><p><strong>url.parse 和queryString.parse 区别</strong></p><ul><li><p>url.parse()解析的是整个 url 如：/data.js?username=se&amp;pwd=f</p></li><li><p>querystring.parse()解析的是 参数  如：username=se&amp;pwd=f</p></li></ul><h3 id="封装成都可以获取"><a href="#封装成都可以获取" class="headerlink" title="封装成都可以获取"></a>封装成都可以获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取get参数</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname, query&#125; = url.parse(req.url,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取post 参数</span></span><br><span class="line">  <span class="keyword">let</span> str =<span class="string">''</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    str += data</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> post = querystring.parse(str)</span><br><span class="line">    <span class="built_in">console</span>.log(pathname, query, post);</span><br><span class="line">  &#125;)</span><br><span class="line">  res.end()</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据的获取和转换&quot;&gt;&lt;a href=&quot;#数据的获取和转换&quot; class=&quot;headerlink&quot; title=&quot;数据的获取和转换&quot;&gt;&lt;/a&gt;数据的获取和转换&lt;/h1&gt;&lt;h2 id=&quot;获取页面-url-通过问号传参&quot;&gt;&lt;a href=&quot;#获取页面-url-通过问号传
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="数据，node" scheme="https://zhaozhoa.github.com/tags/%E6%95%B0%E6%8D%AE%EF%BC%8Cnode/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎使用步骤</title>
    <link href="https://zhaozhoa.github.com/2019/03/04/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4/"/>
    <id>https://zhaozhoa.github.com/2019/03/04/模板引擎使用步骤/</id>
    <published>2019-03-04T13:23:54.000Z</published>
    <updated>2019-03-05T01:06:31.007Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板引擎渲染步骤"><a href="#模板引擎渲染步骤" class="headerlink" title="模板引擎渲染步骤"></a>模板引擎渲染步骤</h1><ol><li>获取数据</li><li>定义模板</li><li>调用模板</li><li>返回 html</li></ol><h2 id="1-用-jQuery-发送-get请求，获取数据"><a href="#1-用-jQuery-发送-get请求，获取数据" class="headerlink" title="1. 用 jQuery 发送 get请求，获取数据"></a>1. 用 jQuery 发送 get请求，获取数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getFirstCategoryData = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'/category/queryTopCategory'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    data: <span class="string">''</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      callback &amp;&amp; callback(data)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后台返回的json数据</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">total</span>: <span class="number">5</span>, <span class="attr">rows</span>: <span class="built_in">Array</span>(<span class="number">5</span>)&#125;</span><br><span class="line">rows: <span class="built_in">Array</span>(<span class="number">5</span>)</span><br><span class="line"><span class="number">0</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">categoryName</span>: <span class="string">"运动馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">1</span>: &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">categoryName</span>: <span class="string">"女士馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">2</span>: &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">categoryName</span>: <span class="string">"男士馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">3</span>: &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">categoryName</span>: <span class="string">"帆布馆"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="number">4</span>: &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">categoryName</span>: <span class="string">"户外管"</span>, <span class="attr">isDelete</span>: <span class="number">1</span>&#125;</span><br><span class="line">length: <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="2-定义模板"><a href="#2-定义模板" class="headerlink" title="2. 定义模板"></a>2. 定义模板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/template"</span> id=<span class="string">"firstTemplate"</span>&gt;</span><br><span class="line">    &lt;% <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows.length; i++) &#123; %&gt;</span><br><span class="line">      &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"&lt;%= i==0?'now':''%&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span> = <span class="string">"&lt;%=rows[i].id%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=rows[i].categoryName%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-调用模板-进行渲染"><a href="#3-调用模板-进行渲染" class="headerlink" title="3. 调用模板,进行渲染"></a>3. 调用模板,进行渲染</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getFirstCategoryData(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   $(<span class="string">'.cate_left ul'</span>).html(template(<span class="string">'firstTemplate'</span>,data))</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-渲染结果"><a href="#4-渲染结果" class="headerlink" title="4. 渲染结果"></a>4. 渲染结果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"1"</span>&gt;</span>运动馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"2"</span>&gt;</span>女士馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"3"</span>&gt;</span>男士馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"4"</span>&gt;</span>帆布馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">data-id</span>=<span class="string">"5"</span>&gt;</span>户外馆<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模板引擎渲染步骤&quot;&gt;&lt;a href=&quot;#模板引擎渲染步骤&quot; class=&quot;headerlink&quot; title=&quot;模板引擎渲染步骤&quot;&gt;&lt;/a&gt;模板引擎渲染步骤&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取数据&lt;/li&gt;
&lt;li&gt;定义模板&lt;/li&gt;
&lt;li&gt;调用模板&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="前端" scheme="https://zhaozhoa.github.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="json" scheme="https://zhaozhoa.github.com/tags/json/"/>
    
      <category term="ajax" scheme="https://zhaozhoa.github.com/tags/ajax/"/>
    
      <category term="模板引擎" scheme="https://zhaozhoa.github.com/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>less常见语法</title>
    <link href="https://zhaozhoa.github.com/2019/03/03/less%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95/"/>
    <id>https://zhaozhoa.github.com/2019/03/03/less常见语法/</id>
    <published>2019-03-03T14:52:11.000Z</published>
    <updated>2019-03-03T14:53:15.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h1><h2 id="安装less"><a href="#安装less" class="headerlink" title="安装less"></a>安装less</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g less</span><br></pre></td></tr></table></figure><h2 id="less-文件编译成-css-文件"><a href="#less-文件编译成-css-文件" class="headerlink" title="less 文件编译成 css 文件"></a>less 文件编译成 css 文件</h2><p><strong>手动编译</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc less文件.less 编译后的css文件.css</span><br></pre></td></tr></table></figure><p><strong>vscode 自动编译</strong></p><p>安装插件 Ease Less</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="申明变量"><a href="#申明变量" class="headerlink" title="申明变量"></a>申明变量</h3><ul><li>必须<code>@</code> 前缀 <code>:</code> 相当于 等号 ，必须<code>;</code> 结束。</li><li>必须符合变量的命名规则。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mainColor:</span> <span class="number">#ccc</span>;</span><br></pre></td></tr></table></figure><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>:hover&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译结果</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>less 文件开头 指定编码为 UTF-8 编码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span></span><br></pre></td></tr></table></figure><h2 id="Mixin-混入"><a href="#Mixin-混入" class="headerlink" title="Mixin 混入"></a>Mixin 混入</h2><h3 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h3><p>less 语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w50-f_left</span>&#123;</span><br><span class="line">  <span class="selector-class">.w50</span>();</span><br><span class="line">  <span class="selector-class">.f_left</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成 css </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w50-f_left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的 css 会出现混入前的类</p><h3 id="函数混入"><a href="#函数混入" class="headerlink" title="函数混入"></a>函数混入</h3><p>less 语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50</span>()&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.f_left</span>()&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.w50-f_left</span>&#123;</span><br><span class="line">  <span class="selector-class">.w50</span>();</span><br><span class="line">  <span class="selector-class">.f_left</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成 css 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.w50-f_left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的 css 不会出现函数本体。</p><p><strong>带参函数混入</strong></p><ul><li>定义了参数（没有默认值）调用的时候必须传参。</li><li>定义 默认值的方式和定义变量相同。</li><li>定义了参数（有默认值），调用的时候可以不用传参。</li></ul><p>less 语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.f</span>(<span class="variable">@direction</span>: left) &#123;</span><br><span class="line">    <span class="attribute">float</span>:<span class="variable">@direction</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.r_left</span>&#123;</span><br><span class="line">    <span class="selector-class">.f</span>();</span><br><span class="line">    <span class="selector-class">.f</span>(right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.r_left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>为了使 css 的层次更加清楚 ，less 可以像 html一样进行类似的嵌套写法</p><p>less语法</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top_bar</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.top_bar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top_bar</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>伪类和伪元素等需要和前面的选择器紧挨使用的 需要用<code>&amp;</code>符号进行连接否则编译后会有空格。</p><h2 id="Import（导入）"><a href="#Import（导入）" class="headerlink" title="Import（导入）"></a>Import（导入）</h2><p>less 可以进行模块化，最后可以用 import 进行导入组合</p><p>variables.less 的内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@mainColor:</span><span class="number">#ccc</span>;</span><br><span class="line"><span class="variable">@box:</span> box;</span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span>:hover&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.@&#123;box&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">@mainColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 main.less 中导入 variables.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"variables"</span>;</span><br></pre></td></tr></table></figure><p>编译的 css 文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>less 支持数字的简单运算</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@num:</span><span class="number">7</span>;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> * <span class="variable">@num</span>;</span><br><span class="line">  <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> / <span class="variable">@num</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">700%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14.28571429%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Less&quot;&gt;&lt;a href=&quot;#Less&quot; class=&quot;headerlink&quot; title=&quot;Less&quot;&gt;&lt;/a&gt;Less&lt;/h1&gt;&lt;h2 id=&quot;安装less&quot;&gt;&lt;a href=&quot;#安装less&quot; class=&quot;headerlink&quot; title=&quot;安装les
      
    
    </summary>
    
      <category term="移动端" scheme="https://zhaozhoa.github.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="less" scheme="https://zhaozhoa.github.com/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>rem+less适配</title>
    <link href="https://zhaozhoa.github.com/2019/03/03/rem-less%E9%80%82%E9%85%8D/"/>
    <id>https://zhaozhoa.github.com/2019/03/03/rem-less适配/</id>
    <published>2019-03-03T14:33:49.000Z</published>
    <updated>2019-03-03T14:39:26.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rem-和-em"><a href="#rem-和-em" class="headerlink" title="rem 和 em"></a>rem 和 em</h1><p>rem和 em都是相对单位</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li>em 是基于父容器的字体大小</li><li>rem 是基于根元素（也就是 html 元素）的字体大小</li></ul><h2 id="rem-适配"><a href="#rem-适配" class="headerlink" title="rem 适配"></a>rem 适配</h2><h3 id="常见的适配方案"><a href="#常见的适配方案" class="headerlink" title="常见的适配方案"></a>常见的适配方案</h3><table><thead><tr><th>名称</th><th>缺点</th></tr></thead><tbody><tr><td>伸缩布局</td><td>元素只能宽度适配</td></tr><tr><td>流式布局</td><td>元素只能宽度适配</td></tr><tr><td>响应式布局</td><td>元素只能宽度适配</td></tr><tr><td>rem 布局</td><td><code>高度和宽度可以同时适配</code></td></tr></tbody></table><h3 id="rem-适配原理"><a href="#rem-适配原理" class="headerlink" title="rem 适配原理"></a>rem 适配原理</h3><p>页面的尺寸都用 rem 作为单位，针对不同大小的页面只需要更改 基准值 html 的大小即可实现适配</p><h3 id="rem-基准值的换算公式"><a href="#rem-基准值的换算公式" class="headerlink" title="rem 基准值的换算公式"></a>rem 基准值的换算公式</h3><p><code>当前设备 rem 基准值 = 预设的基准值 / 设计稿的宽度 * 当前设备的宽度</code></p><blockquote><p>当前的设备：</p><p>设备宽度为 640px ，当前的 div 为 640px  <em> 100px，预设基准为 100px ，所以div 大小可以转换为 6.4rem </em> 1rem</p><p>适配的设备：</p><p>设备宽度为 320px ，div 的大小为 6.4rem * 1rem，要想div的尺寸实现适配，需要修改当前的 rem 基准值。</p><p>由上面的公式可以算出：</p><p>100 / 640 * 320 = 50px。</p><p>所以需要修改当前的 基准值为 50px</p></blockquote><h3 id="less-rem-实现多种设备的适配"><a href="#less-rem-实现多种设备的适配" class="headerlink" title="less + rem 实现多种设备的适配"></a>less + rem 实现多种设备的适配</h3><p>根据 rem 的适配原理，可以知道是根据设备的宽度不同来改变 html 元素的字体大小来进行适配。所以如果根据当前设备宽度来改变 html 元素的字体大小呢？</p><p><strong>方式一：媒体查询</strong></p><p>同时适配 640px 和 320px 的设备</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="css">    @<span class="keyword">media</span> (min-width:<span class="number">320px</span>) &#123;</span></span><br><span class="line"><span class="undefined">      html&#123;</span></span><br><span class="line"><span class="undefined">        font-size: 50px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    @<span class="keyword">media</span> (min-width: <span class="number">640px</span>) &#123;</span></span><br><span class="line"><span class="undefined">      html&#123;</span></span><br><span class="line"><span class="undefined">        font-size: 100px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    body&#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    header&#123;</span></span><br><span class="line"><span class="undefined">      width: 100%;</span></span><br><span class="line"><span class="undefined">      height: 1rem;</span></span><br><span class="line"><span class="undefined">      line-height: 1rem;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">font-size</span>: 0<span class="selector-class">.32rem</span>;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">      background-color: green;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随着设备的增多，媒体查询和基准值的计算会不方便同时也不好维护，所以可以通过 less 进行改进</p><p><strong>方式二：less</strong></p><ol><li>定义存储变量的less 文件 var.less</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="comment">// 通过 less 定义数组，存储主流设备的尺寸</span></span><br><span class="line"><span class="variable">@adapterDeviceList:</span><span class="number">750px</span>, <span class="number">720px</span>, <span class="number">640px</span>, <span class="number">540px</span>, <span class="number">480px</span>, <span class="number">424px</span>, <span class="number">414px</span>, <span class="number">400px</span>, <span class="number">384px</span>, <span class="number">375px</span>, <span class="number">360px</span>, <span class="number">320px</span>;</span><br><span class="line"><span class="comment">// 设计稿尺寸</span></span><br><span class="line"><span class="variable">@psdWidth:</span> <span class="number">750px</span>;</span><br><span class="line"><span class="comment">// 预设基准值</span></span><br><span class="line"><span class="variable">@baseFontSize:</span> <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设备的种类（数组的长度）</span></span><br><span class="line"><span class="comment">// 通过内置函数 length来获取</span></span><br><span class="line"><span class="variable">@len:</span> length(<span class="variable">@adapterDeviceList</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>设置一个适配的less 文件 mixins.less<ul><li>这个less文件通过递归来生成不同的媒体查询</li><li>less 没有循环语法</li><li>when （此处是函数的执行条件）</li><li>内置函数  extract（）用于获取数组里面的元素，传入两个参数，一个是数组名称，另一个时序号</li><li>下面的函数是倒着获取数组元素，生成媒体插叙的函数</li></ul></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.adapterMixins</span>(<span class="variable">@index</span>) <span class="keyword">when</span>(<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>)) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>&#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="variable">@baseFontSize</span> / <span class="variable">@psdWidth</span> * extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.adapterMixins</span>(<span class="variable">@index</span> - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.adapterMixins</span>(<span class="variable">@len</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>设置一个less 文件用于引入上面的less文件的 index.less</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"var.less"</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">"mixins.less"</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li>编译 index.less 后引入到html文件即可</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rem-和-em&quot;&gt;&lt;a href=&quot;#rem-和-em&quot; class=&quot;headerlink&quot; title=&quot;rem 和 em&quot;&gt;&lt;/a&gt;rem 和 em&lt;/h1&gt;&lt;p&gt;rem和 em都是相对单位&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; cl
      
    
    </summary>
    
      <category term="移动端" scheme="https://zhaozhoa.github.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="less" scheme="https://zhaozhoa.github.com/tags/less/"/>
    
      <category term="rem" scheme="https://zhaozhoa.github.com/tags/rem/"/>
    
  </entry>
  
</feed>
