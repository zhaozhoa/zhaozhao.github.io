<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[模板引擎使用步骤]]></title>
    <url>%2F2019%2F03%2F04%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[模板引擎渲染步骤 获取数据 定义模板 调用模板 返回 html 1. 用 jQuery 发送 get请求，获取数据123456789101112var getFirstCategoryData = function (callback) &#123; $.ajax(&#123; url: '/category/queryTopCategory', type: 'get', data: '', dataType: 'json', success: function (data) &#123; callback &amp;&amp; callback(data) &#125; &#125;);&#125; 后台返回的json数据 12345678&#123;total: 5, rows: Array(5)&#125;rows: Array(5)0: &#123;id: 1, categoryName: "运动馆", isDelete: 1&#125;1: &#123;id: 2, categoryName: "女士馆", isDelete: 1&#125;2: &#123;id: 3, categoryName: "男士馆", isDelete: 1&#125;3: &#123;id: 4, categoryName: "帆布馆", isDelete: 1&#125;4: &#123;id: 5, categoryName: "户外管", isDelete: 1&#125;length: 5 2. 定义模板12345&lt;script type="text/template" id="firstTemplate"&gt; &lt;% for(var i = 0; i &lt; rows.length; i++) &#123; %&gt; &lt;li class="&lt;%= i==0?'now':''%&gt;"&gt;&lt;a href="javascript:;" data-id = "&lt;%=rows[i].id%&gt;"&gt; &lt;%=rows[i].categoryName%&gt;&lt;/a&gt;&lt;/li&gt; &lt;% &#125; %&gt; &lt;/script&gt; 3. 调用模板,进行渲染123getFirstCategoryData(function (data) &#123; $('.cate_left ul').html(template('firstTemplate',data)) &#125;) 4. 渲染结果1234567891011&lt;ul&gt; &lt;li class="now"&gt;&lt;a href="javascript:;" data-id="1"&gt;运动馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="2"&gt;女士馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="3"&gt;男士馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="4"&gt;帆布馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="5"&gt;户外馆&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>ajax</tag>
        <tag>模板引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[less常见语法]]></title>
    <url>%2F2019%2F03%2F03%2Fless%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Less安装less1npm i -g less less 文件编译成 css 文件手动编译 1lessc less文件.less 编译后的css文件.css vscode 自动编译 安装插件 Ease Less 变量申明变量 必须@ 前缀 : 相当于 等号 ，必须; 结束。 必须符合变量的命名规则。 1@mainColor: #ccc; 使用变量123a:hover&#123; color:@mainColor;&#125; 编译结果 123a:hover&#123; color:#ccc;&#125; 注意：less 文件开头 指定编码为 UTF-8 编码 1@charset "UTF-8" Mixin 混入类混入less 语法 12345678910.w50&#123; width: 50%;&#125;.f_left&#123; float: left;&#125;.w50-f_left&#123; .w50(); .f_left();&#125; 编译成 css 12345678910.w50 &#123; width: 50%;&#125;.f_left &#123; float: left;&#125;.w50-f_left &#123; width: 50%; float: left;&#125; 编译的 css 会出现混入前的类 函数混入less 语法 12345678910.w50()&#123; width: 50%;&#125;.f_left()&#123; float: left;&#125;.w50-f_left&#123; .w50(); .f_left()&#125; 编译成 css 。 1234.w50-f_left &#123; width: 50%; float: left;&#125; 编译后的 css 不会出现函数本体。 带参函数混入 定义了参数（没有默认值）调用的时候必须传参。 定义 默认值的方式和定义变量相同。 定义了参数（有默认值），调用的时候可以不用传参。 less 语法 12345678.f(@direction: left) &#123; float:@direction;&#125;.r_left&#123; .f(); .f(right)&#125; 编译的 css 1234.r_left &#123; float: left; float: right;&#125; 嵌套为了使 css 的层次更加清楚 ，less 可以像 html一样进行类似的嵌套写法 less语法 1234567891011121314.top_bar&#123; position: relative; img&#123; display: block; position: absolute; top: 0; left: 0; &#125; &amp;::after&#123; content: ""; display: block; &#125;&#125; 编译后的 css 12345678910.top_bar img &#123; display: block; position: absolute; top: 0; left: 0;&#125;.top_bar::after &#123; content: ""; display: block;&#125; 注意：伪类和伪元素等需要和前面的选择器紧挨使用的 需要用&amp;符号进行连接否则编译后会有空格。 Import（导入）less 可以进行模块化，最后可以用 import 进行导入组合 variables.less 的内容 123456789@mainColor:#ccc;@box: box;a:hover&#123; color: @mainColor;&#125;.@&#123;box&#125; &#123; color:@mainColor;&#125; 在 main.less 中导入 variables.less 1@import "variables"; 编译的 css 文件 123456a:hover &#123; color: #ccc;&#125;.box &#123; color: #ccc;&#125; 运算less 支持数字的简单运算 1234567@num:7;ul&#123; width: 100% * @num; li&#123; width: 100% / @num; &#125;&#125; 编译后的css 123456ul &#123; width: 700%;&#125;ul li &#123; width: 14.28571429%;&#125;]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rem+less适配]]></title>
    <url>%2F2019%2F03%2F03%2Frem-less%E9%80%82%E9%85%8D%2F</url>
    <content type="text"><![CDATA[rem 和 emrem和 em都是相对单位 区别 em 是基于父容器的字体大小 rem 是基于根元素（也就是 html 元素）的字体大小 rem 适配常见的适配方案 名称 缺点 伸缩布局 元素只能宽度适配 流式布局 元素只能宽度适配 响应式布局 元素只能宽度适配 rem 布局 高度和宽度可以同时适配 rem 适配原理页面的尺寸都用 rem 作为单位，针对不同大小的页面只需要更改 基准值 html 的大小即可实现适配 rem 基准值的换算公式当前设备 rem 基准值 = 预设的基准值 / 设计稿的宽度 * 当前设备的宽度 当前的设备： 设备宽度为 640px ，当前的 div 为 640px 100px，预设基准为 100px ，所以div 大小可以转换为 6.4rem 1rem 适配的设备： 设备宽度为 320px ，div 的大小为 6.4rem * 1rem，要想div的尺寸实现适配，需要修改当前的 rem 基准值。 由上面的公式可以算出： 100 / 640 * 320 = 50px。 所以需要修改当前的 基准值为 50px less + rem 实现多种设备的适配根据 rem 的适配原理，可以知道是根据设备的宽度不同来改变 html 元素的字体大小来进行适配。所以如果根据当前设备宽度来改变 html 元素的字体大小呢？ 方式一：媒体查询 同时适配 640px 和 320px 的设备 1234567891011121314151617181920212223242526272829&lt;style&gt; @media (min-width:320px) &#123; html&#123; font-size: 50px; &#125; &#125; @media (min-width: 640px) &#123; html&#123; font-size: 100px; &#125; &#125; body&#123; margin: 0; padding: 0; &#125; header&#123; width: 100%; height: 1rem; line-height: 1rem; font-size: 0.32rem; text-align: center; background-color: green; color: #fff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt;购物车&lt;/header&gt;&lt;/body&gt; 随着设备的增多，媒体查询和基准值的计算会不方便同时也不好维护，所以可以通过 less 进行改进 方式二：less 定义存储变量的less 文件 var.less 123456789101112@charset "UTF-8";//变量// 通过 less 定义数组，存储主流设备的尺寸@adapterDeviceList:750px, 720px, 640px, 540px, 480px, 424px, 414px, 400px, 384px, 375px, 360px, 320px;// 设计稿尺寸@psdWidth: 750px;// 预设基准值@baseFontSize: 100px;// 设备的种类（数组的长度）// 通过内置函数 length来获取@len: length(@adapterDeviceList); 设置一个适配的less 文件 mixins.less 这个less文件通过递归来生成不同的媒体查询 less 没有循环语法 when （此处是函数的执行条件） 内置函数 extract（）用于获取数组里面的元素，传入两个参数，一个是数组名称，另一个时序号 下面的函数是倒着获取数组元素，生成媒体插叙的函数 123456789.adapterMixins(@index) when(@index &gt; 0) &#123; @media (min-width: extract(@adapterDeviceList, @index)) &#123; html&#123; font-size: @baseFontSize / @psdWidth * extract(@adapterDeviceList, @index); &#125; &#125; .adapterMixins(@index - 1);&#125;.adapterMixins(@len); 设置一个less 文件用于引入上面的less文件的 index.less 12@import "var.less";@import "mixins.less"; 编译 index.less 后引入到html文件即可]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>less</tag>
        <tag>rem</tag>
      </tags>
  </entry>
</search>
