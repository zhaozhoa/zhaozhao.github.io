<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[栈]]></title>
    <url>%2F2019%2F06%2F18%2F%E6%A0%88%2F</url>
    <content type="text"><![CDATA[栈(Stack)先入后出 实现123456789101112131415161718192021function Stack () &#123; let items = [] this.push = function (element) &#123; items.push(element) &#125; this.pop = function () &#123; return items.pop() &#125; this.peek = function () &#123; return items[items.length - 1] &#125; this.isEmpty = function () &#123; return items.length === 0 &#125;&#125;let stack = new Stack()stack.push(2)let tmp = stack.pop()]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数组封装]]></title>
    <url>%2F2019%2F06%2F17%2F%E6%95%B0%E7%BB%84%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[数组数组元素操作方法添加元素尾插 length Array.length 可以获取数组的长度，同时这个返回的长度是数组索引的最大值 + 1 1arr[arr.length] = x 表示给数组的最后添加一个元素 x push 方法 push()方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。 简单实现 123456Array.prototype.myPush = function () &#123; for(let i = 0; i &lt; arguments.length; i++) &#123; this[this.length] = arguments[i] &#125; return this.length&#125; 首插 unshift() 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。 简单实现 123456789Array.prototype.myUnshift =function () &#123; for (let j = 0; j &lt; arguments.length; j++) &#123; for (let i = this.length; i &gt; 0; i--) &#123; this[i] = this[i - 1]; &#125; this[0] = arguments[j]; &#125; return this.length;&#125; 删除元素尾删 pop() 删除末尾元素，并返回这个元素 1arr.pop() 简单实现 12345678Array.prototype.myPop = function() &#123; if (this.length === 0) &#123; return &#125; let last = this[this.length - 1] this.length-- return last&#125; 首删 shift() 方法从数组中删除第一个元素，并返回该元素的值 简单实现 1234567891011Array.prototype.myShift = function () &#123; let head = this[0] if (this.length === 0) &#123; return &#125; for(let i = 0; i &lt; this.length; i++) &#123; this[i] = this[i + 1] &#125; this.length-- return head&#125; 在任意位置添加或删除 splice() 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。 参数： 第一个：起始计算索引 第二个：删除的元素个数 其余：添加的元素 简单实现 123456789101112131415161718192021222324252627282930313233343536373839Array.prototype.mySplice = function () &#123; let start = arguments[0] let deleteLen = arguments[1] let len = arguments.length let instertEles = [] if (len &lt; 2) &#123; this.length = start &#125; else if (len === 2) &#123; for(let i = start; i &lt; this.length; i++) &#123; this[i] = this[i + deleteLen] &#125; this.length = this.length - deleteLen &#125; else &#123; // 获取添加元素 for (let j = arguments.length - 1; j &gt;= 2; j--) &#123; instertEles.unshift(arguments[j]) &#125; // 删除元素 if (deleteLen &gt;= this.length - start) &#123; this.length = start &#125; else &#123; for (let i = start; i &lt; this.length; i++) &#123; this[i] = this[i + deleteLen] &#125; this.length = this.length - deleteLen &#125; // 添加元素 for(let i = 0; i&lt; instertEles.length; i++) &#123; for(let j = this.length; j &gt; start; j--) &#123; this[j] = this[j - 1] &#125; this[start] = instertEles[i] start++ &#125; &#125;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数组</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nuxt]]></title>
    <url>%2F2019%2F06%2F11%2Fnuxt%2F</url>
    <content type="text"><![CDATA[vue 服务端渲染 和 nuxt服务端优缺点优点有利于SEO 缺点页面在服务器上渲染，增大服务器压力，不利于高并发 简单的vue服务端渲染安装 1npm i vue-server-renderer -S 简单应用 1234567891011121314151617181920212223242526const Vue = require('vue')const renderer = require('vue-server-renderer').createRenderer()const server = require('express')()// vue 部分let app = new Vue(&#123; template:`&lt;h1&gt;Hello World !! &#123;&#123; name &#125;&#125;&lt;/h1&gt;`, data() &#123; return &#123; name: 'zhao' &#125; &#125;&#125;)// node 部分server.get('*', (req, res) =&gt; &#123; // 将渲染的 template 转换成字符串 renderer.renderToString(app, (err, html) =&gt; &#123; if (err) &#123; console.log(err); return &#125; res.send(html) &#125;)&#125;)server.listen(8888) nuxtnuxt vue的服务端渲染框架 官方文档 上车安装 1npx create-nuxt-app &lt;项目名&gt; nuxt 的目录结构dome ├─.nuxt │ ├─components │ └─views ├─assets // 存放为编译的静态资源，less，sass ，java ├─components // 组件目录 ├─layouts // 布局目录 ├─middleware // 中间件目录 ├─pages // 页面目录 ├─plugins // 插件目录 ├─server // 服务器文件目录 ├─static // 静态目录，不会通过webpack打包 └─store // 存放 vuex 的目录]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack]]></title>
    <url>%2F2019%2F05%2F31%2Fwebpack%2F</url>
    <content type="text"><![CDATA[webpack 4上车安装 1webpack webpack-cli -D webpack4 可以 0 配置，但功能不全 入口文件为 项目根目录下面的 src/index.js 打包输出文件为 项目根目录下面的 dist/main.js 打包: 1npx webpack 手动配置执行配置文件执行默认配置 在当前项目根目录下新建一个 webpack.config.js 这是 webpack 默认执行的配置文件 修改默认配置 建立自己的 webpack 配置文件 xxx.js 1npx webpack --config xxx.js 或者给 package.json 添加脚本 123"scripts": &#123; "bulid" "webpack --config xxx.js"&#125; 执行 1npm run bulid webpack基础配置123456789const path = require('path')module.exports = &#123; mode: 'development', // 模式 有两种： production development entry: './src/index.js', // 打包的入口文件 output: &#123; filename: 'bundle.js', // 打包后的文件名 path: path.resolve(__dirname, 'dist') // 打包文件存放目录 &#125;&#125; webpack-dev-server 配置开发服务器，在内存中打包，不会生成真的打包文件，方便修改 安装 1yarn add webpack-dev-server -D 基本配置 12345678devServer: &#123; // 开发服务器配置 port: 3000, // 设置端口 progress: true, // 显示打包进度条 contentBase: './dist', // 指定打包后的开发文件在 dist 目录，这样就可以被 dist 目录其他文件引用 compress: true, // gzip 压缩 proxy：&#123; ‘/api/*’: 'http://localhost:3000' // 将/api/ 的请求用 http://localhost:3000 代理&#125; 插件所有的插件都放在 plugins： [] html-webpack-plugin 插件作用:是将 src 目录下面的 js 文件 自动引入到 src 目录下面的 html 文件里，并将 引入后的 html 文件 打包到 dist 目录 安装 html-webpack-plugin 1yarn html-webpack-plugin -D 引入 1let HtmlWebpackPlugin = require('html-webpack-plugin') 基本配置 1234567891011plugins: [ // 数组，存放着所有的 webpack 插件 new HtmlWebpackPlugin (&#123; template: './src/index.html', // 引入的 html 文件 filename: 'index.html', // 打包后的文件名 minify: &#123; // 对 html 文件的压缩 removeAttributeQuotes: true, // 删除双引号 collapseWhitespace: true, //删除多余的空格和 空行 &#125;, hash: true, // 打包的 js 文件添加 hash 防止文件覆盖 &#125;) ] mini-css-extract-plugin 插件作用： 将 css 文件抽离成单独的文件 安装 1yarn add mini-css-extract-plugin -D 引入 1let MiniCssExtractPlugin = require('mini-css-extract-plugin') 配置 123new MiniCssExtractPlugin(&#123; filename: 'main.css' //导出的 css 文件名称&#125;) 同时需要用 MiniCssExtractPlugin.loader 替换 style-loader 如： 12345678&#123; test: /\.css$/, use: [ MiniCssExtractPlugin.loader, //将打包的 css 引入到 html文件中 'css-loader', 'postcss-loader', //解析css 自动添加浏览器前缀 ]&#125; 模块用于解析打包不同的文件 解析 css 文件安装loader 1yarn css-loader style-loader postcss-loader autoprefixer -D loader css-loader：解析在 css 文件中用 @import 导入的其他css style-loader：将 css 添加到 head 标签中 postcss-loader 自动为 css 添加浏览器前缀 loader 的执行是由顺序的 ：从右向左，从下到上解析 注意： 使用 postcss-loader 需要添加配置文件 在 项目根目录 新建一个 postcss.config.js 的文件 放入 123module.exports = &#123; plugins: [require('autoprefixer')]&#125; 基本配置 1234567891011121314151617module: &#123; rules: [ // 规则 &#123; test: /\.css$/, use: [ &#123; // 可以将 loader 写成对象形式，也可以直接引用 loader: 'style-loader', options: &#123; insertAt: 'top' //将 css 文件插入到 head 标签顶部，方便可以让自己的html中 css覆盖 &#125; &#125;, 'css-loader'， 'postcss-loader', //给 css 自动添加浏览器前缀 ] &#125; ]&#125; 解析 less安装loader 1yarn css-loader style-loader less less-loader postcss-loader autoprefixer -D 配置 1234567891011121314&#123; test: /\.less$/, use: [ &#123; loader: 'style-loader', options: &#123; insertAt: 'top' &#125; &#125;, 'css-loader', 'less-loader'， 'postcss-loader' ]&#125; 高版本es 转化成es5安装babel 12yarn add babel-loader @babel/core @babel/preset-env babel-plugin-transform-runtime @babel/plugin-proposal-class-properties -Dyarn add @babel/runtime @babel/polyfill 配置 1234567891011121314151617181920&#123; test: /\.js$/, use: [ &#123; loader:'babel-loader', options: &#123; // 用babel-loader 将es6 -&gt; es5 presets: [ '@babel/preset-env' ], plugins: [ ["@babel/plugin-proposal-decorators", &#123; "legacy": true &#125;], ["@babel/plugin-proposal-class-properties", &#123; "loose": true &#125;], ["@babel/plugin-transform-runtime"] ] &#125; &#125; ], exclude: /node_modules/, // 排除文件 include: path.resolve(__dirname, 'src') // 打包的文件&#125; 配置eslint校验 js 代码规范 安装loader 1yarn add eslint eslint-loader -D 配置 123456789&#123; test: /\.js$/, use: &#123; loader: 'eslint-loader', options: &#123; enforce: 'pre' // 强制提前执行 &#125; &#125;&#125;, 同时需要在根目录安装一个 .eslintrc.json 的配置文件 这里下载 打包图片安装loader 1yarn add file-loader -D 作用：默认在内部生成一张图片，到dist 目录下，返回生成的图片名 配置 1234567891011121314&#123; test: /\.html/, use: 'html-withimg-loader' // 将html中的图片打包到 dist 目录&#125;, &#123; test: /\.(jpg|jpeg|png|gif)$/, use: &#123; loader: 'url-loader', // 将小于 200K的图片变成base64格式 options: &#123; limit: 200 * 1024, outputPath: 'img/' // 大于200k 的图片放到 /dist/img 下面 &#125; &#125; &#125;, 多入口配置打包成多个文件 1234567891011121314151617181920212223module.exports = &#123; mode: 'development', entry: &#123; //打包两个 js 文件 index: './src/index.js', others: './src/other.js' &#125;, output: &#123; filename: '[name].js', // [name] -&gt; index &amp; others path: path.resolve(__dirname, 'dist') &#125;, plugins: [ new HtmlWebpackPlugin(&#123; template: './src/index.html', filename: 'index.html', chunks: ['index'] // 导出的 html 只引入 index.js &#125;), new HtmlWebpackPlugin(&#123; template: './src/index.html', filename: 'other.html', chunks: ['othwes'] &#125;), ]&#125; 实时监控打包文件123456watch: true, watchOptions: &#123; poll: 1000, aggregateTimeout: 500, // 防抖, 停止输入后 500ms 后重新打包 ignored: /node_modules/ &#125; resolve配置解析第三方模块的规则和次序 1234567resolve: &#123; modules: [path.resolve('node_modules')]， // 查找第三方模块只在当前的 node_modules 文件中找 extensions: ['.js', '.vue'] // 引入这些类型的文件不用写扩展名 alias: &#123; @: './src/components' // 配置别名，用@ 代替后面的地址 &#125;，&#125;]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务部署]]></title>
    <url>%2F2019%2F05%2F23%2F%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[CentOS上车联网用 vim 打开 vi /etc/sysconfig/network-scripts/ifcfg-xxx(xxx为网卡后缀，每个人的都不一样) 修改： 1ONBOOT=no 为 ONBOOT=yes 重启网络 123service network restart//或者/etc/init.d/network restart 更新系统、软件1234// 系统和软件全部更新yum update -y// 只更新软件yum upgrade 更换源备份原来的源 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 更换为网易的源 安装wget 1yum install wget 换源 12wget http://mirrors.163.com/.help/CentOS7-Base-163.repomv CentOS7-Base-163.repo /etc/yum.repos.d/ 重置 12yum clean allyum makecash vim安装vim 1yum install vim -y vim使用vim file 打开或创建 file 文件 vim的三种模式 命令模式 进入 vim 默认进入命令模式， 在命令模式输入当前命令 插入模式 键入 i 进入插入模式，在插入模式输入直接写的文件 底行模式 esc 返回命令模式， shift + ：进入底行模式，在底行模式输入当作底行命令 底行命令 :q(退出不保存) :w（保存文件） :wq(保存并退出) q！（强制退出） 安装服务node将 node 添加到 yum 源中 1curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash - 安装 1yum install nodejs -y 用 vim 写一个简单的 nodejs 服务，发现主机访问不了 需要配置防护墙 配置防火墙1234// 清除防火墙配置iptables -F// 允许 8080 端口访问iptables -A INPUT -p tcp --dport 8080 -j ACCEPT nginx安装添加 源 1vim /etc/yum.repos.d/nginx.repo 添加 12345678910111213[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.key[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.key 安装 1yum install nginx -y 配置进入配置文件 1vim /etc/nginx/conf.d/default.conf 原配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344server &#123; listen 80; ----&gt;监听的端口 server_name localhost; -----&gt; 服务器名称 #charset koi8-r; #access_log /var/log/nginx/host.access.log main; location / &#123; root /usr/share/nginx/html; -------&gt;服务文件目录 index index.html index.htm; -------&gt; 默认的服务文件 &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; # deny all; #&#125;&#125; 配置代理服务 1234567891011121314151617server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log /var/log/nginx/host.access.log main; location / &#123; root /usr/share/nginx/html; index index.html index.htm index.php index.asp; &#125; #将 /node 代理成 http://localhost:8080 location /node &#123; #代理后重新设置一个请求头，用来覆盖原来的请求头 proxy_set_header host $host; proxy_pass http://localhost:8080/; &#125; 配置完成后就可以将 ip /node 代理成 local host:8080 还需要修改 1setsebool -P httpd_can_network_connect 1 重启服务 1/usr/sbin/nginx -s reload mariadb安装 12yum install mariadb-server -ymysql_install_db 配置 1cp /usr/share/mysql/my-xxx.cng /etc/my.cnf 启动 1service mariadb start 添加密码 1mysqladmin -u root password 修改数据库配置，使其可以远程连接 进入数据库 1grant all privileges on *.* to root@&apos;%&apos; identified by &apos;123456&apos;; 这样就可以在本机用数据库管理工具访问数据库 上传程序pm2安装 pm2 1npm i -g pm2 用 pm2 启动服务 1pm2 start xxx.js --name test 启动 xxx.js 文件 并命名为 test 查看启动服务列表 1pm2 list 停止服务 1pm2 stop 服务名 | id 从 pm2 中删除服务 1pm2 delete 服务名 | id]]></content>
      <categories>
        <category>服务端</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>服务端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue通信&vuex]]></title>
    <url>%2F2019%2F05%2F13%2FVue%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%26Vuex%2F</url>
    <content type="text"><![CDATA[vue 数据通信vue 组件间通信父传子父组件 父组件在子组件上使用 key=value 的方式向子组件发送信息 123456789101112131415161718192021222324&lt;template&gt; &lt;ul&gt; &lt;ListItem v-for=&quot;item in items&quot; :data=&quot;item&quot; str=&quot;aaa&quot;&gt;&lt;/ListItem&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;import ListItem from &apos;./list_item&apos;export default &#123; name: &apos;&apos;, data () &#123; return &#123; items: [ &#123;name: &apos;aaa&apos;, price: 355, salse: 552&#125;, &#123;name: &apos;bbb&apos;, price: 66, salse: 554&#125;, &#123;name: &apos;ccc&apos;, price: 22, salse: 66&#125;, &#123;name: &apos;ddd&apos;, price: 555, salse: 88&#125;, &#123;name: &apos;eee&apos;, price: 15, salse: 22&#125; ] &#125; &#125;, components: &#123;ListItem&#125;,&#125;&lt;/script&gt; props 方法 接收 父组件传递的信息 子组件中 使用 proops:[&#39;父组件中传递的key&#39;] 子组件接收后，就可直接使用父组件传递的信息 子组件 123456789101112131415161718192021222324&lt;template&gt; &lt;li&gt; &lt;h3&gt;名称：&#123;&#123;data.name&#125;&#125;&lt;/h3&gt; &lt;p&gt;价格&#123;&#123;data.price&#125;&#125;&lt;/p&gt; &lt;p&gt;月销：&#123;&#123;data.salse&#125;&#125;&lt;/p&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;ListItem&apos;, props: [&apos;data&apos;], data () &#123; return &#123; text: &apos;&apos;, data2: &#123;&#125; &#125; &#125;, mounted () &#123; console.log(this.$attrs); &#125;,&#125;&lt;/script&gt; $attrs 接收父组件传递的信息$attrs 是一个对象，接收的是 子组件中没有通过 props 接收的值， 如果 通过props 接收了，则用$attrs接收不到 1234567891011121314151617181920212223&lt;template&gt; &lt;li&gt; &lt;h3&gt;商品名称:&#123;&#123;data.name&#125;&#125;&lt;/h3&gt; &lt;p&gt;价格:&#123;&#123;data.price&#125;&#125;&lt;/p&gt; &lt;p&gt;月销：&#123;&#123;data.salse&#125;&#125;&lt;/p&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;ListItem&apos;, data () &#123; return &#123; data: &#123;&#125; &#125; &#125;, mounted () &#123; this.data = this.$attrs.data &#125;&#125;&lt;/script&gt; 子传父父组件向子组件传递自己的方法 父组件 12345678910111213141516171819202122232425262728293031323334353637383940&lt;template&gt; &lt;div&gt; 已选中&#123;&#123;count&#125;&#125;件 &lt;ul&gt; &lt;ListItem v-for=&quot;item in items&quot; :data=&quot;item&quot; str=&quot;aaa&quot; :add=&quot;addOne&quot; :minus=&quot;minusOne&quot;&gt;&lt;/ListItem&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import ListItem from &apos;./list_item&apos;export default &#123; name: &apos;&apos;, data () &#123; return &#123; count: 0, items: [ &#123;name: &apos;aaa&apos;, price: 355, salse: 552&#125;, &#123;name: &apos;bbb&apos;, price: 66, salse: 554&#125;, &#123;name: &apos;ccc&apos;, price: 22, salse: 66&#125;, &#123;name: &apos;ddd&apos;, price: 555, salse: 88&#125;, &#123;name: &apos;eee&apos;, price: 15, salse: 22&#125; ] &#125; &#125;, components: &#123;ListItem&#125;, methods: &#123; addOne () &#123; this.count++ &#125;, minusOne () &#123; this.count-- &#125; &#125;&#125;&lt;/script&gt; 子组件 子组件公共 $attrs 接收父组件传递的方法，调用这个方法，实现通信 1234567891011121314151617181920212223242526272829303132333435&lt;template&gt; &lt;li&gt; &lt;h3&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;商品名称:&#123;&#123;data.name&#125;&#125;&lt;/h3&gt; &lt;p&gt;价格:&#123;&#123;data.price&#125;&#125;&lt;/p&gt; &lt;p&gt;月销：&#123;&#123;data.salse&#125;&#125;&lt;/p&gt; &lt;/li&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &apos;ListItem&apos;, data () &#123; return &#123; checked: false, data: &#123;&#125; &#125; &#125;, mounted () &#123; this.data = this.$attrs.data &#125;, watch: &#123; checked () &#123; if (this.checked) &#123; // 子组件调用父组件的方法，实现通信 this.$attrs.add() &#125; else &#123; this.$attrs.minus() &#125; &#125; &#125;,&#125;&lt;/script&gt; axios 和 fetchaxios 和 fetch 都是 对 xmlhttprequest 的封装 12345data () &#123; return &#123; items: [] &#125; &#125;, axios文档 简单使用 123456789101112// 引入axiosimport axios from 'axios'// 将其添加到vue的原型对象上Vue.prototype.axios = axiosasync mounted () &#123; try &#123; this.items = (await this.axios.get('http://localhost:3000/list')).data &#125; catch (err) &#123; console.log(err); &#125;&#125;, fetchfetch 是官方对 xhmhttprequest 的封装 文档 简单使用 1234567async mounted () &#123; try &#123; this.items = await (await fetch('http://localhost:3000/list')).json() &#125; catch (err) &#123; console.log(err); &#125;&#125;, 用 (await fetch(&#39;http://localhost:3000/list&#39;)).json() 获取请求数据，返回的是一个 Promise 对象， 所以还需要 await一下 vuex 统一状态管理Vuex 简介什么是VuexVuex 是专门为 Vue.js 应用程序开发的状态管理模式 为什么要用Vuex当我们构建一个中大型的单页面应用程序时，Vuex 可以更好的帮助我们在组件外部统一管理状态 Vuex 的核心state State 是唯一的数据源 单一的状态树 组件中可以用 this.$store.state.[所要获取数据] 用组件的 computed 来监听 state 里面的值的变化 12345computed: &#123; count () &#123; return this.$store.state.count &#125; &#125;, 当 vuex 中的count 改变，会触发computed 中的 count 从而对数据进行更新 mutations 更改 Vuex 中 store 中的状态唯一的方法就是提交 mutation 1234567891011const store = new Vuex.Store(&#123; state: &#123; count: 1 &#125;, `mutations`: &#123; increment(state) &#123; // 只能用 mutations 改变 state.conunt++ &#125; &#125;&#125;) 组件中触发vuex 1$store.commit('increment') 直接掉用 mutations 里面的方法 改变 state 里面的值 actions actions 提交的是 mutation， 而不是直接变更状态 actions 可以包含任意的异步操作 123456789101112131415const store = new Vuex.Store(&#123; state:&#123; count: 0 &#125;, mutations: &#123; increment (state) &#123; state.count++ &#125; &#125;, `actions`: &#123; increment (context) &#123; context.commit('increment') &#125; &#125;&#125;) 组件中触发vuex 1this.$store.dispatch('increment') 先触发 actions 里面的方法，再触发 mutations 的方法，修改 state 里面的值 getters 通过 getters 可以派生出一些新的状态 如： 12345678910111213const store = new Vuex Store(&#123; state: &#123; todos: [ &#123;id: 1;,texi:'...',done:true&#125;, &#123;id: 2;,texi:'...',done:false&#125; ] &#125;, getters: &#123; doneTodos: state =&gt; &#123; return state.todos.filter(todo =&gt; todo.done) &#125; &#125;&#125;) Modules 面对复杂的应用程序，当管理的状态比较多时，需要将Vuex 的store 对象分割成模块（modules），每一个模块都是一个store对象 123456789// 引入两个子模块import user from './user'import article from './article'// 使用子模块modules: &#123; user, article &#125; user模块 12345678910111213141516171819export default &#123; state: &#123; name: 'zhao', age: 22 &#125;, mutations: &#123; setAge (state, arg) &#123; state.age = arg &#125; &#125;, actions: &#123; setAge (&#123;commit&#125;, arg) &#123; commit('setAge', arg) &#125; &#125;, getters: &#123; &#125;&#125; 注意： 在组件中获取模块中的 state 需要 this.$store.state.[模块名].[state属性] 用dispatch可以直接触发 子模块的 actions 的方法 如：this.$store.dispatch(&#39;setAge&#39;, 12) 如果子模块和父模块中的 actions 中用相同的方法，则这些方法全部触发]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VueRouter]]></title>
    <url>%2F2019%2F04%2F16%2FVueRouter%2F</url>
    <content type="text"><![CDATA[路由前端路由的本质是锚点值改变，页面不跳转，但改变 innerHtml的内容 123456789101112131415161718&lt;body&gt; &lt;a href="#/login"&gt;点我登陆&lt;/a&gt; &lt;a href="#/register"&gt;点我注册&lt;/a&gt; &lt;div id="div"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; let div = document.querySelector('div') window.addEventListener('hashchange',()=&gt;&#123; switch(location.hash) &#123; case '#/login': div.innerHTML = '&lt;h1&gt;登陆&lt;/h1&gt;' break; case '#/register': div.innerHTML = '&lt;h1&gt;注册&lt;/h1&gt;' break; &#125; &#125; )&lt;/script&gt; 路由其实是由 hash 完成的（基于hashchange事件） 监听 url 上锚点（#xxx）的变化改变页面的内容（锚点和 hash 一回事） vue 路由路由使用步骤： 引入vue-router路由（插件）对象 安装插件 创建路由对象 配置路由对象 指定路由改变的位置 将配置好的 路由对象 关联到 vue 实例中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;!-- 1. 引入vue-router路由（插件）对象 --&gt;&lt;script src="./node_modules/vue-router/dist/vue-router.js"&gt;&lt;/script&gt;&lt;script&gt; // 2. 安装插件 Vue.use(VueRouter); // 需要显示的组件 let login = &#123; template:`&lt;div&gt; 登陆 &lt;/div&gt;` &#125; let register = &#123; template:`&lt;div&gt; 注册&lt;/div&gt;` &#125; // 3.创建路由对象 let router = new VueRouter(&#123; // 4. 配置路由对象 routes:[ &#123; path: '/login', component: login &#125;, &#123; path: '/register', component: register &#125; ] &#125;) // 5. 指定路由改变的位置 let app = &#123; template: ` &lt;div&gt; &lt;router-link to="/login"&gt;注册&lt;/router-link&gt; &lt;router-link to="/register"&gt;登陆&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; ` &#125; // 6. 将配置好的 路由对象 关联到 vue 实例中 new Vue(&#123; el:'#app', components: &#123; app &#125;, router, template:'&lt;app/&gt;', &#125;)&lt;/script&gt; vue中的路由是切换组件，并不是页面切换。 router-link 其实就是一个 a 标签 router-view 是一个占位符，需要路由的地方就需要 router-view 路由参数 用 $route.params 获取 路由参数 /:123 用 $route.query 获取 问号参数 /a=123 用 beforRouteUpdate(to, from, next)监听路由变化 也可以用 watch 监听路由变化 123456789101112131415161718192021222324252627282930313233343536&lt;body&gt; &lt;div id="div1"&gt; &lt;router-link to="/article/1"&gt;文章1&lt;/router-link&gt; &lt;router-link to="/article/5"&gt;文章2&lt;/router-link&gt; &lt;router-link to="/article/10"&gt;文章3&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; let router = new VueRouter(&#123; routes: [&#123; path: '/article/:id', component: &#123; // $route 记录当前路由信息 template: '&lt;div&gt;文章的id：&#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;', beforeRouteUpdate(to, from, next)&#123; if (confirm('如果离开，修改不会保存')) &#123; next(); &#125; &#125; &#125; &#125;], &#125;); new Vue(&#123; el: '#div1', router, watch: &#123; // 监听路由变化 $route(newVal, oldVal) &#123; console.log('从', oldVal); console.log('变到', newVal); &#125; &#125; &#125;)&lt;/script&gt; 命名路由 给路由对象一个名称，相当于一个存储路由路径的变量 123// name 属性的值相当于一个变量，存储了路由的来路径 &#123; name:'login', path: '/login', component: login &#125;, &#123; name:'register', path: '/register', component: register &#125; 在 router-link 的 to 属性中通过对象描述这个规则 123&lt;router-link :to="&#123;name: 'login'&#125;"&gt;注册&lt;/router-link&gt; &lt;router-link :to="&#123;name: 'register'&#125;"&gt;登陆&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; 路由嵌套路由包含子路由，视图（router-view）包含变化的子视图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt; &lt;script src="./node_modules/vue/dist/vue.js "&gt;&lt;/script&gt; &lt;script src="./node_modules/vue-router/dist/vue-router.js"&gt;&lt;/script&gt; &lt;script&gt; let login = &#123; template: `&lt;div&gt; login路由，下面是子路由显示的内容 &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;` &#125; let vip = &#123; template: ` &lt;div&gt; vip 登陆 &lt;/div&gt; ` &#125; let register = &#123; template: `&lt;div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;` &#125; let app = &#123; template: ` &lt;div&gt; &lt;router-link :to="&#123; name:'vip'&#125;"&gt;去vip&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; `, &#125; let router = new VueRouter(&#123; routes:[ &#123; path: '/login', name: 'login', component: login, children: [ &#123; path: 'vip', name: 'vip', component: vip &#125; ] &#125; ] &#125;) Vue.use(VueRouter) new Vue(&#123; el:'#app', router, components: &#123; app &#125;, template: '&lt;app/&gt;' &#125;) &lt;/script&gt;&lt;/body&gt; 子路由只需要在父级路由中加上一个 children 的数组，里面配置自己的路由 metameta 是对于路由规则是否需要验证权限的配置 路由对象中，和 name 属性同级 1meta:&#123;isChicked:true&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script src="./node_modules/vue-router/dist/vue-router.js"&gt;&lt;/script&gt;&lt;script&gt; let isLogin = false Vue.use(VueRouter); let login = &#123; template: `&lt;div&gt; 登陆界面，不登陆，不显示音乐界面 &lt;/div&gt;`, // 组件创建之后 created () &#123; isLogin = true &#125; &#125; let music = &#123; template: `&lt;div&gt; 音乐界面&lt;/div&gt;` &#125; let router = new VueRouter() // 追加路由对象 router.addRoutes([ // 默认首页路由 &#123; path: '/', redirect: &#123;name: 'login'&#125; &#125;, &#123; name:'login', path: '/login', component: login &#125;, &#123; name:'music', path: '/music', component: music, // 路由守卫（权限控制） meta: &#123; isChick:true &#125; &#125; ]) router.beforeEach((to, from, next) =&gt; &#123; // to: 要去的路由对象 // from： 从哪里去的 路由对象 // next() 继续执行 if (!to.meta.isChick) &#123; next() &#125;else&#123; if (isLogin) &#123; next() &#125; else&#123; // 重定向 next(&#123;name: 'login'&#125;) &#125; &#125; &#125;) // 5. 指定路由改变的位置 let app = &#123; template: ` &lt;div&gt; &lt;router-link :to="&#123;name:'login'&#125;"&gt;登陆&lt;/router-link&gt; &lt;router-link :to="&#123;name:'music'&#125;"&gt;音乐&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; ` &#125; // 6. 将配置好的 路由对象 关联到 vue 实例中 new Vue(&#123; el: '#app', components: &#123; app &#125;, router, template: '&lt;app/&gt;', &#125;)&lt;/script&gt; 编程导航 跳转到指定锚点，并显示页面 1this.$router.push&#123;name:'xxx',query:&#123;id:1&#125;,params:&#123;name:'abc'&#125;&#125; 根据历史记录前进或后退 1this.$router.go(1 | -1) ​ 1 前进，-1 后退]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>路由</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初窥vue]]></title>
    <url>%2F2019%2F04%2F14%2F%E5%88%9D%E7%AA%A5vue%2F</url>
    <content type="text"><![CDATA[vue双向数据绑定一向js 内存属性的改变，影响页面的变化 二向页面的改变影响 js 内存的改变 起步12345678910111213141516171819&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt; // 启动 Vue new Vue(&#123; // vue 监管的区域 el: '#app', // dom 结构 template: '&lt;div&gt;大家好 &#123;&#123; text &#125;&#125;&lt;/div&gt;', // 存放变量 data()&#123; return &#123; text: 'hello vue' &#125; &#125; &#125;)&lt;/script&gt; vue 的常见指令 v-text ： 是元素的innerText 只能在双标签中使用 v-html ： 是元素的 innerHTML 不能有 v-if ： 元素是否移除（删除元素） v-show ： 元素是否显示或隐藏 v-model： 双向数据绑定（内存js和页面的变化相互影响） v-bind: 单向数据绑定（内存js 影响页面） 多用于属性绑定 123v-bind:title = "txt"//简写:title = "txt" v-on： 用于事件绑定 可以简写 @: 1234567891011121314151617181920212223&lt;script&gt; window.onload = function () &#123; let vm = new Vue(&#123; el: '#div1', data: &#123; cont: 0 &#125;, methods:&#123; fnClick() &#123; this.cont ++ &#125; &#125; &#125;) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1"&gt; &#123;&#123; cont &#125;&#125; &lt;br&gt; &lt;span v-on:click = "fnClick"&gt;点击试试&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; v-for: 用于循环 1234567891011121314151617181920212223242526 &lt;script&gt; window.onload = ()=&gt; &#123; let vm = new Vue(&#123; el: '#div1', data: &#123; users: [ &#123; id:11 ,name: '张三', age: 18 &#125;, &#123; id:13 ,name: '张三', age: 19 &#125;, &#123; id:18 ,name: '张三', age: 20 &#125;, &#123; id:120, name: '张三', age: 21 &#125;, ] &#125; &#125;) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="div1"&gt; &lt;ul&gt; //用 key 绑定 数据中一个不会变的值，这样可以将 每一条数据和相应的视图所对应，在数据发生变化的时候，可以直接修改这个视图 &lt;li v-for="item,index in users" :key="users.id"&gt; &#123;&#123; index &#125;&#125;姓名: &#123;&#123;item.name&#125;&#125;, 年龄： &#123;&#123; item.age &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt; 组件组件的使用 第一步：创建组件 第二步：声明组件（components) 1components:&#123;'组件名'，组件对象&#125; 第三步：使用组件（template） 组件需要放在一个标签下 可以通过&lt;组件名&gt;&lt;/组件名&gt;使用 也可以通过&lt;组件名/&gt;使用 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt; // 创建子组件 let MyHeader = &#123; template: ` &lt;div&gt; 我是header组件 &lt;/div&gt; ` &#125; let MyFooter = &#123; template: ` &lt;div&gt; 我是footer组件 &lt;/div&gt; ` &#125; // 入口组件(父组件) let App = &#123; // 声明使用子组件 components: &#123; 'my-header': MyHeader, 'my-footer': MyFooter &#125;, // 使用子组件 template: ` &lt;div&gt; &lt;my-header/&gt; &lt;my-footer/&gt; &lt;/div&gt; ` &#125; new Vue(&#123; el: '#app', // 声明使用父组件 components: &#123; app: App &#125;, // 使用父组件 template: '&lt;app/&gt;' &#125;)&lt;/script&gt; 父传子 父组件使用子组件时通过属性传递 子组件要声明 props[‘属性名’] 来接收 子组件收到父组件后在 template 中直接使用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt; // 创建子组件 let Son = &#123; template: ` &lt;div&gt; 接收到父组件的数据是 &#123;&#123; title &#125;&#125; &lt;h1&gt;1&lt;/h1&gt; &lt;h1&gt;2&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;button&gt;改变显示&lt;/button&gt; &lt;/div&gt; `, // 声明接收参数 props:['title'] &#125; // 声明入口组件 // 父向子传递， 就是 v-bind 给元素的属性赋值 let App = &#123; // 声明子组件 components: &#123; son:Son &#125;, template: ` &lt;h1&gt; &lt;!-- 父传子--&gt; &lt;son :title="xxx"&gt;&lt;/son&gt; 我是入口组件 &lt;/h1&gt;`, data()&#123; return &#123; xxx: '我是 xxx 数据' &#125; &#125; &#125; new Vue(&#123; el: '#app', // 声明要使用的组件 components: &#123; app: App &#125;, template: '&lt;app/&gt;',//入口组件 &#125;)&lt;/script&gt; 注册全局组件应用场景：将公共组件注册成为全局组件，在使用全局组件时候不用声明，减少代码冗余 写法： 1Vue.component('组件名'，组件对象) 例如： 1234567891011121314151617// 注册公共的全局组件 Vue.component('my-btn',&#123; template: ` &lt;button&gt; 全局组件 button &lt;/button&gt; ` &#125;) // 创建子组件 let MyHeader = &#123; template: ` &lt;div&gt; 我是header组件 &lt;my-btn/&gt; &lt;/div&gt; ` &#125; 在子组件中直接使用 my-btn 组件 slot作用：父元素向子元素传递 dom 节点 用法：通过 vue 提供的 例如 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt; // &lt;slot&gt;&lt;/slot&gt; 是一个占位符，具体内容可以在使用时自定义 let myLi = &#123; template: ` &lt;li&gt; &lt;slot name="one"&gt;&lt;/slot&gt; &lt;slot name="two"&gt;&lt;/slot&gt; &lt;/li&gt;` &#125; // 将 myLi 注册成为全局组件 Vue.component('my-li', myLi) let app = &#123; template: ` &lt;div&gt; &lt;ul&gt; 第一个slot &lt;my-li&gt;&lt;button slot="one"&gt;1&lt;/button&gt;&lt;/my-li&gt; 第二个slot &lt;my-li&gt; &lt;h1 slot="two"&gt;2&lt;/h1&gt; &lt;/my-li&gt; &lt;/ul&gt; &lt;/div&gt; ` &#125; new Vue(&#123; el: '#app', components: &#123; app &#125;, template: '&lt;app/&gt;' &#125;)&lt;/script&gt; 标签可以有多个 slot 有一个name 属性，用来作为标识 用其他元素填充 时候，需要给这个元素加一个 slot 属性，属性的值要和name 的属性值相同，这样此元素可以填充对应的 组件的生命周期 beforeCreate 和 created beforeCreate：表示：在组件创建之前 created：组件创建之后 created 可以操作数据，实现 vue -&gt; 页面的影响 通常用来 发起 ajax 请求 使用该组件就会触发以上的事件函数（钩子函数） 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt; let test = &#123; template: ` &lt;div&gt; 我是 test 组件 &lt;/div&gt; `, data () &#123; return &#123; text:'zhao' &#125; &#125;, beforeCreate () &#123; console.log(this.text); //undefined &#125;, created () &#123; console.log(this.text); //zhao &#125; &#125; let app = &#123; components: &#123; test &#125;, template: ` &lt;div&gt; &lt;test/&gt; &lt;/div&gt; ` &#125; new Vue(&#123; el: '#app', components: &#123; app &#125;, template: '&lt;app/&gt;' &#125;)&lt;/script&gt; beforeMount 和 Mounted beforeMount：vue 还没有装载的组件的 dom Mounted：vue 装载后的组件后的 dom 1234567891011121314151617 beforeMount () &#123; console.log(document.body.innerHTML); //没有装载的组件的 dom // &lt;div id="app"&gt;&lt;/div&gt; &#125;, // vue 装载数据到 dom 之后 mounted () &#123; console.log(document.body.innerHTML); //装载后的组件后的 dom // &lt;div&gt; // &lt;div&gt; // 我是 test 组件 // &lt;/div&gt; // &lt;/div&gt; &#125;&#125; beforeUpdate 和 updated beforeUpdate：基于数据页面数据改变之前的 dom updated：页面数据改变后 dom beforeDestroy 和 destroyed beforeDestroy：组件对象销毁之前 destroyed：组件对象销毁之后 以上的两个事件，必须和 父组件的 v-if false 配合使用4 销毁，最终都是做一些其他功能的释放，比如销毁之前将数据保存到localStorage 频繁发销毁和创建组件不利于页面的渲染，vue 中 提供了将销毁的组件包裹，这样可以控制组件的激活和停用 12345678910template: ` &lt;div&gt; &lt;keep-alive&gt; &lt;test v-if="isExist"&gt;&lt;/test&gt; &lt;/keep-alive&gt; &lt;button @click="isExist=!isExist&gt;切换&lt;/button&gt; &lt;/div&gt; ` activated 和 deactivated activated：用于判断组件是否被激活 deactivated：用于判断组件是否停用 过滤器（filter） filter 全局过滤器 1Vue.filter('过滤器名','过滤方式') filters 组件自己的过滤器 反转字符串 123456789101112131415161718192021222324252627282930313233343536373839&lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script src="./node_modules/vue/dist/vue.js"&gt;&lt;/script&gt;&lt;script&gt; let app = &#123; template: ` &lt;div&gt; &lt;input type="text" v-model="myText" /&gt; &lt;!-- 使用过滤器， 接收一个 myText 过滤后的值 --&gt; &#123;&#123; myText | reverse('你好') &#125;&#125; &lt;/div&gt; `, data() &#123; return &#123; myText: ''&#125; &#125;, methods: &#123; fn() &#123; &#125; &#125;, //设置过滤器 filters: &#123; //第一个参数为 myText 的值， 第二个为使用 reverse 传入的 reverse(oldVal, params) &#123; return params + ':' + oldVal.split('').reverse().join('') &#125; &#125; &#125; new Vue(&#123; el:'#app', components:&#123; app &#125;, template: '&lt;app/&gt;' &#125;)&lt;/script&gt; 跟 component 和 components 类似 监听（watch）基本监听只能监听基本数据类型， 因为简单数据类型的变量指向的是内存中的数据， 而而复杂数据类型指向的是其在内存中的地址。 复杂类型改变其地址不变，所以监听不到 1234567891011121314151617181920212223&lt;body&gt; &lt;div id="div1"&gt; &lt;input type="text" name="" id="" v-model="a"&gt; &lt;/div&gt;&lt;script&gt;window.onload = () =&gt;&#123; new Vue(&#123; el: '#div1', data: &#123; a: '' &#125;, // watch 用于监听变化， watch: &#123; // 第一个为 改变后的值，第二个为改变前的值 a(newVal, oldVal)&#123; console.log(`a从$&#123;oldVal&#125;变成$&#123;newVal&#125;`); &#125; &#125; &#125;) &#125; &lt;/script&gt;&lt;/body&gt; 复杂监听可以监听到 复杂数据类型的改变 12345678910111213141516171819202122232425262728293031323334&lt;script&gt; let app = &#123; template: ` &lt;div&gt; &lt;button @click="stus[0].name='zhang'"&gt;改变数组naem属性值&lt;/button&gt; &lt;/div&gt; `, data() &#123; return &#123; stus: [&#123;name:'zhao'&#125;] &#125; &#125;, // 深度监听 watch: &#123; stus:&#123; deep: true, handler(newVal, oldVal) &#123; console.log('改变了'); &#125; &#125; &#125; &#125; new Vue(&#123; el: '#app', components: &#123; app &#125;, template: '&lt;app/&gt;' &#125;)&lt;/script&gt;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es6]]></title>
    <url>%2F2019%2F04%2F04%2Fes6%2F</url>
    <content type="text"><![CDATA[es6参考资料：阮一峰的es6 变量&amp;赋值var 的缺点 可以重复定义 不能限制修改 没有块级作用域 let和const对比： let 定义变量 有块级作用于 不能重复定义 声明不会提升 const 定义常量 有块级作用于 不能重复定义 声明不会提升 var 定义变量 没有块级作用域 可以重复定义会覆盖 声明会提升 经典用法解决for循环中的闭包 es6用法 12345678910111213141516&lt;body&gt; &lt;input type="button" value="1"&gt; &lt;input type="button" value="2"&gt; &lt;input type="button" value="3"&gt;&lt;/body&gt; &lt;script&gt; window.onload=function ()&#123; let aBtn=document.getElementsByTagName('input'); for(let i=0;i&lt;aBtn.length;i++)&#123; aBtn[i].onclick=function ()&#123; alert(i); &#125;; &#125; &#125;; &lt;/script&gt; es5闭包实现 123456789101112131415161718&lt;body&gt; &lt;input type="button" value="1"&gt; &lt;input type="button" value="2"&gt; &lt;input type="button" value="3"&gt;&lt;/body&gt; &lt;script&gt; window.onload=function ()&#123; var aBtn=document.getElementsByTagName('input'); for(var i=0;i&lt;aBtn.length;i++)&#123; (function (i) &#123; aBtn[i].onclick=function ()&#123; alert(i); &#125;; &#125;)(i) &#125; &#125;;&lt;/script&gt; 结构赋值 数组：将等号右边的 按格式依次赋值给 等号左边 字面量对象： 等号右边的对象的属性和左边的变量名相同的匹配 12let [a,b,c] = [1,2,3]let&#123;a,b,c&#125; = &#123;a:1, b:2, c:3&#125; 函数箭头函数 es5 函数 123function (参数1，参数2) &#123; 函数体&#125; es6 函数 123(参数1，参数2)=&gt;&#123; 函数体&#125; 注意： 如果有且仅有一个参数 （）可以省略 如果函数体只是 return 返回的一句话 {} 可以省略 12345let show = function (a) &#123; return a*3&#125;show(3) //9 简写 123let show = a =&gt; a*3show(3)//9 默认参数在 es5 中 函数的参数没有默认值 但可以通过函数体实现 1234567function show (a, b, c) &#123; b = b || 2 c = c || 3 console.log(a+b+c)&#125;show(1) //6show(2,2,1) //5 es6 中 12345function show (a, b = 2, c = 3) &#123; console.log(a+b+c)&#125;show(1) //6show(2,2,1) //5 …运算符…名字 的用法 作用一: rest参数 ES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。 123456function show(a,b,c,...f) &#123; console(a,b,c,f)&#125;show(1,2,3,4,5,6,7,8)//1 2 3 [4, 5, 6, 7, 8] 作用 二：扩展运算符 它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 123456let arr = [1,2,3,4]let arr2 = [9,10]arr.push(...arr2)console.log(arr)//[1,2,3,4,9,10] 数组&amp;jsonmap（映射）表示一对一的关系，如：给定成绩数组，返回对应是否及格数组 12345678910111213141516// [30,50,67,80,90,45]=&gt;[false,false,true,true,true,false]let arr = [30, 50, 67, 80, 90, 45] let arr2 = arr.map((item, index) =&gt; &#123; if (item &gt;= 60) &#123; return true &#125; else &#123; return false &#125; &#125;) console.log(arr2);//简写let arr2 = arr.map(item =&gt; item&gt;=60 )console.log(arr2); map 的返回值是一个新数组 filter（过滤）过滤掉不及格的成绩 1234let arr = [30, 50, 67, 80, 90, 45] let arr2 = arr.filter(item =&gt; item &gt;= 60) //item &gt;=60 将其返回，否则过滤掉 console.log(arr2); filter 返回也使一个新数组 forEach（遍历）求总成绩 123456let arr = [30, 50, 67, 80, 90, 45] let sum = 0; arr.forEach(item =&gt; &#123; sum += item &#125;) console.log(sum); reduce （减少）进去一堆，出来一个，多用于汇总 求和 参数 tem 为临时值，用于保存每次相加的结果 tmp 第一次 为 30 第二次 为 80 ​ … 147 123456let arr = [30, 50, 67, 80, 90, 45] let sum = arr.reduce((tmp, item, index) =&gt; &#123; return tmp +item &#125;) console.log(sum); set（集合）去除数组重复的元素 先将 数组转换成集合，再将集合转换成数组 123let arr = [30, 50, 67, 80, 90, 45,67, 80, 90, 45] let arr2 = Array.from(new Set(arr)) console.log(arr2); json 如果键值名字相同，可以只写一个 1234let a = 10let b = 12let json = &#123;a, b&#125; //相当于 let json = &#123;a: a, b: b&#125;console.log(json); 省略 function 123456789let a = 10 let b = 12 let json = &#123; a, b, show()&#123; return a + b &#125; &#125; 字符串字符串模板用 ``符号将字符串包裹，用 ${变量} 优点： 植入变量 可以行 12345678let json = &#123; age: 25, name: 'zhao' &#125; console.log('我叫' + json.name + '今年' + json.age); //用字符串模板 console.log(`我叫$&#123;json.name&#125;,今年$&#123;json.age&#125;`); 面向对象类 class 类名{} constructor（） {属性} 方法（）{} 12345678910111213141516class Person&#123; constructor(name, age) &#123; this.name = name; this.age = age &#125; showname() &#123; console.log(`我叫 $&#123;this.name&#125;`); &#125; showage() &#123; console.log(`我 $&#123;this.age&#125;`); &#125; &#125; let p = new Person('小米', 18) p.showname() //我叫 小米 p.showage() //我 18 继承 class 子类 extends 父类{} super（继承父类的属性） 1234567891011121314151617181920212223242526272829class Person&#123; constructor(name, age) &#123; this.name = name; this.age = age &#125; showname() &#123; console.log(`我叫 $&#123;this.name&#125;`); &#125; showage() &#123; console.log(`我 $&#123;this.age&#125;`); &#125; &#125;class Worker extends Person&#123; constructor(name, age, job) &#123; super(name, age); this.job = job; &#125; showjob() &#123; console.log(`我的工作是 $&#123;this.job&#125;`); &#125;&#125;let worker = new Worker('小米', 18, '打杂的')worker.showage() //我 18worker.showname() //我叫 小米worker.showjob() // 我的工作是 打杂的 promise 创建一个promise对象 1234let p = promise((resolve, reject) =&gt; &#123; &#125;)p.then (() =&gt;&#123;&#125;,() =&gt; &#123;&#125;) promise 对象中有两参数，一个表示请求成功后的回调函数，一个是请求失败的回调函数 then 方法接收两个函数，第一个是 resolve 的回调函数，第二个是 reject 的回调函数 使用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051let fs = require('fs')let p1 = new Promise( (resolve, reject) =&gt;&#123; fs.readFile('./data/a.txt', 'utf8', (err, data)=&gt; &#123; if (err) &#123; reject(err) &#125; else &#123; resolve(data) &#125; &#125;)&#125;)let p2 = new Promise( (resolve, reject) =&gt;&#123; fs.readFile('./data/b.txt', 'utf8', (err, data)=&gt; &#123; if (err) &#123; reject(err) &#125; else &#123; resolve(data) &#125; &#125;)&#125;)let p3 = new Promise( (resolve, reject) =&gt;&#123; fs.readFile('./data/c.txt', 'utf8', (err, data)=&gt; &#123; if (err) &#123; reject(err) &#125; else &#123; resolve(data) &#125; &#125;)&#125;)p1 .then( (data) =&gt;&#123; console.log(data) // 当 p1 读取成功的时候 // 当前函数中 return 的结果就可以在后面的 then 中 function 接收到 // 真正有用的是：我们可以 return 一个 Promise 对象 // 当 return 一个 Promise 对象的时候，后续的 then 方法中的第一个参数会作为 p2 的 resolve return p2 &#125;, (err) =&gt;&#123; console.log('读取文件失败了', err) &#125;) .then( (data)=&gt; &#123; console.log(data) return p3 &#125;) .then( (data)=&gt; &#123; console.log(data) console.log('end') &#125;) promise.all 使用 promise.all 方法可以简化 then 方法的使用 1234567891011121314151617181920212223242526272829303132333435363738let p1 = new Promise( (resolve, reject) =&gt;&#123; fs.readFile('./data/a.txt', 'utf8', (err, data)=&gt; &#123; if (err) &#123; reject(err) &#125; else &#123; resolve(data) &#125; &#125;)&#125;)let p2 = new Promise( (resolve, reject) =&gt;&#123; fs.readFile('./data/b.txt', 'utf8', (err, data)=&gt; &#123; if (err) &#123; reject(err) &#125; else &#123; resolve(data) &#125; &#125;)&#125;)let p3 = new Promise( (resolve, reject) =&gt;&#123; fs.readFile('./data/c.txt', 'utf8', (err, data)=&gt; &#123; if (err) &#123; reject(err) &#125; else &#123; resolve(data) &#125; &#125;)&#125;)Promise.all([p1,p2,p3]).then(arr =&gt; &#123; //解构赋值 let [a, b, c] =arr; alert('成功')&#125;,err=&gt; &#123; alert('失败')&#125;) all 方法中 以数组形式 传入promise 对象，后面 then 中用数组接收返回结果 generator generator 可以使函数 运行时暂停 yield 可以设置断点 generator 函数是有返回值的 执行 generator 函数 需要用到 返回值 中的 next() 方法 12345678910111213141516//创建一个 generator 函数function *show() &#123;&#125;//用 yield 可以设置 断点 ，function *show() &#123; alert('aaa') yield alert('bbb')&#125;//接收 generator 函数 的返回值let gen = show()//调用gen.next() //此时函数执行到 yield 处停止 // aaagen.next() //执行yield 下半部分 // bbb yield 传参 1234567891011function *show() &#123; alert('aaa') // 接受参数 let a = yield alert('bbb' + a) // bbb12&#125;let gen = show()gen.next() gen.next(12) //传参 返回 123456789101112function *show() &#123; alert('aaa') // 返回值 yield 55 alert('bbb') &#125;let gen = show()let res1 = gen.next() console.log(res1) // &#123;value: 55, done: false&#125;let res2 = gen.next() console.log(res2) // &#123;value: undefined, done: true&#125; done ，表示函数是否执行完成 async/await12345678910async function show () &#123; try&#123; let data1 = await $.ajax(url: '1.text',dataType: 'json') let data2 = await $.ajax(url: '2.text',dataType: 'json') let data3 = await $.ajax(url: '3.text',dataType: 'json') &#125; catch(e) &#123; alert('出错') &#125;&#125;show() async 中的 await 异步操作 会变成按顺序执行 ，同时返回成功的结果，可以用try-catch进行错误捕获，得到错误结果 编译——&gt;es5babel编译]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[koa]]></title>
    <url>%2F2019%2F03%2F31%2Fkoa%2F</url>
    <content type="text"><![CDATA[koakoa 中所有的异步操作都需要用 async /await 安装 1npm i koa koa-static koa-better-body koa-convert koa-router -D koa-static 用于开放静态资源 koa-better-body 用于解析 post 提交数据 koa-convert 用于兼容中间件 koa-router 用于路由 koa 入门 引入模块 使用 监听端口 1234const koa = require('koa')let server = new koa()server.listen(8888) 路由koa 对router 强依赖，不像 express 一样可以自带简单路由 express 中的简单路由 1234let server = expressserver.get('/', (req, res)=&gt;&#123; &#125;) 但是这个不能在 koa 中使用，要在 koa 中使用路由，必须 引入路由模块， 创建路由 配置中间件 123456789101112const koa = require('koa')const router = require('koa-router')let server = new koa()server.listen(8888)let router1 = router()server.use(router1.routes())router1.get('/', async(ctx, next) =&gt; &#123; &#125;) async 中的 ctx 对象 的重要属性 ctx. req 原生的 req 对象 ctx.request koa 封装的 req 对象 ctx.res 原生的 res 对象 ctx.response koa 封装的 res 对象 ctx.response 设置响应头 12//设置一个 a 的响应头， 值为 12ctx.response.set('a', 12) 设置返回内容 12//向浏览器返回jsonctx.response.body = &#123;a: 12, b: 25&#125; 设置状态码 1ctx.response.status = 403 ctx.request 获取请求头 1ctx.request.headers 开放静态文件， 返回文件开放 www 目录下的资源 123456789const koa = require('koa')const static = require('koa-static')const path = require('path')let server = new koa()server.listen(8888)// 路径转化成绝对路径server.use(static(path.resolve('./www'))) 如果 www 目录下面 有一个 1.html 我文件，则可以通过 http://localhost:8888/1.html请求 koa-static 存在问题 发送给浏览器的文件没有经过压缩 发送的文件不会缓存 解决方法 使用中间件 koa-static-cache 代替 koa-static 123456789const koa = require('koa')const staticCache = require('koa-static-cache')const path = require('path')let server = new koa()server.listen(8888)// 路径转化成绝对路径server.use(staticCache(path.resolve('./www'))) 数据处理获取 get 数据获取问号参数 1ctx.request.query 获取路由参数 1ctx.params 123456789101112131415const koa = require('koa')const router = require('koa-router')let server = new koa()server.listen(8888)let r1 = router()server.use(r1.routes())// 路由参数为 user，和 ager1.get('/:user/:age', async (ctx, next) =&gt; &#123; ctx.response.body = 'sadfasd' console.log(ctx.params); //&#123; user: '小明', age: '54' &#125; &#125;) 请求url：http://localhost:8888/小明/54 ， 获取 post 数据 引入第三方模块 koa-better-body，用来解析 post 提交的数据 引入 koa-convert ，用来 兼容 koa-better-body 在 koa2版本的使用 ctx.request.fields 可以获取 post 方式提交的 表单，文件信息 ctx.request.files 只能获取 post 方式提交的 文件信息 使用1234567891011121314151617181920212223242526const koa = require('koa')const betterBody = require('koa-better-body')const staticCache = require('koa-static-cache')const convert = require('koa-convert')const path = require('path')let server = new koa()server.listen(8888)// 开放静态资源server.use(staticCache(path.resolve('./www')))server.use(convert(betterBody(&#123; //保存提交的文件地址 uploadDir: path.resolve('./upload'), //是否保留上传文件的扩展名（一般不用保留） keepExtensions: true&#125;)))//不用路由，可以获取所有的提交server.use(async ctx =&gt; &#123; console.log(ctx.request.fields); console.log(ctx.request.files); &#125;) cookie&amp;sessioncookie 获取cookie 1ctx.cookies.get(cookie名字) 设置cookie 1ctx.cookes.set(cookie名字，值，option) session使用 第三方模块 koa- session 1const session = require('koa-session') 配置中间件 {}中填入session 的信息 1server.use(session(&#123;&#125;, server)) 使用 1ctx.session ejs 后端渲染安装 ejs 1const ejs = require('koa-ejs') 将模板文件创建在 template 目录下 名称为 template.html 使用 12345678910111213141516171819202122const koa = require('koa')const path = require('path')const ejs = require('koa-ejs')let server = new koa()server.listen(8888)ejs(server, &#123; //模板文件目录 root: path.resolve('template'), layout: false, //模板文件 扩展名 viewExt: 'html'&#125;)server.use(async ctx=&gt;&#123; //渲染文件 template，不用带扩展名，&#123;渲染数据&#125; await ctx.render('template', &#123; name: 'zhao', age: 20 &#125;)&#125;) MySQL引入中间件 1let db = require('mysql-pro') 优点: 事务管理（Transaction） 防止 SQL 注入 使用 1234567891011121314151617181920212223242526272829303132const koa = require('koa')const router = require('koa-router')const Mysql = require('mysql-pro')const db = new Mysql(&#123; mysql: &#123; host: 'localhost', port: '3306', user: 'root', password: '123456', database: 'test' &#125;&#125;)const server = new koa()server.listen(8888)let r1= router()server.use(r1.routes())r1.get('/user', async ctx=&gt; &#123; let id = ctx.query.id; // 开启事务 await db.startTransaction() //防止sql 注入 let data = await db.executeTransaction('SELECT * FROM user WHERE ID=?;',[id]) ctx.response.body = data //关闭事务 await db.stopTransaction()&#125;) 注意: 开启事务，对应着要关闭事务 为了防止 sql 注入，mysql-pro 要求将 需要的参数用 ? 代替，然后将参数用数组的形式放到语句后面。 事务（transaction）性质： A 原子性 事务内的事情，要么都发生，要么都不发生 C 持久性 只要事务提交，他的作用就是永久的 I 隔离性 各事务之间独立，不干扰 D 一致性 事务前后的状态一致]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[express]]></title>
    <url>%2F2019%2F03%2F30%2Fexpress%2F</url>
    <content type="text"><![CDATA[express基本使用步骤123456789101112const experss = require('experss')let server = experss()server.listen(8888)server.get('/a', (req, res)=&gt;&#123; res.send('sadf') &#125;)//使用中间件 开放 www下面的静态资源server.use(experss.static('www/')) 中间件 插件 –补充框架的功能 类似于流水线 中间件的next()方法（流水线）12345678910111213141516171819const experss = require('experss')let server = experss()server.listen(8888)server.get('/a', (req, res, next)=&gt;&#123; res.send('sadf') console.log('sssssss'); next()&#125;)server.get('/a', (req, res, next) =&gt; &#123; console.log('dddddddddddd'); next()&#125;)server.use(experss.static('www/')) 添加了 next(), 程序会执行向下执行 路径path 模块中有 resolve() 方法 可以获取文件绝对路径 path.basename作用： 获取路径中的文件名 12345path.basename('c:a/b/c/d/index.js') 'index.js'path.basename('c:a/b/c/index.js', '.js') 'index' path.dirname作用： 获取文件目录 12path.dirname('c:a/b/c/index') c:a/b/c' path.extname作用： 获取文件扩展名 12path.extname('c:/a/b/c/index.js') '.js' path.isAbsolute作用: 判断是否为绝对路径 12345678path.isAbsolute('a/b/c/index') falsepath.isAbsolute('/a/b/c/index') truepath.isAbsolute('./a/b/c/index') false path.parse作用： 获取路径的所有信息 12345678path.parse('c:/a/b/c/index.html')//&#123; root: 'c:/', dir: 'c:/a/b/c', base: 'index.html', ext: '.html', name: 'index' &#125; path.join()作用： 追加路径 123path.join('c:/a/','b')//'c:\\a\\b' 数据解析获取 get 数据req.query属性可以获取（json方式） 获取 post 数据使用第三方模块 body-parser 安装 1npm i pody-parser -D 引入 1const bodyPaser = require('body-parser') 配置中间件 1server.use(bodyParser.urlencoded(&#123;extended: false&#125;)) 获取数据 12server.post('/a', (req, res)=&gt;&#123; console.log(req.body); 路由创建路由的基本步骤 创建路由 1let userRouter = express.Router() 设置父级路由 12// 所有和 /user 有关的路由都由 userRouter 处理server.use('/user', userRouter) 设置子路由 12345678//处理 /user/ 的路由userRouter.get('/', (req, res) =&gt; &#123; res.send('首页')&#125;)//处理 /user/a 的路由userRouter.get('/a', (req, res) =&gt; &#123; res.send('aaaaaaa')&#125;) 路由模块化将子路由封装到一个模块 user.js 中， 并用 module.exports 导出 1234567891011const express = require('express')let router = express.Router()router.get('/', (req, res) =&gt; &#123; res.send('首页')&#125;)router.get('/a', (req, res) =&gt; &#123; res.send('aaaaaaa')&#125;)module.exports = router 修改父级路由，只需要请求该模块即可 1server.use('/user',require('./routes/user.js')) 其他状态码返回1res.sendStatus(404) //返回404 状态码 相当于原生的 123res.writeHeader(404)res.write('Not Fond')res.end() 重定向1res.redirect('http://www.baidu.com') 相当于原生的 123res.setHeader('location','http://www.baidu.com')res.writhHeader(301)res.end() 开放静态资源开放www目录下面的静态资源可以被用户访问 1server.use(experss.static('www/'))]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[canvas]]></title>
    <url>%2F2019%2F03%2F29%2Fcanvas%2F</url>
    <content type="text"><![CDATA[canvas 画布 标签必须在行内设置 width 和 height，不能在其他地方添加。 1&lt;canvas width="300" height="100"&gt;&lt;/canvas&gt; 操作画布基础步骤 创建画布对象，并设置宽高 1&lt;canvas width="300" height="100" id="c1"&gt;&lt;/canvas&gt; 获取画布对象 1let oC = document.getElementById('c1') 获取上下文 1let gd = oC.getContext('2d') 设置起始坐标 1gd.moveTo(100,100) 设置移动终点坐标 1gd.lineTo(200,200) 设置线条颜色 1gd.strokeStyle = 'red' 绘画 1gd.stroke() 重新开始绘画路径（防止干扰上一条路径） 1gd.beginPath() 画布常用方法 moveTo(x, y) ： 设置起始坐标 lineTo(x, y)：设置终点坐标 stroke()：绘画（描边） fill()：填充 beginPath()：开始新路径，清除之前路径设置 closePath()：闭合当前路径 常见图像矩形 rect(x坐标，y坐标，宽，高) , 路径操作，需要描边才能生成图形 1234gd.beginPath()gd.rect(300,300,100,200)gd.strokeStyle = 'pink'gd.stroke() stokeRect(x坐标，y坐标，宽，高) , 图形操作，直接生成图形 123gd.beginPath()gd.strokeStyle = 'pink'gd.strokeRect(300,300,100,200) fillRect(x坐标，y坐标，宽，高) , 图形操作，直接生成图形 123gd.beginPath()gd.fillStyle = 'pink'gd.fillRect(300,300,100,200) clearRect(x坐标，y坐标，宽，高), 清除图形 弧（圆）arc(圆心的x 坐标， 圆心的y坐标，半径，起始角度，终止角度，旋转反向） 角度时以弧度为单位（Math.PI = 180度） 起点在圆心右侧一个半径的位置 最后一个参数默认为 false 默认为 逆时针 路径操作，需要描边才能显示 123456let oC = document.querySelector('canvas')let gb = oC.getContext('2d') gb.beginPath()gb.arc(300, 300, 200,0, Math.PI * 2)gb.stroke() canvas 的 transformrotate rotate 操作 必须放在 图形绘制完成之前 rotate 操作其实是整个画布都在旋转，并不是绘制的图形旋转 translate scale]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[缓存和多进程]]></title>
    <url>%2F2019%2F03%2F24%2F%E7%BC%93%E5%AD%98%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[缓存和多进程缓存http缓存消息第一次请求，无缓存，服务端（S) 向 客户端 （C) 发送的http响应头部有 last-modified: Tue, 26 Feb 2019 10:51:39 GMT 告诉客户端 请求资源最后的修改日期 第二次请求，有缓存C —&gt; S If-Modified-Since: Tue, 26 Feb 2019 10:51:39 GMT S—-&gt; C 304状态码 node 实现缓存123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const http = require('http')const fs = require('fs')const url = require('url')http.createServer((req, res) =&gt; &#123; let &#123;pathname&#125; = url.parse(req.url) // console.log(pathname); // 获取文件修改时间 fs.stat(`www$&#123;pathname&#125;`, (err, stat) =&gt; &#123; if (err) &#123; res.writeHead(404) res.write('Not Fond') res.end() &#125; else &#123; // 如果请求头中有 If-Modified-Since 说明不是第一次获取数据，并且在第一次获取的时候，服务器传给浏览器 Last-Modif 响应头 if (req.headers['if-modified-since']) &#123; let oDate = new Date(req.headers['if-modified-since']) let time_client = Math.floor(oDate.getTime() / 1000) let time_server = Math.floor(stat.mtime.getTime() / 1000) // 比较那个版本更新 if (time_client &lt; time_server) &#123; sendFileToClient() &#125; else &#123; res.writeHead(304) res.write('Not Modified') res.end() &#125; &#125;else&#123; sendFileToClient() &#125; function sendFileToClient () &#123; let rs = fs.createReadStream(`www$&#123;pathname&#125;`) /* 添加 http 响应头，并将文件的修改世界转换成 格林威治时间 */ res.setHeader('Last-Modified', stat.mtime.toGMTString()) rs.pipe(res) rs.on('error', err =&gt; &#123; res.writeHead(404) res.write('Not Fond') res.end() &#125;) &#125; &#125; &#125;)&#125;).listen(8888, () =&gt; &#123; console.log('running...'); &#125;) 多进程多进程和多线程 多线程 性能高、复杂、编程复杂 多进程 性能略低、简单 nodeJs 默认为 单进程、单线程 但是 nodejs可以设置成多进程 多进程的优点：性能高，安全 进程 普通程序不能创建进程，只有系统进程才可以创建进程 进程是分裂出来的，但是只有主进程可以分裂能力 分裂出来的进程执行同一套代码 父子进程之间可以共享’句柄‘ node 的多进程12345678910111213141516171819202122232425262728const http = require('http')// 引入 cluster 多进程模块const cluster = require('cluster')// cpu 为几核 几个进程可以同时工作，所以需要引入系统模块const os = require('os')// 获取当前进程的信息模块const process = require('process')// 判断当前是否为主进程if (cluster.isMaster) &#123; for (let i = 0; i &lt; os.cpus().length; i++) &#123; cluster.fork() &#125; console.log('主进程');&#125; else &#123; let server = http.createServer((req, res) =&gt; &#123; console.log(process.pid); res.write('aaaa'); res.end(); &#125;); server.listen(8888); console.log('服务器开好了，在8888上'); &#125;]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[流与压缩]]></title>
    <url>%2F2019%2F03%2F23%2F%E6%B5%81%E4%B8%8E%E5%8E%8B%E7%BC%A9%2F</url>
    <content type="text"><![CDATA[流作用：边读取，边转发，减少内存存储压力 分类 流方式 常见的流 读取流 req, fs.createReadStream 写入流 res, fs.createWriteStream 读写流 压缩，加密 流操作的基本过程12345678const fs = require('fs')//建立一个读取流，读取 1.txt 文件let rs = createReadStream('1.text')//建立写入流写的文件 命名为 2.txtlet ws = createWriteStream('2.txt')//对接rs.pipe（ws) 这样就可以将 1.txt 文件 一边读取，一边写入到 2.txt 文件中 注意：流是有方向的，只能从读取流入写入 流操作再node中的应用文件读取和写入的应用123456789101112131415const http = require('http')const fs = require('fs')let server = http.createServer((req, res) =&gt; &#123; let rs = fs.createReadStream(`www$&#123;req.url&#125;`) rs.pipe(res) rs.on('error', err =&gt; &#123; res.writeHead(404) res.write('Not Fond') res.end() &#125;)&#125;)server.listen(8888) 双向流– 压缩文件1234567891011121314151617//引入压缩模块const zlib = require('zlib')const fs = require('fs')let rs = fs.createReadStream('jquery.js')let ws = fs.createWriteStream('jquery.js.gz')// 创建压缩对象let gz = zlib.createGzip()// 双向流绑定rs.pipe(gz).pipe(ws)ws.on('finish', () =&gt; &#123; console.log('成功'); &#125;) 综合–将文件用node 压缩然后返回给浏览器12345678910111213141516171819const http = require('http')const fs = require('fs')const zlib = require('zlib')let server = http.createServer((req, res) =&gt; &#123; let rs = fs.createReadStream(`www$&#123;req.url&#125;`) res.setHeader('content-encoding', 'gzip') let gz = zlib.createGzip() rs.pipe(gz).pipe(res) rs.on('error', () =&gt; &#123; res.writeHead(404) res.write('Not Fond') res.end() &#125;)&#125;)server.listen(8888) 注意：因为返回给浏览器的是压缩文件，所以应该设置响应头为 1res.setHeader(&apos;content-encoding&apos;, &apos;gzip&apos;) 否则浏览器不会解析压缩文件，而回将其下载]]></content>
      <categories>
        <category>node</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[继承]]></title>
    <url>%2F2019%2F03%2F23%2F%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[概述继承： 继承是类(class) 与(class) 之间的关系（父级别和子级别的关系），js 中没有类，但可以通过构造函数模拟类，然后通过原型来实现继承。 继承也是为了数据共享。 原型的作用： 共享数据，节省内存空间 实现继承 原型继承通过改变原型链实现继承 缺陷： 在原型链改变的时候会进行赋值 12345678910111213141516171819202122232425262728function Animal(name, weight) &#123; this.name = name this.weight = weight &#125; Animal.prototype.eat = function() &#123; console.log('吃'); &#125; function Dog(color) &#123; this.color = color &#125; Dog.prototype = new Animal('哮天犬', '50kg') Dog.prototype.bite = function () &#123; console.log(`$&#123;this.name&#125;咬人`); &#125; function ErHa(gender) &#123; this.gender = gender; &#125; ErHa.prototype = new Dog('黑白色') ErHa.prototype.play = function () &#123; console.log(`$&#123;this.name&#125;体重为$&#123;this.weight&#125;性别为：$&#123;this.gender&#125;颜色为 $&#123;this.color&#125;`); &#125; var erHa = new ErHa('母') erHa.eat() erHa.bite() erHa.play() 借用构造函数实现继承方法：通过构造函数名.call(当前对象，属性1，属性2) 解决了属性的继承，并且只不重复 缺陷： 父级别的累中的方法不能继承 如: 12345678910111213141516171819202122232425262728function Person(name, age, gender, weight) &#123; this.name = name; this.age = age this.gender = gender this.weight = weight &#125; Person.prototype.sayHi = function () &#123; console.log('hello'); &#125; function Student(name, age, gender, weight, score) &#123; // 借用构造函数 Person.call(this,name, age, gender, weight) this.score = score &#125; var stu1 = new Student('小明', 10, '男', '30kg', 100) console.log(stu1.name, stu1.age, stu1.gender, stu1.weight,stu1.score); //小明 10 男 30kg 100 stu1.sayHi() //报错 var stu2 = new Student('小红', 12, '女', '30kg', 80) console.log(stu2.name, stu2.age, stu2.gender, stu2.weight,stu2.score); //小红 12 女 30kg 80 var stu3 = new Student('小刚', 10, '男', '20kg', 110) console.log(stu3.name, stu3.age, stu3.gender, stu3.weight,stu3.score); //小刚 10 男 20kg 110 上面的 stu1 、stu2、stu3 都继承了 Persong 的属性，但没有继承方法 组合继承组合继承 = 原型继承 + 借用构造函数继承 通过原型继承方法； 通过借用构造函数继承属性 1234567891011121314151617181920212223242526272829function Person(name, age, gender) &#123; this.name = name this.age = age this.gender = gender &#125; Person.prototype.sayHi = function () &#123; console.log('hello'); &#125; function Student(name, age, gender, score) &#123; //借用构造函数 Person.call(this, name, age, gender) this.score = score &#125; // 改变原型链指向 Student.prototype = new Person()//不用传参 Student.prototype.eat = function () &#123; console.log('吃吃'); &#125; var stu = new Student('小明', 18, '男', 100) console.log(stu.name, stu.age, stu.gender, stu.score);//小明 18 男 100 stu.eat() //吃吃 stu.sayHi()//hellovar stu2 = new Student('小红', 12, '女', 100)console.log(stu2.name, stu2.age, stu2.gender, stu2.score);//小红 12 女 100stu2.eat() //吃吃stu2.sayHi()//hello 拷贝继承把一个对象的属性或者方法直接拷贝到另一个对象中 拷贝一个对象 12345678910111213var obj1 = &#123; name: '小明', age: 13, sleep: function () &#123; console.log('睡觉'); &#125; &#125; // var obj2 = obj1;(只拷贝了对象的地址，没有拷贝内容) //手动拷贝 var obj2 = &#123;&#125; for(var key in obj1) &#123; obj2[key] = obj1[key] &#125; 用拷贝实现继承 1234567891011function Person() &#123;&#125; Person.prototype.age = 10; Person.prototype.gender = '男' Person.prototype.play = function () &#123; console.log('玩'); &#125; var obj = &#123;&#125; for(var key in Person.prototype) &#123; obj[key] = Person.prototype[key] &#125; Person 的构造函数中有的 prototype 本来就是一个对象，age、gender、play 都是该对象的属性或方法]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>原型，继承</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原型及原型链]]></title>
    <url>%2F2019%2F03%2F23%2F%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE%2F</url>
    <content type="text"><![CDATA[原型及原型链new 的作用 创建一个新对象； 将构造函数的作用域赋给新对象（因此this就指向了这个对象）； 执行构造函数中的代码（为这个新对象添加属性）； 返回新对象。 选自： 《JavaScript高级程序设计（第三版）》P145 原型的作用原型对象和原型原型对象 每一个构造函数都有原型对象 prototype 属性 原型 每一个实例对象都有一个原型 __proto__ 属性 共享内存，节省内存空间案例一 没有使用原型 1234567891011121314//构造函数function Person(name, age) &#123; this.name = name this.age = age this.sayHi = function() &#123; console.log(`我叫$&#123;this.name&#125;, 我的年龄是$&#123;this.age&#125;`); &#125; &#125; //实例对象 var xiaoming = new Person('小明', 20) var xiaohong = new Person('小红', 15) xiaoming.sayHi() //我叫小明, 我的年龄是20 xiaohong.sayHi() //我叫小红, 我的年龄是15 console.log(xiaoming.sayHi === xiaohong.sayHi) //false 当执行 最后一句时结果为 false 说明所执行的函数不是同一个函数，并没有数据共享 原因：当 new 的时候 会把这个 sayHi 方法添加到实例对象申请的空间中，所以有多少实例对象就有多少 sayHi 方法 案例二 使用原型 1234567891011121314function Person(name, age) &#123; this.name = name this.age = age &#125; Person.prototype.sayHi = function () &#123; console.log(`我叫$&#123;this.name&#125;, 我的年龄是$&#123;this.age&#125;`); &#125; var xiaoming = new Person('小明', 20) var xiaohong = new Person('小红', 15) xiaoming.sayHi() //我叫小明, 我的年龄是20 xiaohong.sayHi() //我叫小红, 我的年龄是15 console.log(xiaoming.sayHi === xiaohong.sayHi);//true console.log(xiaohong.__proto__ === Person.prototype);//true 此时执行最后一句话时，结果为 true 说明执行的时同一个函数，实现了数据共享 原因： 实例对象的原型 __proto__ 和 构造函数的原型对象 prototype 是相同的（__proto__指向 prototype） 实例对象可以访问构造函数的原型（prototype） 原型链原型链指的是 实例对象 和 原型对象（prototype）之间的关系，这种关系是通过原型（__proto__)联系的 原型链的改变案例 12345678910111213141516171819// 人的构造函数 function Person(age) &#123; this.age = age &#125; // 人的原型对象的方法 Person.prototype.eat = function () &#123; console.log('人的吃方法'); &#125; // 狗的构造函数 function Dog() &#123;&#125; // 狗的原型对象的方法 Dog.prototype.sayHi = function () &#123; console.log('汪汪'); &#125; Dog.prototype = new Person(20) var bigDog = new Dog() bigDog.eat() //人的吃方法 bigDog.sayHi() //报错 分析： 1Dog.prototype = new Person(20) Dog 的原型对象的 替换成 new Person 这个实例对象 上面的代码 使 Dog 的原型对象指向了 new Person（）的原型，同时 又因为 Dog 的实例对象 bigDog 的原型（__proto__)指向的是 Dog 的原型对象（prototype），所以也就跟着改变了其指向，指向了new Pers（）的原型 总结 实例对象的原型__proto__指向的是该对象所在的构造函数的原型对象 构造函数的原型对象（prototype）指向如果改变，实例对象的原型__proto__也会发生改变 原型链的最终指向 实例对象中有__proto__原型 构造函数中有 prototype 原型对象 原型对象 prototype 中应该也有 __proto__ 原型，指向什么地方？ 1234567891011function Person() &#123; &#125; Person.prototype.eat = function () &#123; console.log('人的吃'); &#125; // 实例对象 var per = new Person() console.log(per.__proto__ === Person.prototype); //true console.log(per.__proto__.__proto__ === Person.prototype.__proto__); //true console.log(Person.prototype.__proto__ === Object.prototype); // true console.log(Object.prototype.__proto__); //null 分析 Object 是一个构造函数，有自己的原型对象（prototype） 每一个原型对象都有自己的原型__proto__， Object 的原型对象也不例外 构造函数的原型对象的原型指向 Object 的原型对象（上面的倒数第二句可知） Object 的原型对象的原型为null（上面的倒数第一句可知） 原型指向改变如何添加方法和访问原型对象改变前添加的方法，会在原型改变后失去，所以如果原型对象改变，应该先改变原型对象，再添加方法否则会出现原型链的改变中最后一句报错]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>原型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据通信]]></title>
    <url>%2F2019%2F03%2F20%2F%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[数据通信常见的通信方式 通信方式 特点 表单 最基本，最简单 Ajax 不用全页面刷新，可跨域 jsonp 跨越，不安全 Websocket 高性能（快），双工通信，直接跨越 跨域：请求不同域名或端口或协议的资源 Ajax封装（仿jQuery）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748function Ajax (options) &#123; options = options || &#123;&#125; options.type = options.type || 'get'; options.data = options.data || &#123;&#125; options.dataType = options.dataType || 'text' let xhr = new XMLHttpRequest() //将 data里面以对象形式传入的值 解析成 a=b&amp;b=c 形式 var arr = [] for (const name in options.data) &#123; var str = `$&#123;encodeURIComponent(name)&#125;=$&#123;encodeURIComponent(options.data[name])&#125;` arr.push(str) &#125; let strData = arr.join('&amp;') if (options.type == 'post') &#123; xhr.open('POST',options.url, true) xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded'); xhr.send(strData) &#125;else &#123; xhr.open('GET', options.url + '?' + strData ,true) xhr.send() &#125; xhr.onreadystatechange = function () &#123; if (xhr.readyState == 4) &#123; if (xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300 || xhr.status == 304) &#123; let data = xhr.responseText switch (options.dataType) &#123; case 'json': if (window.JSON &amp;&amp; JSON.parse) &#123; data = JSON.parse(data) &#125;else&#123; data = eval('('+data+')') &#125; break; case 'xml': data = xhr.responseXML &#125; options.success &amp;&amp; options.success(data) &#125; &#125;else&#123; options.error &amp;&amp; options.error() &#125; &#125;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理]]></title>
    <url>%2F2019%2F03%2F12%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[数据的表示原码、反码、补码、移码 数字 1 数字 -1 1 - 1 原码 0000 0001 1000 0001 1000 0010 反码 0000 0001 1111 1110 1111 1111 补码 0000 0001 1111 1111 0000 0000 移码 1000 0001 0111 1111 1000 0000 总结： 正数的 原码、反码、补码都是其二进制数 负数的 反码是除符号位，其他的都按位取反。 负数的补码是给他的反码 +1。 移码是补码的符号位取反。 表示范围 范围 原码 -（2^n-1^ - 1) ~ 2^n-1^ - 1 反码 -（2^n-1^ - 1) ~ 2^n-1^ - 1 补码 - 2^n-1^ ~ 2^n-1^ - 1 因为 0 的补码的正负都相同，所以范围比原码和反码大 1 浮点数表示N = M * R^e^ 位数：M 基数：R 指数：e CPU 的结构CPU由 运算器和 控制器组成 运算器 算术逻辑单元ALU 累加寄存器 AC 数据缓冲寄存器 DR 状态条件寄存器 PSW 控制器 程序计数器PC 指令寄存器 IR 指令译码器 时序部件 计算机体系结构的分类 – Flynn 体系结构类型 结构 关键特性 代表 单指令流单数据流SISD 控制部分：一个 处理器：一个 主存储模块： 一个 但处理系统 单指令流多数据流SIMD 控制部分：一个 处理器：多个 主存储模块： 多个 各种处理器以异步形式执行同一天指令 并列处理机，阵列处理机，超级向量处理机 多指令流单数据流MISD 控制部分：多个 处理器：一个 主存储模块： 多个 不存在 目前不存在 多指令流多数据流MIMD 控制部分：多个 处理器：多个 主存储模块： 多个 能够实现作业、任务、指令等各级全面并行 多处理机系统，多计算机 CISC 与 RISC 指令系统类型 指令 寻址方式 实现方式 其他 CISC（复杂） 数量多，使用频率差别大可变长格式 支持多种 微程序控制技术（微码） 研制周期长 RISC（精简） 数量少，使用频率接近，定长格式，大部分为单调指令，操作寄存器，只有Load/Store操作内存 支持方式少 增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线 优化编译，有效支持高级语言 流水线 流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术,各种部件同时处理是针对不同指令而言的,他们可同时为多条指令的不同部分进行工作,以提高各部件的利用率和指令的平均执行速度. 流水线的时间计算 流水线的周期为执行时间最长的一段 n条指令执行的理论时间 一条指令执行的时间（每一部分的时间和） + （指令数 - 1）* 流水线周期 n条指令执行的实践时间 流水线周期 * （指令的部分数 + 指令数 - 1） 在实践计算的时候，将第一条指令执行的时间看作周期 * 指令部分数 考试以理论结果优先 例题： 若指令流水线把一条指令分为取址、分析、执行三部分，且三部分的时间分别为：2ns、2ns、1ns、那么流水线的周期是多少？100条指令全部执行完需要多少时间？ 解答： 周期为 2ns， 理论执行时间 （2 +2 + 1) + (100 - 1) * 2 = 203ns 实践执行时间 （3 + 100 - 1） * 2 = 204ns 流水线的吞吐率计算 流水线的吞吐率（TP) 是指单位时间内流水线所完成的任务数量或输出的结果数量。 TP = 指令条数 / 流水线执行时间 流水线最大吞吐率为 ：1 / 周期 流水线的加速比定义： 完成同一任务，不使用流水线的时间与使用流水线的时间之比 s = 不使用流水线的时间 / 使用流水线的时间 存储层次化的存储结构从外存、内存、cache、寄存器，速度越来越高，容量越来越小。 CacheCache的功能：提高 CPU 数据输入输出的速率，突破 CPU 与存储系统间数据传送带宽限制。 Cache 是计算机存储系统中访问最快的层次 使用 Cache 改善系统性能的依据是程序的局部性原理 使用 Cache + 主存储器的系统的平均周期t = h * t1 + (1-h) * t2 h ：CPU对 Cache 的访问命中率， t1：Cache 的周期时间 t2：主存储器的周期时间 局部性原理 时间局部性 对刚刚访问的程序再进行访问，如循环体程序，这时就将这些都放入 Cache 中 空间局部性 对相邻的地址依次访问，如变量数组，也会将其放入 Cache 中 工作集理论：工作集是进程运行时被频繁访问的页码集合 主存分类 只读存储器（ROM） 断电存储内容不消失 随机存储器（RAM） 断电存储内容消失 编址例题： 内存地址从AC000H到C7FFFH,共有（）KB个地址单元，如果该内存地址按字（16bit）编址，由28块芯片构成。已知构成此内存的芯片每片有16KB个存储单元，则该芯片每个存储单元存储（）位 解答： 将内存大地址减去小地址再加1就是内存地址，即C7FFFH-AC000H+1=1C000H(给7加的是16，因为是16进制)， 十六进制（1C000）16=2^16+2^15+2^14=64K+32K+16K=112K. 注意此处按字编址。需要构成的内存为112K16b,使用28块芯片构成该内存，则每个芯片的容量应为4K16B。已知构成此内存的芯片每片有16K个存储单元，因此该芯片每个存储单元存储4位二进制 磁盘结构与参数存取时间 = 寻道时间 + 等待时间 寻道时间： 磁头移动到磁道所需要的时间 等待时间： 等待要读写的扇区转动到磁头下面的时间 总线 内部总线（芯片级别） 系统总线（线路板级别） 数据总线 地址总线 控制总线 外部总线（外设级别） 可靠性分析串联系统和并联系统串联可靠度：R = R1 R2 R3 … Rn 失效度： S = S1 + S2 + S3 + … + Sn 并联可靠度： R = 1 - (1 - R1) (1 - R2) … * (1 - Rn) 失效度：S = 1 - R 差错控制循环校验码 CRC 可以检错，不能纠错 重点 海明码 既可以检错，又可以纠错 重点]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端轮播图]]></title>
    <url>%2F2019%2F03%2F08%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BD%AE%E6%92%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[要求 自动轮播且无缝 点要随着图片的轮播而同步改变 图片的轮播可以随手指的滑动而改变 手指滑动距离小于屏幕的 1/3 吸附回去 手指滑动距离大于屏幕的 1/3 切换下一张或上一张图片 html注意： 第一张图片之前重复最后一张，最后一种之后重复第一张 123456789101112131415161718192021222324&lt;div class="jd_banner"&gt; &lt;ul class="clearFix"&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l8.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l1.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l2.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l3.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l4.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l5.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l6.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l7.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l8.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l1.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li class="now"&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; JavaScript123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114let banner = function () &#123; /* 获取元素 */ let banner = document.querySelector('.jd_banner') let width = banner.offsetWidth let imageBox = banner.querySelector('ul:first-child') let pointBox = banner.querySelector('ul:last-child') let points = pointBox.querySelectorAll('li') let addTransition = function () &#123; imageBox.style.transition = 'all 0.2s' imageBox.style.webkitTransition = 'all 0.2s' &#125; let removeTransition = function () &#123; imageBox.style.transition = 'none' imageBox.style.webkitTransition = 'none' &#125; let setTranslateX = function (translateX) &#123; imageBox.style.transform = 'translateX(' + translateX + 'px)' imageBox.style.webkitTransform = 'translateX(' + translateX + 'px)' &#125; let index = 1 let timer = setInterval(()=&gt;&#123; index++ addTransition() setTranslateX(-index * width) &#125;, 1000); /* 判断是否要移动到第一张 */ imageBox.addEventListener('transitionend', ()=&gt;&#123; if (index &gt;= 9) &#123; index = 1 /* 清除过渡 */ removeTransition() /* 移动 */ setTranslateX(-index * width) &#125; else if (index &lt;= 0) &#123; index = 8; removeTransition() setTranslateX(-index * width) &#125; setPoint() &#125;) /* 焦点移动方法 */ let setPoint = function () &#123; // 伪数组转换成真数组 let arr = Array.from(points) arr.forEach((item)=&gt;&#123; item.classList.remove('now') &#125;) points[index - 1].classList.add('now') &#125; /* 手指触摸移动事件 ---》元素随手中移动距离的改变而改变 */ let startX = 0; let distanceX = 0 let isMove = false imageBox.addEventListener('touchstart', (e)=&gt;&#123; // 清除定时器 clearInterval(timer) // 记录触摸点的 X 坐标 startX = e.touches[0].clientX; &#125;) imageBox.addEventListener('touchmove', (e)=&gt;&#123; // 记录滑动中的 X 坐标 let moveX = e.touches[0].clientX // 计算滑动距离 distanceX = moveX - startX; // 元素移动的距离 = 当前的位置 + 滑动的距离 let translateX = -index * width + distanceX // 元素在跟随手指移动是不需要原来的动画过渡 removeTransition() setTranslateX(translateX) isMove = true &#125;) imageBox.addEventListener('touchend', (e) =&gt; &#123; /* 用滑动的距离是否小于 1/3 来判断是否切换图片 */ if (isMove) &#123; if (Math.abs(distanceX) &lt; width / 3) &#123; addTransition() setTranslateX(-index * width) &#125; else &#123; // 右滑动，切换上一张 if (distanceX &gt; 0) &#123; index-- &#125; else &#123; index++ &#125; addTransition() setTranslateX(-index * width) &#125; &#125; /* 重置参数 */ startX = 0 distanceX = 0 isMove = false /* 开启定时器 */ clearInterval(timer) timer = setInterval(() =&gt; &#123; index++ addTransition() setTranslateX(-index * width) &#125;, 1000); &#125;)&#125;]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>轮播图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap 常见组件]]></title>
    <url>%2F2019%2F03%2F06%2Fbootstrap%E5%B8%B8%E8%A7%81%E7%BB%84%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[栅格系统.container 容器响应式布局容器 用法： 123&lt;div class= 'container'&gt; 响应式内容&lt;/div&gt; .container 容器默认有 15px 的左右内间距 栅格系统栅格系统就是行列布局 行： row.row 可以填充 .container 的 15px 的内边距，因为设置了 margin-left，margin-right = 15px 用来填充 .container 容器的内边距 列 : col使用样式 1col-参数1-参数2 参数1： 参数值 作用范围 lg 大屏以上设备生效 md 中屏以上设备生效 sm 小屏以上设备生效 xs 超小屏以上设备生效 参数2： 每一行的等分数，默认 12 等分，是几就占几份（取值 1–12） 列子 12345678910111213141516171819202122232425&lt;style&gt; .container&#123; height: 100px; background: hotpink; &#125; .row&#123; height: 50px; background: pink; &#125; .row &gt; div&#123; height: 25px; border: 1px solid #000; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-3"&gt;&lt;/div&gt; &lt;div class="col-md-4"&gt;&lt;/div&gt; &lt;div class="col-md-5"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 列偏移col-参数1-offset-参数2 栅格向右偏移 多少份（ 参数和上面相同） 123&lt;div class = 'col-xm-6 col-xm-offset-1'&gt; &lt;/div&gt; 列排序 col-参数1-push-参数2 向右移动 col-参数1-pull-参数2 向左移动 导航条（navBar) 组件因为导航条中用到了 Collapse 组件 所以先要了解 collapsed 组件 Collapse 组件Collapse 组件作用时 控制其他元素的展开或隐藏 data-toggle=”collapse” 组件类型申明 为 collapse （坍塌） data-target=”.box” 控制目标为 .box的选择器的元素 在 a 标签中 data-target 可以 直接用 href 替换 1234567891011&lt;button data-toggle="collapse" data-target=".box" aria-expander='false'&gt;切换&lt;/button&gt; &lt;a href=".box" data-toggle="collapse"&gt;切换&lt;/a&gt; &lt;div class="box"&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; &lt;/div&gt; navBar组件分析 aria-expanded=”false” 用于屏幕阅读器使用，（提示有一个没有展开的区域） class=”sr-only” 仅用于屏幕阅读器阅读，里面的内不会显示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;nav class="navbar navbar-default"&gt; &lt;!-- 采用流式布局 --&gt; &lt;div class="container-fluid"&gt; &lt;div class="navbar-header"&gt; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt; &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt; &lt;!-- 以下为三个字体图标，共同组成了一个显示按钮 --&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;!-- 这是商标区域--&gt; &lt;a class="navbar-brand" href="#"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;!--以下的 链接、表单、其他内容被上面的按钮切换 --&gt; &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Link &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"&gt;Dropdown &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;One more separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class="navbar-form navbar-left"&gt; &lt;div class="form-group"&gt; &lt;input type="text" class="form-control" placeholder="Search"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"&gt;Dropdown &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt; 轮播bootstrap 轮播图分析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- carousel 轮播图的模块 slide是否加上滑动效果 --&gt;&lt;!-- data-ride="carousel" 初始化轮播图属性--&gt;&lt;div id="carousel-example-generic" class="carousel slide" data-ride="carousel"&gt; &lt;!-- 点盒子 --&gt; &lt;ol class="carousel-indicators"&gt; &lt;!-- data-target="#carousel-example-generic" 控制目标轮播图 data-slide-to="0" 控制的是轮播图当中的第几张 （索引） class="active" 当前选中的点 --&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- 图片盒子 --&gt; &lt;!-- role="listbox" 提供给屏幕阅读器使用 --&gt; &lt;div class="carousel-inner"&gt; &lt;!--需要轮播的容器--&gt; &lt;div class="item active"&gt; &lt;!--图片--&gt; &lt;img src="..." alt="..."&gt; &lt;!--说明--&gt; &lt;div class="carousel-caption"&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img src="..." alt="..."&gt; &lt;div class="carousel-caption"&gt; ... &lt;/div&gt; &lt;/div&gt; ... &lt;/div&gt; &lt;!-- 上一张下一张按钮 --&gt; &lt;!-- data-slide="prev" data-slide="next" href="#carousel-example-generic" 控制目标轮播图 --&gt; &lt;a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"&gt; &lt;span class="glyphicon glyphicon-chevron-left"&gt;&lt;/span&gt; &lt;/a&gt; &lt;a class="right carousel-control" href="#carousel-example-generic" data-slide="next"&gt; &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 缺点：在移动端图片显示太过于 扁长 ，显示有缺陷，图片大小修改会造成显示问题 修改pc端显示效果将 img 标签的图片修改成 background 来显示，这样可以控制图片大小 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 &lt;style&gt; .pcimg_box&#123; height: 400px; width: 100%; display: block; background-size: cover; background-position: center; background-repeat: no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="carousel-example-generic" class="carousel slide" data-ride="carousel"&gt; &lt;!-- Indicators --&gt; &lt;!-- 指示器（焦点） --&gt; &lt;ol class="carousel-indicators"&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="3"&gt;&lt;/li&gt; &lt;/ol&gt; &lt;div class="carousel-inner" role="listbox"&gt; &lt;div class="item active"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_01_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_02_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_03_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_04_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev"&gt; &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt; &lt;span class="sr-only"&gt;Previous&lt;/span&gt; &lt;/a&gt; &lt;a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next"&gt; &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt; &lt;span class="sr-only"&gt;Next&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 需要将背景图片写在行内样式中，方便后端渲染 标签页12345678910111213141516&lt;!-- 页签 --&gt; &lt;ul class="nav nav-tabs" role="tablist"&gt; &lt;li role="presentation" class="active"&gt;&lt;a href="#home" aria-controls="home" role="tab" data-toggle="tab"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#profile" aria-controls="profile" role="tab" data-toggle="tab"&gt;Profile&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#messages" aria-controls="messages" role="tab" data-toggle="tab"&gt;Messages&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#settings" aria-controls="settings" role="tab" data-toggle="tab"&gt;Settings&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- Tab panes --&gt; &lt;div class="tab-content"&gt; &lt;div role="tabpanel" class="tab-pane active" id="home"&gt;1&lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="profile"&gt;2&lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="messages"&gt;3&lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="settings"&gt;4&lt;/div&gt; &lt;/div&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据的获取和转换]]></title>
    <url>%2F2019%2F03%2F05%2F%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数据的获取和转换获取页面 url 通过问号传参传递的样式为： 1http://localhost:3000/m/searchList.html?key=1&amp;name=10 获取： 1234567891011121314var getParamsByUrl = function () &#123; var params = &#123;&#125; var search = location.search //"?key=1&amp;name=10" if (search) &#123; search = search.replace('?', '') //"key=1&amp;name=10" var arr = search.split('&amp;') //["key=1", "name=10"] arr.forEach(function (item, i) &#123; var itemArr = item.split('=') //["key", "1"] ["name", "10"] params[itemArr[0]] = itemArr[1] //&#123;key: "1", name: "10"&#125; &#125;) &#125; return params; &#125;var params = getParamsByUrl() node 获取 get 和 post 参数获取 get 参数直接从url 中获取 使用 req.rul 1234let server = http.createServer((req, res) =&gt; &#123; console.log(req.url);// /data.js?username=se&amp;pwd=d res.end()&#125;) 以对象形式获取 引入 url 核心模块 1let url = require('rul') 给 url使用parse 方法解析 req.url 1234let server = http.createServer((req, res) =&gt; &#123; let obj = url.parse(req.url) console.log(obj); res.end() 解析结果为 12345678910111213Url &#123; protocol: null, slashes: null, auth: null, host: null, port: null, hostname: null, hash: null, search: '?username=se&amp;pwd=f', query: 'username=se&amp;pwd=f', pathname: '/data.js', path: '/data.js?username=se&amp;pwd=f', href: '/data.js?username=se&amp;pwd=f' &#125; 此时的 query 属性还是 字符串形式，如果给 parse 方法传入第二个参数：true，则结果为 12345678910111213Url &#123; protocol: null, slashes: null, auth: null, host: null, port: null, hostname: null, hash: null, search: '?username=se&amp;pwd=deee', query: [Object: null prototype] &#123; username: 'se', pwd: 'deee' &#125;, pathname: '/data.js', path: '/data.js?username=se&amp;pwd=deee', href: '/data.js?username=se&amp;pwd=deee' &#125; 这时的 query 属性值为一个对象 获取 post 提交参数post 提交的参数在请求体中，获取请求体是以分组报文的形式获取，所以 post 里面的参数不能直接一次性获取 12345678910111213141516171819const http = require('http')//解析传来的参数为 jsonconst queryString = require('querystring')let server = http.createServer((req, res) =&gt; &#123; let str = '' // 监听每一部分报文到达，将每一次的报文拼装 req.on('data', data=&gt; &#123; str +=data &#125;) //全部传输完毕 req.on('end', ()=&gt; &#123; let post = queryString.parse(str) console.log(str); // username=se&amp;pwd=fgd [Object: null prototype] &#123; username: 'se', pwd: 'fgd' &#125; res.end() &#125;)&#125;)server.listen(8888) 这种方式只可以获取普通编码数据，不能获取二进制文件，因为二进制转换成字符串，再转换回去格式会被破坏 url.parse 和queryString.parse 区别 url.parse()解析的是整个 url 如：/data.js?username=se&amp;pwd=f querystring.parse()解析的是 参数 如：username=se&amp;pwd=f 封装成都可以获取12345678910111213141516171819202122const http = require('http')const url = require('url')const querystring = require('querystring')let server = http.createServer((req, res) =&gt; &#123; // 获取get参数 let &#123;pathname, query&#125; = url.parse(req.url,true) // 获取post 参数 let str ='' req.on('data', data =&gt; &#123; str += data &#125;) req.on('end', () =&gt; &#123; let post = querystring.parse(str) console.log(pathname, query, post); &#125;) res.end() &#125;)server.listen(3000)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>数据，node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模板引擎使用步骤]]></title>
    <url>%2F2019%2F03%2F04%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[模板引擎渲染步骤 获取数据 定义模板 调用模板 返回 html 1. 用 jQuery 发送 get请求，获取数据123456789101112var getFirstCategoryData = function (callback) &#123; $.ajax(&#123; url: '/category/queryTopCategory', type: 'get', data: '', dataType: 'json', success: function (data) &#123; callback &amp;&amp; callback(data) &#125; &#125;);&#125; 后台返回的json数据 12345678&#123;total: 5, rows: Array(5)&#125;rows: Array(5)0: &#123;id: 1, categoryName: "运动馆", isDelete: 1&#125;1: &#123;id: 2, categoryName: "女士馆", isDelete: 1&#125;2: &#123;id: 3, categoryName: "男士馆", isDelete: 1&#125;3: &#123;id: 4, categoryName: "帆布馆", isDelete: 1&#125;4: &#123;id: 5, categoryName: "户外管", isDelete: 1&#125;length: 5 2. 定义模板12345&lt;script type="text/template" id="firstTemplate"&gt; &lt;% for(var i = 0; i &lt; rows.length; i++) &#123; %&gt; &lt;li class="&lt;%= i==0?'now':''%&gt;"&gt;&lt;a href="javascript:;" data-id = "&lt;%=rows[i].id%&gt;"&gt; &lt;%=rows[i].categoryName%&gt;&lt;/a&gt;&lt;/li&gt; &lt;% &#125; %&gt; &lt;/script&gt; 3. 调用模板,进行渲染123getFirstCategoryData(function (data) &#123; $('.cate_left ul').html(template('firstTemplate',data)) &#125;) 4. 渲染结果1234567891011&lt;ul&gt; &lt;li class="now"&gt;&lt;a href="javascript:;" data-id="1"&gt;运动馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="2"&gt;女士馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="3"&gt;男士馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="4"&gt;帆布馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="5"&gt;户外馆&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>ajax</tag>
        <tag>模板引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[less常见语法]]></title>
    <url>%2F2019%2F03%2F03%2Fless%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Less安装less1npm i -g less less 文件编译成 css 文件手动编译 1lessc less文件.less 编译后的css文件.css vscode 自动编译 安装插件 Ease Less 变量申明变量 必须@ 前缀 : 相当于 等号 ，必须; 结束。 必须符合变量的命名规则。 1@mainColor: #ccc; 使用变量123a:hover&#123; color:@mainColor;&#125; 编译结果 123a:hover&#123; color:#ccc;&#125; 注意：less 文件开头 指定编码为 UTF-8 编码 1@charset "UTF-8" Mixin 混入类混入less 语法 12345678910.w50&#123; width: 50%;&#125;.f_left&#123; float: left;&#125;.w50-f_left&#123; .w50(); .f_left();&#125; 编译成 css 12345678910.w50 &#123; width: 50%;&#125;.f_left &#123; float: left;&#125;.w50-f_left &#123; width: 50%; float: left;&#125; 编译的 css 会出现混入前的类 函数混入less 语法 12345678910.w50()&#123; width: 50%;&#125;.f_left()&#123; float: left;&#125;.w50-f_left&#123; .w50(); .f_left()&#125; 编译成 css 。 1234.w50-f_left &#123; width: 50%; float: left;&#125; 编译后的 css 不会出现函数本体。 带参函数混入 定义了参数（没有默认值）调用的时候必须传参。 定义 默认值的方式和定义变量相同。 定义了参数（有默认值），调用的时候可以不用传参。 less 语法 12345678.f(@direction: left) &#123; float:@direction;&#125;.r_left&#123; .f(); .f(right)&#125; 编译的 css 1234.r_left &#123; float: left; float: right;&#125; 嵌套为了使 css 的层次更加清楚 ，less 可以像 html一样进行类似的嵌套写法 less语法 1234567891011121314.top_bar&#123; position: relative; img&#123; display: block; position: absolute; top: 0; left: 0; &#125; &amp;::after&#123; content: ""; display: block; &#125;&#125; 编译后的 css 12345678910.top_bar img &#123; display: block; position: absolute; top: 0; left: 0;&#125;.top_bar::after &#123; content: ""; display: block;&#125; 注意：伪类和伪元素等需要和前面的选择器紧挨使用的 需要用&amp;符号进行连接否则编译后会有空格。 Import（导入）less 可以进行模块化，最后可以用 import 进行导入组合 variables.less 的内容 123456789@mainColor:#ccc;@box: box;a:hover&#123; color: @mainColor;&#125;.@&#123;box&#125; &#123; color:@mainColor;&#125; 在 main.less 中导入 variables.less 1@import "variables"; 编译的 css 文件 123456a:hover &#123; color: #ccc;&#125;.box &#123; color: #ccc;&#125; 运算less 支持数字的简单运算 1234567@num:7;ul&#123; width: 100% * @num; li&#123; width: 100% / @num; &#125;&#125; 编译后的css 123456ul &#123; width: 700%;&#125;ul li &#123; width: 14.28571429%;&#125;]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rem+less适配]]></title>
    <url>%2F2019%2F03%2F03%2Frem-less%E9%80%82%E9%85%8D%2F</url>
    <content type="text"><![CDATA[rem 和 emrem和 em都是相对单位 区别 em 是基于父容器的字体大小 rem 是基于根元素（也就是 html 元素）的字体大小 rem 适配常见的适配方案 名称 缺点 伸缩布局 元素只能宽度适配 流式布局 元素只能宽度适配 响应式布局 元素只能宽度适配 rem 布局 高度和宽度可以同时适配 rem 适配原理页面的尺寸都用 rem 作为单位，针对不同大小的页面只需要更改 基准值 html 的大小即可实现适配 rem 基准值的换算公式当前设备 rem 基准值 = 预设的基准值 / 设计稿的宽度 * 当前设备的宽度 当前的设备： 设备宽度为 640px ，当前的 div 为 640px 100px，预设基准为 100px ，所以div 大小可以转换为 6.4rem 1rem 适配的设备： 设备宽度为 320px ，div 的大小为 6.4rem * 1rem，要想div的尺寸实现适配，需要修改当前的 rem 基准值。 由上面的公式可以算出： 100 / 640 * 320 = 50px。 所以需要修改当前的 基准值为 50px less + rem 实现多种设备的适配根据 rem 的适配原理，可以知道是根据设备的宽度不同来改变 html 元素的字体大小来进行适配。所以如果根据当前设备宽度来改变 html 元素的字体大小呢？ 方式一：媒体查询 同时适配 640px 和 320px 的设备 1234567891011121314151617181920212223242526272829&lt;style&gt; @media (min-width:320px) &#123; html&#123; font-size: 50px; &#125; &#125; @media (min-width: 640px) &#123; html&#123; font-size: 100px; &#125; &#125; body&#123; margin: 0; padding: 0; &#125; header&#123; width: 100%; height: 1rem; line-height: 1rem; font-size: 0.32rem; text-align: center; background-color: green; color: #fff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt;购物车&lt;/header&gt;&lt;/body&gt; 随着设备的增多，媒体查询和基准值的计算会不方便同时也不好维护，所以可以通过 less 进行改进 方式二：less 定义存储变量的less 文件 var.less 123456789101112@charset "UTF-8";//变量// 通过 less 定义数组，存储主流设备的尺寸@adapterDeviceList:750px, 720px, 640px, 540px, 480px, 424px, 414px, 400px, 384px, 375px, 360px, 320px;// 设计稿尺寸@psdWidth: 750px;// 预设基准值@baseFontSize: 100px;// 设备的种类（数组的长度）// 通过内置函数 length来获取@len: length(@adapterDeviceList); 设置一个适配的less 文件 mixins.less 这个less文件通过递归来生成不同的媒体查询 less 没有循环语法 when （此处是函数的执行条件） 内置函数 extract（）用于获取数组里面的元素，传入两个参数，一个是数组名称，另一个时序号 下面的函数是倒着获取数组元素，生成媒体插叙的函数 123456789.adapterMixins(@index) when(@index &gt; 0) &#123; @media (min-width: extract(@adapterDeviceList, @index)) &#123; html&#123; font-size: @baseFontSize / @psdWidth * extract(@adapterDeviceList, @index); &#125; &#125; .adapterMixins(@index - 1);&#125;.adapterMixins(@len); 设置一个less 文件用于引入上面的less文件的 index.less 12@import "var.less";@import "mixins.less"; 编译 index.less 后引入到html文件即可]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>less</tag>
        <tag>rem</tag>
      </tags>
  </entry>
</search>
