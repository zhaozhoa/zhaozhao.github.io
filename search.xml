<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[计算机组成原理]]></title>
    <url>%2F2019%2F03%2F12%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[数据的表示原码、反码、补码、移码 数字 1 数字 -1 1 - 1 原码 0000 0001 1000 0001 1000 0010 反码 0000 0001 1111 1110 1111 1111 补码 0000 0001 1111 1111 0000 0000 移码 1000 0001 0111 1111 1000 0000 总结： 正数的 原码、反码、补码都是其二进制数 负数的 反码是除符号位，其他的都按位取反。 负数的补码是给他的反码 +1。 移码是补码的符号位取反。 表示范围 范围 原码 -（2^n-1^ - 1) ~ 2^n-1^ - 1 反码 -（2^n-1^ - 1) ~ 2^n-1^ - 1 补码 - 2^n-1^ ~ 2^n-1^ - 1 因为 0 的补码的正负都相同，所以范围比原码和反码大 1 浮点数表示N = M * R^e^ 位数：M 基数：R 指数：e CPU 的结构CPU由 运算器和 控制器组成 运算器 算术逻辑单元ALU 累加寄存器 AC 数据缓冲寄存器 DR 状态条件寄存器 PSW 控制器 程序计数器PC 指令寄存器 IR 指令译码器 时序部件 计算机体系结构的分类 – Flynn 体系结构类型 结构 关键特性 代表 单指令流单数据流SISD 控制部分：一个 处理器：一个 主存储模块： 一个 但处理系统 单指令流多数据流SIMD 控制部分：一个 处理器：多个 主存储模块： 多个 各种处理器以异步形式执行同一天指令 并列处理机，阵列处理机，超级向量处理机 多指令流单数据流MISD 控制部分：多个 处理器：一个 主存储模块： 多个 不存在 目前不存在 多指令流多数据流MIMD 控制部分：多个 处理器：多个 主存储模块： 多个 能够实现作业、任务、指令等各级全面并行 多处理机系统，多计算机 CISC 与 RISC 指令系统类型 指令 寻址方式 实现方式 其他 CISC（复杂） 数量多，使用频率差别大可变长格式 支持多种 微程序控制技术（微码） 研制周期长 RISC（精简） 数量少，使用频率接近，定长格式，大部分为单调指令，操作寄存器，只有Load/Store操作内存 支持方式少 增加了通用寄存器；硬布线逻辑控制为主；适合采用流水线 优化编译，有效支持高级语言 流水线 流水线是指在程序执行时多条指令重叠进行操作的一种准并行处理实现技术,各种部件同时处理是针对不同指令而言的,他们可同时为多条指令的不同部分进行工作,以提高各部件的利用率和指令的平均执行速度. 流水线的时间计算 流水线的周期为执行时间最长的一段 n条指令执行的理论时间 一条指令执行的时间（每一部分的时间和） + （指令数 - 1）* 流水线周期 n条指令执行的实践时间 流水线周期 * （指令的部分数 + 指令数 - 1） 在实践计算的时候，将第一条指令执行的时间看作周期 * 指令部分数 考试以理论结果优先 例题： 若指令流水线把一条指令分为取址、分析、执行三部分，且三部分的时间分别为：2ns、2ns、1ns、那么流水线的周期是多少？100条指令全部执行完需要多少时间？ 解答： 周期为 2ns， 理论执行时间 （2 +2 + 1) + (100 - 1) * 2 = 203ns 实践执行时间 （3 + 100 - 1） * 2 = 204ns 流水线的吞吐率计算 流水线的吞吐率（TP) 是指单位时间内流水线所完成的任务数量或输出的结果数量。 TP = 指令条数 / 流水线执行时间 流水线最大吞吐率为 ：1 / 周期 流水线的加速比定义： 完成同一任务，不使用流水线的时间与使用流水线的时间之比 s = 不使用流水线的时间 / 使用流水线的时间 存储层次化的存储结构从外存、内存、cache、寄存器，速度越来越高，容量越来越小。 CacheCache的功能：提高 CPU 数据输入输出的速率，突破 CPU 与存储系统间数据传送带宽限制。 Cache 是计算机存储系统中访问最快的层次 使用 Cache 改善系统性能的依据是程序的局部性原理 使用 Cache + 主存储器的系统的平均周期t = h * t1 + (1-h) * t2 h ：CPU对 Cache 的访问命中率， t1：Cache 的周期时间 t2：主存储器的周期时间 局部性原理 时间局部性 对刚刚访问的程序再进行访问，如循环体程序，这时就将这些都放入 Cache 中 空间局部性 对相邻的地址依次访问，如变量数组，也会将其放入 Cache 中 工作集理论：工作集是进程运行时被频繁访问的页码集合 主存分类 只读存储器（ROM） 断电存储内容不消失 随机存储器（RAM） 断电存储内容消失 编址例题： 内存地址从AC000H到C7FFFH,共有（）KB个地址单元，如果该内存地址按字（16bit）编址，由28块芯片构成。已知构成此内存的芯片每片有16KB个存储单元，则该芯片每个存储单元存储（）位 解答： 将内存大地址减去小地址再加1就是内存地址，即C7FFFH-AC000H+1=1C000H(给7加的是16，因为是16进制)， 十六进制（1C000）16=2^16+2^15+2^14=64K+32K+16K=112K. 注意此处按字编址。需要构成的内存为112K16b,使用28块芯片构成该内存，则每个芯片的容量应为4K16B。已知构成此内存的芯片每片有16K个存储单元，因此该芯片每个存储单元存储4位二进制 磁盘结构与参数存取时间 = 寻道时间 + 等待时间 寻道时间： 磁头移动到磁道所需要的时间 等待时间： 等待要读写的扇区转动到磁头下面的时间 总线 内部总线（芯片级别） 系统总线（线路板级别） 数据总线 地址总线 控制总线 外部总线（外设级别） 可靠性分析串联系统和并联系统串联可靠度：R = R1 R2 R3 … Rn 失效度： S = S1 + S2 + S3 + … + Sn 并联可靠度： R = 1 - (1 - R1) (1 - R2) … * (1 - Rn) 失效度：S = 1 - R 差错控制循环校验码 CRC 可以检错，不能纠错 重点 海明码 既可以检错，又可以纠错 重点]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动端轮播图]]></title>
    <url>%2F2019%2F03%2F08%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%BD%AE%E6%92%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[要求 自动轮播且无缝 点要随着图片的轮播而同步改变 图片的轮播可以随手指的滑动而改变 手指滑动距离小于屏幕的 1/3 吸附回去 手指滑动距离大于屏幕的 1/3 切换下一张或上一张图片 html注意： 第一张图片之前重复最后一张，最后一种之后重复第一张 123456789101112131415161718192021222324&lt;div class="jd_banner"&gt; &lt;ul class="clearFix"&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l8.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l1.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l2.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l3.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l4.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l5.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l6.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l7.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l8.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;&lt;img src="images/l1.jpg" alt=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li class="now"&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; JavaScript123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114let banner = function () &#123; /* 获取元素 */ let banner = document.querySelector('.jd_banner') let width = banner.offsetWidth let imageBox = banner.querySelector('ul:first-child') let pointBox = banner.querySelector('ul:last-child') let points = pointBox.querySelectorAll('li') let addTransition = function () &#123; imageBox.style.transition = 'all 0.2s' imageBox.style.webkitTransition = 'all 0.2s' &#125; let removeTransition = function () &#123; imageBox.style.transition = 'none' imageBox.style.webkitTransition = 'none' &#125; let setTranslateX = function (translateX) &#123; imageBox.style.transform = 'translateX(' + translateX + 'px)' imageBox.style.webkitTransform = 'translateX(' + translateX + 'px)' &#125; let index = 1 let timer = setInterval(()=&gt;&#123; index++ addTransition() setTranslateX(-index * width) &#125;, 1000); /* 判断是否要移动到第一张 */ imageBox.addEventListener('transitionend', ()=&gt;&#123; if (index &gt;= 9) &#123; index = 1 /* 清除过渡 */ removeTransition() /* 移动 */ setTranslateX(-index * width) &#125; else if (index &lt;= 0) &#123; index = 8; removeTransition() setTranslateX(-index * width) &#125; setPoint() &#125;) /* 焦点移动方法 */ let setPoint = function () &#123; // 伪数组转换成真数组 let arr = Array.from(points) arr.forEach((item)=&gt;&#123; item.classList.remove('now') &#125;) points[index - 1].classList.add('now') &#125; /* 手指触摸移动事件 ---》元素随手中移动距离的改变而改变 */ let startX = 0; let distanceX = 0 let isMove = false imageBox.addEventListener('touchstart', (e)=&gt;&#123; // 清除定时器 clearInterval(timer) // 记录触摸点的 X 坐标 startX = e.touches[0].clientX; &#125;) imageBox.addEventListener('touchmove', (e)=&gt;&#123; // 记录滑动中的 X 坐标 let moveX = e.touches[0].clientX // 计算滑动距离 distanceX = moveX - startX; // 元素移动的距离 = 当前的位置 + 滑动的距离 let translateX = -index * width + distanceX // 元素在跟随手指移动是不需要原来的动画过渡 removeTransition() setTranslateX(translateX) isMove = true &#125;) imageBox.addEventListener('touchend', (e) =&gt; &#123; /* 用滑动的距离是否小于 1/3 来判断是否切换图片 */ if (isMove) &#123; if (Math.abs(distanceX) &lt; width / 3) &#123; addTransition() setTranslateX(-index * width) &#125; else &#123; // 右滑动，切换上一张 if (distanceX &gt; 0) &#123; index-- &#125; else &#123; index++ &#125; addTransition() setTranslateX(-index * width) &#125; &#125; /* 重置参数 */ startX = 0 distanceX = 0 isMove = false /* 开启定时器 */ clearInterval(timer) timer = setInterval(() =&gt; &#123; index++ addTransition() setTranslateX(-index * width) &#125;, 1000); &#125;)&#125;]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>轮播图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bootstrap 常见组件]]></title>
    <url>%2F2019%2F03%2F06%2Fbootstrap%E5%B8%B8%E8%A7%81%E7%BB%84%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[栅格系统.container 容器响应式布局容器 用法： 123&lt;div class= 'container'&gt; 响应式内容&lt;/div&gt; .container 容器默认有 15px 的左右内间距 栅格系统栅格系统就是行列布局 行： row.row 可以填充 .container 的 15px 的内边距，因为设置了 margin-left，margin-right = 15px 用来填充 .container 容器的内边距 列 : col使用样式 1col-参数1-参数2 参数1： 参数值 作用范围 lg 大屏以上设备生效 md 中屏以上设备生效 sm 小屏以上设备生效 xs 超小屏以上设备生效 参数2： 每一行的等分数，默认 12 等分，是几就占几份（取值 1–12） 列子 12345678910111213141516171819202122232425&lt;style&gt; .container&#123; height: 100px; background: hotpink; &#125; .row&#123; height: 50px; background: pink; &#125; .row &gt; div&#123; height: 25px; border: 1px solid #000; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-3"&gt;&lt;/div&gt; &lt;div class="col-md-4"&gt;&lt;/div&gt; &lt;div class="col-md-5"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 列偏移col-参数1-offset-参数2 栅格向右偏移 多少份（ 参数和上面相同） 123&lt;div class = 'col-xm-6 col-xm-offset-1'&gt; &lt;/div&gt; 列排序 col-参数1-push-参数2 向右移动 col-参数1-pull-参数2 向左移动 导航条（navBar) 组件因为导航条中用到了 Collapse 组件 所以先要了解 collapsed 组件 Collapse 组件Collapse 组件作用时 控制其他元素的展开或隐藏 data-toggle=”collapse” 组件类型申明 为 collapse （坍塌） data-target=”.box” 控制目标为 .box的选择器的元素 在 a 标签中 data-target 可以 直接用 href 替换 1234567891011&lt;button data-toggle="collapse" data-target=".box" aria-expander='false'&gt;切换&lt;/button&gt; &lt;a href=".box" data-toggle="collapse"&gt;切换&lt;/a&gt; &lt;div class="box"&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; 内容&lt;br&gt; &lt;/div&gt; navBar组件分析 aria-expanded=”false” 用于屏幕阅读器使用，（提示有一个没有展开的区域） class=”sr-only” 仅用于屏幕阅读器阅读，里面的内不会显示 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;nav class="navbar navbar-default"&gt; &lt;!-- 采用流式布局 --&gt; &lt;div class="container-fluid"&gt; &lt;div class="navbar-header"&gt; &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt; &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt; &lt;!-- 以下为三个字体图标，共同组成了一个显示按钮 --&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;span class="icon-bar"&gt;&lt;/span&gt; &lt;/button&gt; &lt;!-- 这是商标区域--&gt; &lt;a class="navbar-brand" href="#"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;!--以下的 链接、表单、其他内容被上面的按钮切换 --&gt; &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt; &lt;ul class="nav navbar-nav"&gt; &lt;li class="active"&gt;&lt;a href="#"&gt;Link &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"&gt;Dropdown &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;One more separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class="navbar-form navbar-left"&gt; &lt;div class="form-group"&gt; &lt;input type="text" class="form-control" placeholder="Search"&gt; &lt;/div&gt; &lt;button type="submit" class="btn btn-default"&gt;Submit&lt;/button&gt; &lt;/form&gt; &lt;ul class="nav navbar-nav navbar-right"&gt; &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt; &lt;li class="dropdown"&gt; &lt;a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"&gt;Dropdown &lt;span class="caret"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class="dropdown-menu"&gt; &lt;li&gt;&lt;a href="#"&gt;Action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Another action&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Something else here&lt;/a&gt;&lt;/li&gt; &lt;li role="separator" class="divider"&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Separated link&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt; &lt;/div&gt;&lt;!-- /.container-fluid --&gt;&lt;/nav&gt; 轮播bootstrap 轮播图分析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- carousel 轮播图的模块 slide是否加上滑动效果 --&gt;&lt;!-- data-ride="carousel" 初始化轮播图属性--&gt;&lt;div id="carousel-example-generic" class="carousel slide" data-ride="carousel"&gt; &lt;!-- 点盒子 --&gt; &lt;ol class="carousel-indicators"&gt; &lt;!-- data-target="#carousel-example-generic" 控制目标轮播图 data-slide-to="0" 控制的是轮播图当中的第几张 （索引） class="active" 当前选中的点 --&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- 图片盒子 --&gt; &lt;!-- role="listbox" 提供给屏幕阅读器使用 --&gt; &lt;div class="carousel-inner"&gt; &lt;!--需要轮播的容器--&gt; &lt;div class="item active"&gt; &lt;!--图片--&gt; &lt;img src="..." alt="..."&gt; &lt;!--说明--&gt; &lt;div class="carousel-caption"&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img src="..." alt="..."&gt; &lt;div class="carousel-caption"&gt; ... &lt;/div&gt; &lt;/div&gt; ... &lt;/div&gt; &lt;!-- 上一张下一张按钮 --&gt; &lt;!-- data-slide="prev" data-slide="next" href="#carousel-example-generic" 控制目标轮播图 --&gt; &lt;a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"&gt; &lt;span class="glyphicon glyphicon-chevron-left"&gt;&lt;/span&gt; &lt;/a&gt; &lt;a class="right carousel-control" href="#carousel-example-generic" data-slide="next"&gt; &lt;span class="glyphicon glyphicon-chevron-right"&gt;&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 缺点：在移动端图片显示太过于 扁长 ，显示有缺陷，图片大小修改会造成显示问题 修改pc端显示效果将 img 标签的图片修改成 background 来显示，这样可以控制图片大小 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 &lt;style&gt; .pcimg_box&#123; height: 400px; width: 100%; display: block; background-size: cover; background-position: center; background-repeat: no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="carousel-example-generic" class="carousel slide" data-ride="carousel"&gt; &lt;!-- Indicators --&gt; &lt;!-- 指示器（焦点） --&gt; &lt;ol class="carousel-indicators"&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt; &lt;li data-target="#carousel-example-generic" data-slide-to="3"&gt;&lt;/li&gt; &lt;/ol&gt; &lt;div class="carousel-inner" role="listbox"&gt; &lt;div class="item active"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_01_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_02_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_03_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;a href="" class="pcimg_box" style="background-image:url('../微金所/images/slide_04_2000x410.jpg')"&gt;&lt;/a&gt; &lt;/div&gt; &lt;a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev"&gt; &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt; &lt;span class="sr-only"&gt;Previous&lt;/span&gt; &lt;/a&gt; &lt;a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next"&gt; &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt; &lt;span class="sr-only"&gt;Next&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; 需要将背景图片写在行内样式中，方便后端渲染 标签页12345678910111213141516&lt;!-- 页签 --&gt; &lt;ul class="nav nav-tabs" role="tablist"&gt; &lt;li role="presentation" class="active"&gt;&lt;a href="#home" aria-controls="home" role="tab" data-toggle="tab"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#profile" aria-controls="profile" role="tab" data-toggle="tab"&gt;Profile&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#messages" aria-controls="messages" role="tab" data-toggle="tab"&gt;Messages&lt;/a&gt;&lt;/li&gt; &lt;li role="presentation"&gt;&lt;a href="#settings" aria-controls="settings" role="tab" data-toggle="tab"&gt;Settings&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;!-- Tab panes --&gt; &lt;div class="tab-content"&gt; &lt;div role="tabpanel" class="tab-pane active" id="home"&gt;1&lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="profile"&gt;2&lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="messages"&gt;3&lt;/div&gt; &lt;div role="tabpanel" class="tab-pane" id="settings"&gt;4&lt;/div&gt; &lt;/div&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据的获取和转换]]></title>
    <url>%2F2019%2F03%2F05%2F%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8E%B7%E5%8F%96%E5%92%8C%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数据的获取和转换获取页面 url 通过问号传参传递的样式为： 1http://localhost:3000/m/searchList.html?key=1&amp;name=10 获取： 1234567891011121314var getParamsByUrl = function () &#123; var params = &#123;&#125; var search = location.search //"?key=1&amp;name=10" if (search) &#123; search = search.replace('?', '') //"key=1&amp;name=10" var arr = search.split('&amp;') //["key=1", "name=10"] arr.forEach(function (item, i) &#123; var itemArr = item.split('=') //["key", "1"] ["name", "10"] params[itemArr[0]] = itemArr[1] //&#123;key: "1", name: "10"&#125; &#125;) &#125; return params; &#125;var params = getParamsByUrl()]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模板引擎使用步骤]]></title>
    <url>%2F2019%2F03%2F04%2F%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%2F</url>
    <content type="text"><![CDATA[模板引擎渲染步骤 获取数据 定义模板 调用模板 返回 html 1. 用 jQuery 发送 get请求，获取数据123456789101112var getFirstCategoryData = function (callback) &#123; $.ajax(&#123; url: '/category/queryTopCategory', type: 'get', data: '', dataType: 'json', success: function (data) &#123; callback &amp;&amp; callback(data) &#125; &#125;);&#125; 后台返回的json数据 12345678&#123;total: 5, rows: Array(5)&#125;rows: Array(5)0: &#123;id: 1, categoryName: "运动馆", isDelete: 1&#125;1: &#123;id: 2, categoryName: "女士馆", isDelete: 1&#125;2: &#123;id: 3, categoryName: "男士馆", isDelete: 1&#125;3: &#123;id: 4, categoryName: "帆布馆", isDelete: 1&#125;4: &#123;id: 5, categoryName: "户外管", isDelete: 1&#125;length: 5 2. 定义模板12345&lt;script type="text/template" id="firstTemplate"&gt; &lt;% for(var i = 0; i &lt; rows.length; i++) &#123; %&gt; &lt;li class="&lt;%= i==0?'now':''%&gt;"&gt;&lt;a href="javascript:;" data-id = "&lt;%=rows[i].id%&gt;"&gt; &lt;%=rows[i].categoryName%&gt;&lt;/a&gt;&lt;/li&gt; &lt;% &#125; %&gt; &lt;/script&gt; 3. 调用模板,进行渲染123getFirstCategoryData(function (data) &#123; $('.cate_left ul').html(template('firstTemplate',data)) &#125;) 4. 渲染结果1234567891011&lt;ul&gt; &lt;li class="now"&gt;&lt;a href="javascript:;" data-id="1"&gt;运动馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="2"&gt;女士馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="3"&gt;男士馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="4"&gt;帆布馆&lt;/a&gt;&lt;/li&gt; &lt;li class=""&gt;&lt;a href="javascript:;" data-id="5"&gt;户外馆&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>json</tag>
        <tag>ajax</tag>
        <tag>模板引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[less常见语法]]></title>
    <url>%2F2019%2F03%2F03%2Fless%E5%B8%B8%E8%A7%81%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Less安装less1npm i -g less less 文件编译成 css 文件手动编译 1lessc less文件.less 编译后的css文件.css vscode 自动编译 安装插件 Ease Less 变量申明变量 必须@ 前缀 : 相当于 等号 ，必须; 结束。 必须符合变量的命名规则。 1@mainColor: #ccc; 使用变量123a:hover&#123; color:@mainColor;&#125; 编译结果 123a:hover&#123; color:#ccc;&#125; 注意：less 文件开头 指定编码为 UTF-8 编码 1@charset "UTF-8" Mixin 混入类混入less 语法 12345678910.w50&#123; width: 50%;&#125;.f_left&#123; float: left;&#125;.w50-f_left&#123; .w50(); .f_left();&#125; 编译成 css 12345678910.w50 &#123; width: 50%;&#125;.f_left &#123; float: left;&#125;.w50-f_left &#123; width: 50%; float: left;&#125; 编译的 css 会出现混入前的类 函数混入less 语法 12345678910.w50()&#123; width: 50%;&#125;.f_left()&#123; float: left;&#125;.w50-f_left&#123; .w50(); .f_left()&#125; 编译成 css 。 1234.w50-f_left &#123; width: 50%; float: left;&#125; 编译后的 css 不会出现函数本体。 带参函数混入 定义了参数（没有默认值）调用的时候必须传参。 定义 默认值的方式和定义变量相同。 定义了参数（有默认值），调用的时候可以不用传参。 less 语法 12345678.f(@direction: left) &#123; float:@direction;&#125;.r_left&#123; .f(); .f(right)&#125; 编译的 css 1234.r_left &#123; float: left; float: right;&#125; 嵌套为了使 css 的层次更加清楚 ，less 可以像 html一样进行类似的嵌套写法 less语法 1234567891011121314.top_bar&#123; position: relative; img&#123; display: block; position: absolute; top: 0; left: 0; &#125; &amp;::after&#123; content: ""; display: block; &#125;&#125; 编译后的 css 12345678910.top_bar img &#123; display: block; position: absolute; top: 0; left: 0;&#125;.top_bar::after &#123; content: ""; display: block;&#125; 注意：伪类和伪元素等需要和前面的选择器紧挨使用的 需要用&amp;符号进行连接否则编译后会有空格。 Import（导入）less 可以进行模块化，最后可以用 import 进行导入组合 variables.less 的内容 123456789@mainColor:#ccc;@box: box;a:hover&#123; color: @mainColor;&#125;.@&#123;box&#125; &#123; color:@mainColor;&#125; 在 main.less 中导入 variables.less 1@import "variables"; 编译的 css 文件 123456a:hover &#123; color: #ccc;&#125;.box &#123; color: #ccc;&#125; 运算less 支持数字的简单运算 1234567@num:7;ul&#123; width: 100% * @num; li&#123; width: 100% / @num; &#125;&#125; 编译后的css 123456ul &#123; width: 700%;&#125;ul li &#123; width: 14.28571429%;&#125;]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rem+less适配]]></title>
    <url>%2F2019%2F03%2F03%2Frem-less%E9%80%82%E9%85%8D%2F</url>
    <content type="text"><![CDATA[rem 和 emrem和 em都是相对单位 区别 em 是基于父容器的字体大小 rem 是基于根元素（也就是 html 元素）的字体大小 rem 适配常见的适配方案 名称 缺点 伸缩布局 元素只能宽度适配 流式布局 元素只能宽度适配 响应式布局 元素只能宽度适配 rem 布局 高度和宽度可以同时适配 rem 适配原理页面的尺寸都用 rem 作为单位，针对不同大小的页面只需要更改 基准值 html 的大小即可实现适配 rem 基准值的换算公式当前设备 rem 基准值 = 预设的基准值 / 设计稿的宽度 * 当前设备的宽度 当前的设备： 设备宽度为 640px ，当前的 div 为 640px 100px，预设基准为 100px ，所以div 大小可以转换为 6.4rem 1rem 适配的设备： 设备宽度为 320px ，div 的大小为 6.4rem * 1rem，要想div的尺寸实现适配，需要修改当前的 rem 基准值。 由上面的公式可以算出： 100 / 640 * 320 = 50px。 所以需要修改当前的 基准值为 50px less + rem 实现多种设备的适配根据 rem 的适配原理，可以知道是根据设备的宽度不同来改变 html 元素的字体大小来进行适配。所以如果根据当前设备宽度来改变 html 元素的字体大小呢？ 方式一：媒体查询 同时适配 640px 和 320px 的设备 1234567891011121314151617181920212223242526272829&lt;style&gt; @media (min-width:320px) &#123; html&#123; font-size: 50px; &#125; &#125; @media (min-width: 640px) &#123; html&#123; font-size: 100px; &#125; &#125; body&#123; margin: 0; padding: 0; &#125; header&#123; width: 100%; height: 1rem; line-height: 1rem; font-size: 0.32rem; text-align: center; background-color: green; color: #fff; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt;购物车&lt;/header&gt;&lt;/body&gt; 随着设备的增多，媒体查询和基准值的计算会不方便同时也不好维护，所以可以通过 less 进行改进 方式二：less 定义存储变量的less 文件 var.less 123456789101112@charset "UTF-8";//变量// 通过 less 定义数组，存储主流设备的尺寸@adapterDeviceList:750px, 720px, 640px, 540px, 480px, 424px, 414px, 400px, 384px, 375px, 360px, 320px;// 设计稿尺寸@psdWidth: 750px;// 预设基准值@baseFontSize: 100px;// 设备的种类（数组的长度）// 通过内置函数 length来获取@len: length(@adapterDeviceList); 设置一个适配的less 文件 mixins.less 这个less文件通过递归来生成不同的媒体查询 less 没有循环语法 when （此处是函数的执行条件） 内置函数 extract（）用于获取数组里面的元素，传入两个参数，一个是数组名称，另一个时序号 下面的函数是倒着获取数组元素，生成媒体插叙的函数 123456789.adapterMixins(@index) when(@index &gt; 0) &#123; @media (min-width: extract(@adapterDeviceList, @index)) &#123; html&#123; font-size: @baseFontSize / @psdWidth * extract(@adapterDeviceList, @index); &#125; &#125; .adapterMixins(@index - 1);&#125;.adapterMixins(@len); 设置一个less 文件用于引入上面的less文件的 index.less 12@import "var.less";@import "mixins.less"; 编译 index.less 后引入到html文件即可]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>less</tag>
        <tag>rem</tag>
      </tags>
  </entry>
</search>
